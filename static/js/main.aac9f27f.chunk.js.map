{"version":3,"sources":["icons/svg/delapouite/heart-beats.svg","icons/svg/delapouite/biceps.svg","icons/svg/lorc/brain.svg","icons/svg/delapouite/eye-target.svg","icons/svg/lorc/juggler.svg","icons/svg/lorc/sprint.svg","icons/svg/lorc/clover.svg","icons/svg/delapouite/convergence-target.svg","icons/svg/lorc/star-swirl.svg","icons/svg/sbed/targeted.svg","icons/svg/lorc/high-shot.svg","icons/svg/delapouite/shield-impact.svg","icons/svg/lorc/fire-zone.svg","icons/svg/lorc/heavy-timer.svg","icons/svg/lorc/ubisoft-sun.svg","icons/svg/lorc/flat-hammer.svg","icons/svg/lorc/hammer-drop.svg","icons/svg/lorc/bordered-shield.svg","icons/svg/delapouite/skills.svg","icons/svg/lorc/knapsack.svg","icons/svg/lorc/split-cross.svg","assets/img/flat-forestred.jpg","objects/Stats.ts","functions/Entity.ts","objects/Status.ts","objects/Traits.ts","functions/Stats.ts","functions/Traits.ts","functions/Roll.ts","functions/Party.ts","util/getRandom.ts","util/noneg.ts","objects/Party.ts","functions/Skill.ts","objects/skills/smash.ts","objects/skills/shockwave.ts","objects/weapons/blacksmiths_hammer.ts","objects/skills/shot.ts","objects/skills/snipe_shot.ts","objects/weapons/hunting_bow.ts","objects/skills/surge.ts","objects/skills/area_blast.ts","objects/skills/Dazzle.ts","objects/Weapon.ts","objects/weapons/scholars_book.ts","objects/skills/taunt.ts","objects/armor/simple_iron_shield.ts","objects/armor/explorers_cloak.ts","objects/armor/explorers_hat.ts","objects/armor/fur_armor.ts","objects/armor/adventure_boots.ts","objects/armor/adventure_cloak.ts","objects/Armor.ts","objects/armor/fur_boots.ts","objects/skills/enemy/bite.ts","objects/enemies/index.ts","objects/enemies/timberwolf.ts","functions/Character.ts","functions/Weapon.ts","state/party/index.ts","state/util.ts","hooks/useActions.ts","contexts/PartyContext/index.tsx","types/CombatQueue.ts","contexts/CombatContext/index.tsx","functions/AI.ts","elements/flex.ts","elements/monospace.tsx","contexts/CombatLogContext/util.tsx","contexts/CombatLogContext/index.tsx","components/Hover/index.tsx","elements/box.tsx","components/Tooltip/index.tsx","components/Gauge/index.tsx","elements/badge.tsx","components/Icon/index.tsx","icons/maps.tsx","components/PartyCharacter/index.tsx","elements/button.tsx","components/CombatPlayerParty/index.tsx","contexts/ModalContext/reducer.ts","contexts/ModalContext/index.tsx","components/SkillChecks/index.tsx","components/RoundResultRenderer/index.tsx","components/SkillPreview/index.tsx","components/CombatActions/index.tsx","components/EnemyCharacter/index.tsx","components/CombatParty/index.tsx","components/CombatQueue/index.tsx","components/CombatLog/index.tsx","domain/Combat.tsx","App.tsx","serviceWorker.ts","index.tsx","state/index.ts"],"names":["module","exports","ZERO_STATS","vigor","strength","intelligence","perception","talent","agility","luck","armor","resistance","evasion","healthOffset","health","healthRegen","criticalChance","damageModifier","CLASS_STARTING_STATS","blacksmith","hunter","scholar","bard","enemy","makeEntity","name","id","v4","STATUS_EFFECTS","bleeding","type","canStack","duration","traits","commitChance","committedTraits","damage","stats","burning","frozen","poisoned","ZERO_TRAIT","combineStats","reduce","p","c","combineTraits","getTraitsFromObjects","parents","makeCheck","key","offset","resolveCheck","character","check","statValue","getCharacterStat","roll","DiceRoll","input","result","total","averageTotal","maxTotal","minTotal","output","checkForProcessedParty","party","processed","Error","characters","forEach","checkForProcessedCharacter","makeParty","characterCount","isParty","Array","fill","map","_","i","makeEnemy","findCharacterInParty","find","updateCharacter","characterId","updater","processParty","processCharacter","partyId","getRandom","items","Math","floor","random","length","noneg","value","PLAYER_PARTY_ID","resolveSkillTarget","target","makeSkillTarget","isCharacter","undefined","e","getSkillDamage","skill","source","rawDamage","weapon","damageResistances","getDamageResistance","round","getSkillResults","targets","sourceResult","criticalHitResult","rollResults","rolls","passedCount","filter","r","perfect","results","every","didAllPass","accuracySuccess","criticalSuccess","pierce","perfectPierce","splashDamage","perfectSplash","addedStatus","perfectStatus","addedTags","perfectTags","getSourceSkillResult","dodgeResult","dodgeSuccess","blockedDamage","totalDamage","getTargetSkillResult","localUpdater","SMASH","targetType","SHOCKWAVE","BLACKSMITHS_HAMMER","rarity","hands","skills","SHOT","SNIPE_SHOT","HUNTING_BOW","SURGE","AREA_BLAST","DAZZLE","CLASS_STARTING_WEAPONS","TAUNT","SIMPLE_IRON_SHIELD","EXPLORERS_CLOAK","EXPLORERS_HAT","FUR_ARMOR","ADVENTURE_BOOTS","ADVENTURE_CLOAK","CLASS_STARTING_ARMOR","BITE","ALL_ENEMIES","level","class","tags","status","getStatusEffects","getSkills","getTraits","combinedTrait","processWeapon","statusEffects","hVigor","startingHealth","rawStats","dead","makeCharacter","characterClass","staicEnemy","decrementStatusDurations","tag","addMultipleStatus","statusTypes","char","statusType","statusEffect","s","addStatus","damageType","hasTag","tagType","t","includes","actionCreators","payload","actions","updateParty","dispatch","upsertCharacter","deleteCharacter","core","state","action","jack","makeReducer","initialState","coreFn","usePartyActions","useDispatch","useMemo","bindActionCreators","useActions","defaultContextValue","rawParty","findCharacter","findRawCharacter","PartyContext","React","createContext","PartyContextProvider","props","children","useSelector","Provider","makeCombatQueue","sort","a","b","getMin","queue","Object","keys","Number","POSITIVE_INFINITY","consolidateQueue","min","getFirst","defaultValue","enemyParty","activeCharacter","selectedSkill","selectedTargets","roundResults","activeRound","isRunning","isDone","isRenderingResult","onSkillSelect","onTargetsSelect","start","next","commit","CombatContext","useCombatContext","useContext","CombatContextProvider","setEnemyParty","onRequestNewParty","resultCommitter","index","sourceParty","targetParty","localUpdate","splashDamageResistance","commitSkillResults","useState","setIsRunning","setIsDone","setIsRenderingResult","setQueue","roundId","setRoundId","setRoundResults","setActiveRound","selectedTarget","setSelectedTarget","setSelectedSkill","useCallback","useEffect","parties","updatedCharacters","validateQueue","shiftQueue","playerParty","targetedCharacters","getSkillTargetOptions","getAIAction","execEnemyTurn","alert","nextTarget","roundTarget","FlexContainer","styled","display","flexDirection","$direction","flex","$full","FullContainer","Monospace","fontFamily","fontWeight","Monodiv","Span","color","text","style","SkillSpan","NameSpanBuilder","isUserParty","isEnemyParty","CombatLogContext","combatLog","useCombatLogContext","CombatLogContextProvider","setCombatLog","deadLog","setDeadLog","NameSpan","log","line","setTimeout","dLog","latestRounds","baseRound","subTarget","Hover","delay","internalHovering","setInternalHovering","isHovering","setIsHovering","guid","setGuid","useLayoutEffect","onMouseEnter","preventDefault","stopPropagation","onMouseLeave","BoxContainer","substyle","Element","rest","border","boxSizing","background","padding","boxShadow","Tooltip","direction","tagName","arrow","HoverToolTip","isOpen","Gauge","max","height","percentage","content","borderLeft","position","borderColor","left","maxWidth","minWidth","textShadow","backgroundColor","alignItems","justifyContent","transition","lineHeight","right","top","fontSize","overflow","Div","transform","Badge","withWrapper","$absolute","$size","width","borderRadius","$color","$top","bottom","$bottom","$right","$left","Icon","src","size","shadow","onClick","loading","setLoading","svg","setSvg","fetch","then","res","className","dangerouslySetInnerHTML","__html","STATI_ICONS","Vigor","Strength","Brain","Awareness","Juggler","Agility","Clover","accuracy","Accuracy","TAG_ICONS","dazed","Dazed","targeted","Targeted","SKILL_ICONS","Shot","SnipeShot","Surge","AreaBast","Dazzle","Smash","Shockwave","Taunt","ResourceE","withStyle","textAlign","Wrapper","$selected","$active","$hoverable","margin","$isHovering","CharacterStat","statKey","getStatColor","marginRight","PartyCharacter","hoverable","selected","opacity","borderWidth","cursor","borderRight","alt","marginTop","paddingLeft","borderBottom","Inventory","Details","Button","outline","ConfirmButton","borderTop","CombatPlayerParty","contents","callback","blocking","styles","OPEN","CLOSE","reducer","coreFunction","ModalContext","open","close","setBlocking","setPayload","setContents","setCallback","setStyles","useModalContext","getContextValue","Modal","setAppElement","ModalContextProvider","reducerValue","useReducer","context","onRequestClose","modal","overlay","SkillChecks","label","SkillCheck","getColor","X","RoundResultRenderer","isModal","setIsOpen","RoundResult","rounds","console","stream","Kefir","sequentially","onValue","onEnd","later","SkillPreview","perfectChance","damageString","getSkillDamageRange","perfectKeys","base","getPerfectKeys","marginBottom","CombatActions","EnemyCharacter","CombatParty","CombatQueue","first","sortedIds","getSortedIds","bigList","count","NEGATIVE_INFINITY","getMax","widthCoef","CombatLog","scrollRef","useRef","current","scrollIntoView","behavior","ref","Combat","ForestBg","backgroundSize","App","rawEnemyParty","setRawEnemyParty","Boolean","window","location","hostname","match","engine","Styletron","store","createStore","combineReducers","compose","applyMiddleware","thunk","ReactDOM","render","StrictMode","debug","debugAfterHydration","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aac9f27f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/heart-beats.6b1fff9c.svg\";","module.exports = __webpack_public_path__ + \"static/media/biceps.e62c221f.svg\";","module.exports = __webpack_public_path__ + \"static/media/brain.ce65603a.svg\";","module.exports = __webpack_public_path__ + \"static/media/eye-target.4c5ae680.svg\";","module.exports = __webpack_public_path__ + \"static/media/juggler.1188c0be.svg\";","module.exports = __webpack_public_path__ + \"static/media/sprint.968b443a.svg\";","module.exports = __webpack_public_path__ + \"static/media/clover.df6a0d57.svg\";","module.exports = __webpack_public_path__ + \"static/media/convergence-target.0d2998bc.svg\";","module.exports = __webpack_public_path__ + \"static/media/star-swirl.3045bd1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/targeted.b4ce8dd7.svg\";","module.exports = __webpack_public_path__ + \"static/media/high-shot.eed9def8.svg\";","module.exports = __webpack_public_path__ + \"static/media/shield-impact.54fdc5c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/fire-zone.42e13657.svg\";","module.exports = __webpack_public_path__ + \"static/media/heavy-timer.1072a406.svg\";","module.exports = __webpack_public_path__ + \"static/media/ubisoft-sun.30335592.svg\";","module.exports = __webpack_public_path__ + \"static/media/flat-hammer.dff14efb.svg\";","module.exports = __webpack_public_path__ + \"static/media/hammer-drop.120a92c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/bordered-shield.56c12b47.svg\";","module.exports = __webpack_public_path__ + \"static/media/skills.60519e24.svg\";","module.exports = __webpack_public_path__ + \"static/media/knapsack.62049a62.svg\";","module.exports = __webpack_public_path__ + \"static/media/split-cross.fa0be1a3.svg\";","module.exports = __webpack_public_path__ + \"static/media/flat-forestred.951e7322.jpg\";","import { StatsT, CharacterClassT } from '../types'\r\n\r\nexport const ZERO_STATS: StatsT = {\r\n  vigor: 0,\r\n  strength: 0,\r\n  intelligence: 0,\r\n  perception: 0,\r\n  talent: 0,\r\n\r\n  agility: 0,\r\n  luck: 0,\r\n  armor: 0,\r\n  resistance: 0,\r\n  evasion: 0,\r\n\r\n  healthOffset: 0,\r\n  health: 0,\r\n  healthRegen: 0,\r\n  criticalChance: 0,\r\n  damageModifier: 0,\r\n}\r\n\r\nexport const CLASS_STARTING_STATS: Record<CharacterClassT, StatsT> = {\r\n  blacksmith: {\r\n    strength: 76,\r\n    vigor: 80,\r\n    intelligence: 40,\r\n    perception: 52,\r\n    talent: 72,\r\n    agility: 56,\r\n    luck: 50,\r\n    armor: 2,\r\n    resistance: 0,\r\n    evasion: 7,\r\n    healthOffset: 0,\r\n    health: 0,\r\n    healthRegen: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n  },\r\n  hunter: {\r\n    strength: 52,\r\n    vigor: 66,\r\n    intelligence: 46,\r\n    perception: 78,\r\n    talent: 64,\r\n    agility: 78,\r\n    luck: 50,\r\n    armor: 1,\r\n    resistance: 0,\r\n    evasion: 20,\r\n    healthOffset: 0,\r\n    health: 0,\r\n    healthRegen: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n  },\r\n  scholar: {\r\n    strength: 42,\r\n    vigor: 60,\r\n    intelligence: 78,\r\n    perception: 66,\r\n    talent: 70,\r\n    agility: 70,\r\n    luck: 50,\r\n    armor: 0,\r\n    resistance: 1,\r\n    evasion: 13,\r\n    healthOffset: 0,\r\n    health: 0,\r\n    healthRegen: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n  },\r\n  bard: {\r\n    strength: 44,\r\n    vigor: 50,\r\n    intelligence: 70,\r\n    perception: 68,\r\n    talent: 78,\r\n    agility: 68,\r\n    luck: 50,\r\n    armor: 0,\r\n    resistance: 1,\r\n    evasion: 11,\r\n    healthOffset: 0,\r\n    health: 0,\r\n    healthRegen: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n  },\r\n  enemy: ZERO_STATS,\r\n}\r\n","import { v4 } from 'uuid'\r\n\r\nexport const makeEntity = (name: string = '') => ({\r\n  id: v4(),\r\n  name,\r\n})\r\n","import { StatusTypeT, StatusT } from '../types'\r\nimport { makeEntity } from '../functions/Entity'\r\nimport { ZERO_STATS } from './Stats'\r\n\r\nconst STATUS_DURATION = 5\r\nexport const STATUS_EFFECTS: Record<StatusTypeT, StatusT> = {\r\n  bleeding: {\r\n    ...makeEntity('Bleeding'),\r\n    type: 'bleeding',\r\n    canStack: false,\r\n    duration: STATUS_DURATION,\r\n    traits: [],\r\n    commitChance: 50,\r\n    committedTraits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          healthOffset: -10,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  burning: {\r\n    ...makeEntity('Burning'),\r\n    type: 'burning',\r\n    canStack: false,\r\n    duration: STATUS_DURATION,\r\n    traits: [],\r\n    commitChance: 100,\r\n    committedTraits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          healthOffset: -10,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  frozen: {\r\n    ...makeEntity('Frozen'),\r\n    type: 'frozen',\r\n    canStack: false,\r\n    duration: STATUS_DURATION,\r\n    traits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          damageModifier: 0.25,\r\n        },\r\n      },\r\n    ],\r\n    commitChance: 0,\r\n    committedTraits: [],\r\n  },\r\n  poisoned: {\r\n    ...makeEntity('Poisoned'),\r\n    type: 'poisoned',\r\n    canStack: true,\r\n    duration: STATUS_DURATION,\r\n    traits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          strength: -5,\r\n          intelligence: -5,\r\n          perception: -5,\r\n          talent: -5,\r\n        },\r\n      },\r\n    ],\r\n    commitChance: 100,\r\n    committedTraits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          healthOffset: -5,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n}\r\n","import { TraitT } from '../types'\r\nimport { ZERO_STATS } from './Stats'\r\n\r\nexport const ZERO_TRAIT: TraitT = {\r\n  damage: 0,\r\n  duration: -1,\r\n  stats: ZERO_STATS,\r\n}\r\n","import { StatsT } from '../types'\r\nimport { ZERO_STATS } from '../objects'\r\n\r\nexport const combineStats = (...stats: StatsT[]): StatsT => {\r\n  return stats.reduce(\r\n    (p, c) => ({\r\n      vigor: p.vigor + c.vigor,\r\n      strength: p.strength + c.strength,\r\n      intelligence: p.intelligence + c.intelligence,\r\n      perception: p.perception + c.perception,\r\n      talent: p.talent + c.talent,\r\n      agility: p.agility + c.agility,\r\n      luck: p.luck + c.luck,\r\n      armor: p.armor + c.armor,\r\n      resistance: p.resistance + c.resistance,\r\n      evasion: p.evasion + c.evasion,\r\n      criticalChance: p.criticalChance + c.criticalChance,\r\n      damageModifier: p.damageModifier + c.damageModifier,\r\n      healthOffset: p.healthOffset + c.healthOffset,\r\n      health: p.health + c.health,\r\n      healthRegen: p.healthRegen + c.healthRegen,\r\n    }),\r\n    ZERO_STATS,\r\n  )\r\n}\r\n","import { TraitT, HasTraitsT, HasCommittedTraits } from '../types'\r\nimport { combineStats } from './Stats'\r\nimport { ZERO_TRAIT } from '../objects'\r\n\r\nexport const combineTraits = (...traits: TraitT[]): TraitT => {\r\n  return traits.reduce(\r\n    (p, c) => ({\r\n      damage: p.damage + c.damage,\r\n      stats: combineStats(p.stats, c.stats),\r\n      duration: -1,\r\n    }),\r\n    ZERO_TRAIT,\r\n  )\r\n}\r\n\r\nexport const getTraitsFromObjects = (parents: HasTraitsT[]) => {\r\n  return parents.reduce((p, c) => {\r\n    return [...p, ...c.traits]\r\n  }, [] as TraitT[])\r\n}\r\nexport const getCommittedTraitsFromObjects = (\r\n  parents: HasCommittedTraits[],\r\n) => {\r\n  return parents.reduce((p, c) => {\r\n    return [...p, ...c.committedTraits]\r\n  }, [] as TraitT[])\r\n}\r\n","import { DiceRoll } from 'rpg-dice-roller'\r\nimport { ProcessedCharacterT, CheckResultT, CheckT, StatsT } from '../types'\r\nimport { getCharacterStat } from './Character'\r\n\r\nexport const makeCheck = (key: keyof StatsT, offset?: number): CheckT => ({\r\n  key,\r\n  offset,\r\n})\r\n\r\nexport const resolveCheck = (\r\n  character: ProcessedCharacterT,\r\n  check: CheckT,\r\n): CheckResultT => {\r\n  const statValue = getCharacterStat(character, check)\r\n  const roll = new DiceRoll('1d100')\r\n  return {\r\n    input: check,\r\n    result: roll.total <= statValue,\r\n    total: roll.total,\r\n    averageTotal: roll.averageTotal,\r\n    maxTotal: roll.maxTotal,\r\n    minTotal: roll.minTotal,\r\n    output: roll.output,\r\n  }\r\n}\r\n\r\nexport const getChecksProbability = (\r\n  character: ProcessedCharacterT,\r\n  checks: CheckT[],\r\n): number => {\r\n  const statValues = checks.map((check) => getCharacterStat(character, check))\r\n  const result = statValues.reduce((p, c) => {\r\n    return p * (c / 100)\r\n  }, 1)\r\n  return result\r\n}\r\n\r\nexport const getPassedCount = (results: CheckResultT[]): number =>\r\n  results.filter((r) => r.result).length\r\n\r\nexport const didAllPass = (results: CheckResultT[]): boolean =>\r\n  results.every((r) => r.result)\r\n","import { CharacterT, PartyT, ProcessedPartyT, EntityT } from '../types'\r\nimport {\r\n  checkForProcessedCharacter,\r\n  processCharacter,\r\n  makeEnemy,\r\n} from './Character'\r\nimport { makeEntity } from './Entity'\r\n\r\nexport const isParty = (e: EntityT) => e && (e as PartyT).isParty\r\n\r\nexport const checkForProcessedParty = (party: PartyT) => {\r\n  if ((party as ProcessedPartyT).processed) {\r\n    throw new Error('No Processed Parties Allowed')\r\n  }\r\n  party.characters.forEach((character) => {\r\n    checkForProcessedCharacter(character)\r\n  })\r\n}\r\n\r\nexport const makeParty = (characterCount: number = 0): PartyT => {\r\n  return {\r\n    ...makeEntity(),\r\n    isParty: true,\r\n    characters: Array(characterCount)\r\n      .fill(null)\r\n      .map((_, i) => {\r\n        return makeEnemy()\r\n      }),\r\n  }\r\n}\r\n\r\nexport const findCharacterInParty = <\r\n  T extends PartyT = PartyT,\r\n  R extends CharacterT = CharacterT\r\n>(\r\n  party: T,\r\n  id: string,\r\n): R | undefined => {\r\n  return (party.characters as R[]).find((c) => c.id === id)\r\n}\r\n\r\nexport const updateCharacter = (\r\n  party: PartyT,\r\n  characterId: string,\r\n  updater: (character: CharacterT) => CharacterT,\r\n): PartyT => {\r\n  checkForProcessedParty(party)\r\n  return {\r\n    ...party,\r\n    characters: party.characters.map((c) =>\r\n      c.id === characterId ? updater(c) : c,\r\n    ),\r\n  }\r\n}\r\n\r\nexport const processParty = (party: PartyT): ProcessedPartyT => {\r\n  return {\r\n    ...party,\r\n    processed: true,\r\n    characters: party.characters.map((c) => ({\r\n      ...processCharacter(c),\r\n      partyId: party.id,\r\n    })),\r\n  }\r\n}\r\n","export const getRandom = <T>(items: T[]) =>\r\n  items[Math.floor(Math.random() * items.length)]\r\n","export const noneg = (value: number) => (value > 0 ? value : 0)\r\n","import { v4 } from 'uuid'\r\n\r\nexport const PLAYER_PARTY_ID = v4()\r\n","import {\r\n  ProcessedCharacterT,\r\n  SourceSkillResultT,\r\n  HasSkillsT,\r\n  SkillT,\r\n  DamageT,\r\n  TargetSkillResultT,\r\n  CharacterT,\r\n  PartyT,\r\n  SkillTargetT,\r\n  ProcessedPartyT,\r\n  TargetTypeT,\r\n} from '../types'\r\nimport { resolveCheck, getPassedCount, didAllPass } from './Roll'\r\nimport {\r\n  getDamageResistance,\r\n  isCharacter,\r\n  processCharacter,\r\n  addMultipleStatus,\r\n  decrementStatusDurations,\r\n} from './Character'\r\nimport { updateCharacter, isParty } from './Party'\r\nimport { noneg } from '../util'\r\nimport { PLAYER_PARTY_ID } from '../objects/Party'\r\n\r\nexport const getSkillsFromObjects = (parents: HasSkillsT[]) => {\r\n  return parents.reduce((p, c) => {\r\n    return [...p, ...c.skills]\r\n  }, [] as SkillT[])\r\n}\r\n\r\nexport const resolveSkillTarget = (\r\n  target: SkillTargetT,\r\n): ProcessedCharacterT[] => {\r\n  switch (target.type) {\r\n    case 'single':\r\n      return target.character ? [target.character] : []\r\n    case 'ally':\r\n      return target.character ? [target.character] : []\r\n    case 'self':\r\n      return target.character ? [target.character] : []\r\n    case 'party':\r\n      return target.party?.characters || []\r\n    case 'group':\r\n      return target.party?.characters || []\r\n    default:\r\n      return []\r\n  }\r\n}\r\n\r\nexport const makeSkillTarget = (\r\n  type: TargetTypeT,\r\n  target: ProcessedCharacterT | ProcessedPartyT,\r\n): SkillTargetT => {\r\n  return {\r\n    type,\r\n    character: isCharacter(target)\r\n      ? (target as ProcessedCharacterT)\r\n      : undefined,\r\n    party: isParty(target) ? (target as ProcessedPartyT) : undefined,\r\n  }\r\n}\r\n\r\nexport const getSourceSkillResult = (\r\n  source: ProcessedCharacterT,\r\n  skill: SkillT,\r\n): SourceSkillResultT => {\r\n  const criticalHitResult = resolveCheck(source, {\r\n    offset: source.stats.criticalChance,\r\n  })\r\n  const rollResults = (source.weapon.rolls ? source.weapon.rolls : skill.rolls)\r\n    .map((check) => resolveCheck(source, check))\r\n    .map((result) =>\r\n      criticalHitResult.result ? { ...result, result: true } : result,\r\n    )\r\n  const passedCount = criticalHitResult.result\r\n    ? skill.rolls.length\r\n    : getPassedCount(rollResults)\r\n  const perfect = didAllPass(rollResults)\r\n  const accuracySuccess = passedCount > 0\r\n  const rawDamage: DamageT = {\r\n    damage: Math.round(\r\n      (passedCount * getSkillDamage(skill, source).damage) / rollResults.length,\r\n    ),\r\n    type: source.weapon.damage.type,\r\n  }\r\n  return {\r\n    rollResults,\r\n    skill,\r\n    source,\r\n    accuracySuccess,\r\n    criticalSuccess: criticalHitResult.result,\r\n    passedCount,\r\n    perfect,\r\n    rawDamage,\r\n    pierce: (perfect && skill.perfectPierce) || criticalHitResult.result,\r\n    splashDamage:\r\n      skill.perfectSplash && perfect\r\n        ? { type: rawDamage.type, damage: Math.floor(rawDamage.damage / 2) }\r\n        : { type: rawDamage.type, damage: 0 },\r\n    addedStatus: perfect ? skill.perfectStatus : [],\r\n    addedTags: perfect ? skill.perfectTags : [],\r\n  }\r\n}\r\n\r\nexport const getTargetSkillResult = (\r\n  target: ProcessedCharacterT,\r\n  sourceResult: SourceSkillResultT,\r\n): TargetSkillResultT => {\r\n  if (sourceResult.accuracySuccess) {\r\n    const dodgeResult = resolveCheck(target, { key: 'evasion' })\r\n    const damageResistances = sourceResult.pierce\r\n      ? 0\r\n      : getDamageResistance(target, sourceResult.rawDamage.type)\r\n    const dodgeSuccess = sourceResult.criticalSuccess\r\n      ? false\r\n      : dodgeResult.result\r\n    return {\r\n      ...sourceResult,\r\n      target,\r\n      dodgeSuccess,\r\n      blockedDamage: {\r\n        type: sourceResult.rawDamage.type,\r\n        damage: sourceResult.pierce ? 0 : damageResistances,\r\n      },\r\n      totalDamage: {\r\n        type: sourceResult.rawDamage.type,\r\n        damage: dodgeSuccess\r\n          ? 0\r\n          : noneg(\r\n              Math.round(sourceResult.rawDamage.damage - damageResistances),\r\n            ),\r\n      },\r\n    }\r\n  } else {\r\n    return {\r\n      ...sourceResult,\r\n      target,\r\n      dodgeSuccess: false,\r\n      blockedDamage: sourceResult.rawDamage,\r\n      totalDamage: sourceResult.rawDamage,\r\n    }\r\n  }\r\n}\r\n\r\nexport const getPerfectKeys = (skill: SkillT): string[] => {\r\n  let base: string[] = [\r\n    ...skill.perfectStatus,\r\n    ...skill.perfectTags.map((t) => t.type),\r\n  ]\r\n  if (skill.perfectSplash) base = [...base, 'splash damage']\r\n  if (skill.perfectPierce) base = [...base, 'ignore resistance']\r\n  return base\r\n}\r\n\r\nexport const getSkillDamage = (\r\n  skill: SkillT,\r\n  source: ProcessedCharacterT,\r\n  target?: ProcessedCharacterT,\r\n): DamageT => {\r\n  const rawDamage: DamageT = {\r\n    type: source.weapon.damage.type,\r\n    damage:\r\n      source.weapon.damage.damage *\r\n      (1 + skill.damageModifier + source.stats.damageModifier),\r\n  }\r\n  const damageResistances = target\r\n    ? getDamageResistance(target, rawDamage.type)\r\n    : 0\r\n  return {\r\n    type: rawDamage.type,\r\n    damage: Math.round(rawDamage.damage - damageResistances),\r\n  }\r\n}\r\n\r\nexport const getSkillDamageRange = (\r\n  skill: SkillT,\r\n  source: ProcessedCharacterT,\r\n  targets?: ProcessedCharacterT[],\r\n) => {\r\n  let min: number | undefined = undefined\r\n  let max: number | undefined = undefined\r\n  if (!targets) return `${getSkillDamage(skill, source).damage}`\r\n  targets.forEach((target) => {\r\n    const damage = getSkillDamage(skill, source, target).damage\r\n    if (max === undefined || damage > max) max = damage\r\n    if (min === undefined || damage < min) min = damage\r\n  })\r\n  if (min === max) return `${max || 0}`\r\n  return `${min}-${max}`\r\n}\r\n\r\nexport const getSkillResults = (\r\n  skill: SkillT,\r\n  source: ProcessedCharacterT,\r\n  targets: ProcessedCharacterT[],\r\n): TargetSkillResultT[] => {\r\n  const sourceResult = getSourceSkillResult(source, skill)\r\n  return targets.map((target) => getTargetSkillResult(target, sourceResult))\r\n}\r\n\r\nconst localUpdater = (\r\n  p: PartyT,\r\n  id: string,\r\n  updater: (c: CharacterT) => CharacterT,\r\n) => {\r\n  return updateCharacter(p, id, updater)\r\n}\r\n\r\ninterface CommitSkillResultsT {\r\n  party: PartyT\r\n  enemyParty: PartyT\r\n}\r\nexport const commitSkillResults = (party: PartyT, enemyParty: PartyT) => (\r\n  results: TargetSkillResultT[],\r\n): CommitSkillResultsT => {\r\n  results.forEach((result, index) => {\r\n    const { source, target } = result\r\n    let sourceParty = [party, enemyParty].find(\r\n      (p) => p.id === source.partyId,\r\n    ) as PartyT\r\n    let targetParty = [party, enemyParty].find(\r\n      (p) => p.id === target.partyId,\r\n    ) as PartyT\r\n    const localUpdate = (\r\n      p: PartyT,\r\n      id: string,\r\n      updater: (c: CharacterT) => CharacterT,\r\n    ) => {\r\n      if (p.id === sourceParty.id) {\r\n        sourceParty = localUpdater(p, id, updater)\r\n        return\r\n      }\r\n      if (p.id === targetParty.id) {\r\n        targetParty = localUpdater(p, id, updater)\r\n        return\r\n      }\r\n    }\r\n    localUpdate(targetParty, target.id, (c) => {\r\n      return addMultipleStatus(\r\n        {\r\n          ...c,\r\n          stats: {\r\n            ...c.stats,\r\n            healthOffset: c.stats.healthOffset + result.totalDamage.damage,\r\n          },\r\n          tags: [...c.tags, ...result.addedTags],\r\n        },\r\n        result.addedStatus,\r\n      )\r\n    })\r\n\r\n    if (result.splashDamage.damage > 0) {\r\n      targetParty.characters\r\n        .filter((c) => c.id !== result.target.id)\r\n        .forEach((character) => {\r\n          localUpdate(targetParty, character.id, (c) => {\r\n            const splashDamageResistance = getDamageResistance(\r\n              processCharacter(character),\r\n              result.splashDamage.type,\r\n            )\r\n            return {\r\n              ...c,\r\n              stats: {\r\n                ...c.stats,\r\n                healthOffset:\r\n                  c.stats.healthOffset +\r\n                  (result.splashDamage.damage - splashDamageResistance),\r\n              },\r\n            }\r\n          })\r\n        })\r\n    }\r\n    if (index === results.length - 1) {\r\n      if (source.stats.healthRegen > 0) {\r\n        localUpdate(sourceParty, source.id, (c) => {\r\n          return {\r\n            ...c,\r\n            stats: {\r\n              ...c.stats,\r\n              healthOffset: noneg(\r\n                c.stats.healthOffset - source.stats.healthRegen,\r\n              ),\r\n            },\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    if (sourceParty.id === PLAYER_PARTY_ID) {\r\n      party = sourceParty\r\n    } else {\r\n      enemyParty = sourceParty\r\n    }\r\n    if (targetParty.id === PLAYER_PARTY_ID) {\r\n      if (sourceParty.id !== PLAYER_PARTY_ID) {\r\n        party = targetParty\r\n      }\r\n    } else {\r\n      enemyParty = targetParty\r\n    }\r\n  })\r\n  return {\r\n    party: {\r\n      ...party,\r\n      characters: party.characters.map((c) => decrementStatusDurations(c)),\r\n    },\r\n    enemyParty: {\r\n      ...enemyParty,\r\n      characters: enemyParty.characters.map((c) => decrementStatusDurations(c)),\r\n    },\r\n  }\r\n}\r\n\r\nexport const getSkillTargetOptions = (\r\n  source: ProcessedCharacterT,\r\n  sourceParty: ProcessedPartyT,\r\n  targetParty: ProcessedPartyT,\r\n  skill: SkillT,\r\n): ProcessedCharacterT[] | ProcessedPartyT[] => {\r\n  switch (skill.targetType) {\r\n    case 'single':\r\n      return targetParty.characters.filter((c) => !c.dead)\r\n    case 'ally':\r\n      return sourceParty.characters.filter((c) => !c.dead)\r\n    case 'group':\r\n      return [targetParty]\r\n    case 'party':\r\n      return [sourceParty]\r\n    case 'self':\r\n      return [source]\r\n    default:\r\n      return []\r\n  }\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const SMASH: SkillT = {\r\n  ...makeEntity('Smash'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  rolls: [makeCheck('strength'), makeCheck('strength'), makeCheck('strength')],\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n  perfectTags: [],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const SHOCKWAVE: SkillT = {\r\n  ...makeEntity('Shockwave'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  rolls: [\r\n    makeCheck('strength', -10),\r\n    makeCheck('strength', -10),\r\n    makeCheck('strength', -10),\r\n    makeCheck('strength', -10),\r\n  ],\r\n  perfectSplash: true,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n  perfectTags: [],\r\n}\r\n","import { WeaponT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { SMASH } from '../skills/smash'\r\nimport { SHOCKWAVE } from '../skills/shockwave'\r\n\r\nexport const BLACKSMITHS_HAMMER: WeaponT = {\r\n  ...makeEntity(`Blacksmith's Hammer`),\r\n  type: 'hammer',\r\n  rarity: 'common',\r\n  hands: 1,\r\n  damage: { type: 'physical', damage: 10 },\r\n  traits: [],\r\n  skills: [SMASH, SHOCKWAVE],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const SHOT: SkillT = {\r\n  ...makeEntity('Shot'),\r\n  // TODO Damage Modifier for flying, etc...\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  rolls: [\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n  ],\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n  perfectTags: [],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const SNIPE_SHOT: SkillT = {\r\n  ...makeEntity('Snipe Shot'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  rolls: [\r\n    makeCheck('perception', -10),\r\n    makeCheck('perception', -10),\r\n    makeCheck('perception', -10),\r\n  ],\r\n  perfectSplash: false,\r\n  perfectPierce: true,\r\n  perfectStatus: [],\r\n  perfectTags: [],\r\n}\r\n","import { WeaponT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\nimport { SHOT } from '../skills/shot'\r\nimport { SNIPE_SHOT } from '../skills/snipe_shot'\r\n\r\nexport const HUNTING_BOW: WeaponT = {\r\n  ...makeEntity(`Blacksmith's Hammer`),\r\n  type: 'bow',\r\n  rarity: 'common',\r\n  hands: 2,\r\n  damage: { type: 'physical', damage: 6 },\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        evasion: 3,\r\n      },\r\n      damage: 0,\r\n    },\r\n  ],\r\n  skills: [SHOT, SNIPE_SHOT],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const SURGE: SkillT = {\r\n  ...makeEntity('Surge'),\r\n  damageModifier: -0.2,\r\n  targetType: 'single',\r\n  damage: true,\r\n  rolls: [\r\n    makeCheck('intelligence'),\r\n    makeCheck('intelligence'),\r\n    makeCheck('intelligence'),\r\n  ],\r\n  perfectSplash: false,\r\n  perfectPierce: true,\r\n  perfectStatus: [],\r\n  perfectTags: [],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const AREA_BLAST: SkillT = {\r\n  ...makeEntity('Area Blast'),\r\n  damageModifier: -0.5,\r\n  targetType: 'group',\r\n  damage: true,\r\n  rolls: [\r\n    makeCheck('intelligence', -5),\r\n    makeCheck('intelligence', -5),\r\n    makeCheck('intelligence', -5),\r\n  ],\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n  perfectTags: [],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const DAZZLE: SkillT = {\r\n  ...makeEntity('Dazzle'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: false,\r\n  rolls: [\r\n    makeCheck('intelligence'),\r\n    makeCheck('intelligence'),\r\n    makeCheck('intelligence'),\r\n  ],\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n  perfectTags: [{ type: 'dazed', duration: 4 }],\r\n}\r\n","import { CharacterClassT, WeaponT } from '../types'\r\nimport { BLACKSMITHS_HAMMER } from './weapons/blacksmiths_hammer'\r\nimport { HUNTING_BOW } from './weapons/hunting_bow'\r\nimport { SCHOLARS_BOOK } from './weapons/scholars_book'\r\n\r\nexport const CLASS_STARTING_WEAPONS: Partial<Record<\r\n  CharacterClassT,\r\n  WeaponT\r\n>> = {\r\n  blacksmith: BLACKSMITHS_HAMMER,\r\n  hunter: HUNTING_BOW,\r\n  scholar: SCHOLARS_BOOK,\r\n  bard: BLACKSMITHS_HAMMER,\r\n}\r\n","import { WeaponT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { SURGE } from '../skills/surge'\r\nimport { AREA_BLAST } from '../skills/area_blast'\r\nimport { DAZZLE } from '../skills/Dazzle'\r\n\r\nexport const SCHOLARS_BOOK: WeaponT = {\r\n  ...makeEntity(`Scholar's Book`),\r\n  type: 'tome',\r\n  rarity: 'common',\r\n  hands: 2,\r\n  damage: { type: 'magic', damage: 6 },\r\n  traits: [],\r\n  skills: [SURGE, AREA_BLAST, DAZZLE],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const TAUNT: SkillT = {\r\n  ...makeEntity('Taunt'),\r\n  damageModifier: -1,\r\n  targetType: 'self',\r\n  damage: false,\r\n  rolls: [makeCheck('vigor'), makeCheck('vigor')],\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n  perfectTags: [\r\n    {\r\n      type: 'targeted',\r\n      duration: 5,\r\n    },\r\n  ],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\nimport { TAUNT } from '../skills/taunt'\r\n\r\nexport const SIMPLE_IRON_SHIELD: ArmorT = {\r\n  ...makeEntity('Simple Iron Shield'),\r\n  rarity: 'common',\r\n  type: 'shield',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        armor: 1,\r\n      },\r\n      damage: 0,\r\n    },\r\n  ],\r\n  skills: [TAUNT],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const EXPLORERS_CLOAK: ArmorT = {\r\n  ...makeEntity(`Explorer's Cloak`),\r\n  rarity: 'uncommon',\r\n  type: 'magic-armor',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        armor: 3,\r\n        resistance: 6,\r\n        evasion: 6,\r\n        perception: 3,\r\n        talent: -3,\r\n      },\r\n      damage: 0,\r\n    },\r\n  ],\r\n  skills: [],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const EXPLORERS_HAT: ArmorT = {\r\n  ...makeEntity(`Explorer's Hat`),\r\n  rarity: 'common',\r\n  type: 'hat',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        resistance: 3,\r\n        evasion: 3,\r\n        perception: 2,\r\n      },\r\n      damage: 0,\r\n    },\r\n  ],\r\n  skills: [],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const FUR_ARMOR: ArmorT = {\r\n  ...makeEntity(`Fur Armor`),\r\n  rarity: 'uncommon',\r\n  type: 'cloth-armor',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        armor: 5,\r\n        resistance: 5,\r\n        health: 5,\r\n        healthRegen: 2,\r\n        vigor: 4,\r\n      },\r\n      damage: 0,\r\n    },\r\n  ],\r\n  skills: [],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const ADVENTURE_BOOTS: ArmorT = {\r\n  ...makeEntity(`Adventure Boots`),\r\n  rarity: 'common',\r\n  type: 'footwear',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        armor: 3,\r\n        evasion: 4,\r\n        agility: 3,\r\n      },\r\n      damage: 0,\r\n    },\r\n  ],\r\n  skills: [],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const ADVENTURE_CLOAK: ArmorT = {\r\n  ...makeEntity(`Adventure Cloak`),\r\n  rarity: 'uncommon',\r\n  type: 'magic-armor',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        armor: 5,\r\n        resistance: 5,\r\n        perception: 4,\r\n        talent: -3,\r\n      },\r\n      damage: 0,\r\n    },\r\n  ],\r\n  skills: [],\r\n}\r\n","import { CharacterClassT, ArmorT } from '../types'\r\nimport { SIMPLE_IRON_SHIELD } from './armor/simple_iron_shield'\r\nimport { EXPLORERS_CLOAK } from './armor/explorers_cloak'\r\nimport { EXPLORERS_HAT } from './armor/explorers_hat'\r\nimport { FUR_ARMOR } from './armor/fur_armor'\r\nimport { ADVENTURE_BOOTS } from './armor/adventure_boots'\r\nimport { ADVENTURE_CLOAK } from './armor/adventure_cloak'\r\nimport { FUR_BOOTS } from './armor/fur_boots'\r\n\r\nexport const CLASS_STARTING_ARMOR: Record<CharacterClassT, ArmorT[]> = {\r\n  blacksmith: [SIMPLE_IRON_SHIELD, FUR_ARMOR, FUR_BOOTS],\r\n  hunter: [ADVENTURE_CLOAK, ADVENTURE_BOOTS],\r\n  scholar: [EXPLORERS_CLOAK, EXPLORERS_HAT],\r\n  bard: [],\r\n  enemy: [],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const FUR_BOOTS: ArmorT = {\r\n  ...makeEntity(`Fur Boots`),\r\n  rarity: 'common',\r\n  type: 'footwear',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        armor: 2,\r\n        resistance: 2,\r\n        healthRegen: 1,\r\n        vigor: 4,\r\n      },\r\n      damage: 0,\r\n    },\r\n  ],\r\n  skills: [],\r\n}\r\n","import { SkillT } from '../../../types'\r\nimport { makeEntity } from '../../../functions/Entity'\r\nimport { makeCheck } from '../../../functions/Roll'\r\n\r\nexport const BITE: SkillT = {\r\n  ...makeEntity('Bite'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  rolls: [\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n  ],\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n  perfectTags: [],\r\n}\r\n","import { CharacterT } from '../../types'\r\nimport { TIMBERWOLF } from './timberwolf'\r\n\r\nexport const ALL_ENEMIES: (() => CharacterT)[] = [TIMBERWOLF]\r\n","import { CharacterT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { BITE } from '../skills/enemy/bite'\r\n\r\nexport const TIMBERWOLF = (): CharacterT => {\r\n  return {\r\n    ...makeEntity('Timberwolf'),\r\n    isCharacter: true,\r\n    partyId: '',\r\n    level: 1,\r\n    class: 'enemy',\r\n    stats: {\r\n      vigor: -80,\r\n      strength: 52,\r\n      intelligence: 40,\r\n      perception: 52,\r\n      talent: 30,\r\n      agility: 60,\r\n      luck: 50,\r\n      armor: 0,\r\n      resistance: 0,\r\n      evasion: 10,\r\n      healthOffset: 0,\r\n      health: -1,\r\n      healthRegen: 0,\r\n      criticalChance: 5,\r\n      damageModifier: 0,\r\n    },\r\n    traits: [],\r\n    tags: [],\r\n    armor: [],\r\n    status: [],\r\n    weapon: {\r\n      ...makeEntity('Wolf Fangs'),\r\n      rarity: 'common',\r\n      type: 'wolf-fangs',\r\n      hands: 2,\r\n      damage: {\r\n        damage: 6,\r\n        type: 'physical',\r\n      },\r\n      traits: [],\r\n      skills: [BITE],\r\n    },\r\n  }\r\n}\r\n","import {\r\n  CharacterT,\r\n  ProcessedCharacterT,\r\n  StatsT,\r\n  TraitT,\r\n  DamageTypeT,\r\n  StatusTypeT,\r\n  CheckT,\r\n  CharacterClassT,\r\n  EntityT,\r\n  WeaponT,\r\n  CharacterTagTypeT,\r\n} from '../types'\r\nimport { STATUS_EFFECTS, CLASS_STARTING_STATS } from '../objects'\r\nimport {\r\n  combineTraits,\r\n  getTraitsFromObjects,\r\n  getCommittedTraitsFromObjects,\r\n} from './Traits'\r\nimport { processWeapon } from './Weapon'\r\nimport { getSkillsFromObjects } from './Skill'\r\nimport { makeEntity } from './Entity'\r\nimport { combineStats } from './Stats'\r\nimport { CLASS_STARTING_WEAPONS } from '../objects/Weapon'\r\nimport { CLASS_STARTING_ARMOR } from '../objects/Armor'\r\nimport { ALL_ENEMIES } from '../objects/enemies'\r\nimport { getRandom } from '../util'\r\n\r\nexport const checkForProcessedCharacter = (character: CharacterT) => {\r\n  if ((character as ProcessedCharacterT).processed) {\r\n    throw new Error('No Processed Characters Allowed')\r\n  }\r\n}\r\n\r\nexport const isCharacter = (e: EntityT) => e && (e as CharacterT).isCharacter\r\n\r\nexport const getStatusEffects = (character: CharacterT) => {\r\n  return character.status.map((status) => STATUS_EFFECTS[status.type])\r\n}\r\n\r\nexport const getTraits = (character: CharacterT): TraitT[] => {\r\n  checkForProcessedCharacter(character)\r\n  const ret = [\r\n    ...character.traits,\r\n    ...character.weapon.traits,\r\n    ...getTraitsFromObjects(character.armor),\r\n    ...getTraitsFromObjects(getStatusEffects(character)),\r\n  ]\r\n  return ret\r\n}\r\n\r\nexport const getSkills = (character: CharacterT) => {\r\n  checkForProcessedCharacter(character)\r\n  return [...character.weapon.skills, ...getSkillsFromObjects(character.armor)]\r\n}\r\n\r\nexport const processCharacter = (\r\n  character: CharacterT,\r\n): ProcessedCharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  const traits = getTraits(character)\r\n  const combinedTrait = combineTraits(...traits)\r\n  const stats: StatsT = combineStats(character.stats, combinedTrait.stats)\r\n  const weapon = processWeapon(character.weapon)\r\n  const statusEffects = getStatusEffects(character)\r\n  const skills = getSkills(character)\r\n  const hVigor =\r\n    CLASS_STARTING_STATS[character.class].vigor || character.stats.vigor\r\n  const startingHealth = 25 + Math.floor(0.1 * hVigor)\r\n  const health =\r\n    Math.floor(\r\n      startingHealth + character.level + 0.1 * character.level * stats.vigor,\r\n    ) + stats.health\r\n\r\n  return {\r\n    ...character,\r\n    health,\r\n    stats,\r\n    rawStats: character.stats,\r\n    weapon,\r\n    statusEffects,\r\n    skills,\r\n    dead: stats.healthOffset >= health,\r\n    processed: true,\r\n  }\r\n}\r\n\r\nexport const makeCharacter = (\r\n  characterClass: CharacterClassT,\r\n  partyId: string = '',\r\n): CharacterT => {\r\n  return {\r\n    ...makeEntity(),\r\n    isCharacter: true,\r\n    partyId,\r\n    level: 1,\r\n    class: characterClass,\r\n    stats: CLASS_STARTING_STATS[characterClass],\r\n    traits: [],\r\n    tags: [],\r\n    weapon: CLASS_STARTING_WEAPONS[characterClass] as WeaponT,\r\n    armor: CLASS_STARTING_ARMOR[characterClass],\r\n    status: [],\r\n  }\r\n}\r\n\r\nexport const makeEnemy = () => {\r\n  const staicEnemy = getRandom(ALL_ENEMIES)\r\n  if (staicEnemy) return staicEnemy()\r\n  return makeCharacter(getRandom(['blacksmith', 'hunter', 'scholar']))\r\n}\r\n\r\nexport const commitTrait = (\r\n  character: CharacterT,\r\n  trait: TraitT,\r\n): CharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  return {\r\n    ...character,\r\n    stats: combineStats(character.stats, trait.stats),\r\n  }\r\n}\r\nexport const commitStatusEffects = (character: CharacterT): CharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  const statusEffects = getStatusEffects(character)\r\n  const traits = getCommittedTraitsFromObjects(statusEffects)\r\n  return traits.reduce(\r\n    (char, trait) => {\r\n      return commitTrait(char, trait)\r\n    },\r\n    { ...character },\r\n  )\r\n}\r\nexport const decrementStatusDurations = (character: CharacterT): CharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  return {\r\n    ...character,\r\n    tags: character.tags\r\n      .map((tag) => ({ ...tag, duration: tag.duration - 1 }))\r\n      .filter((tag) => tag.duration !== 0),\r\n    status: character.status\r\n      .map((status) => ({ ...status, duration: status.duration - 1 }))\r\n      .filter((status) => status.duration !== 0),\r\n  }\r\n}\r\nexport const addStatus = (character: CharacterT, statusType: StatusTypeT) => {\r\n  const statusEffect = STATUS_EFFECTS[statusType]\r\n  const existingStatus = character.status.find((s) => s.type === statusType)\r\n  if (existingStatus && !statusEffect.canStack) {\r\n    return character\r\n  }\r\n  return {\r\n    ...character,\r\n    status: [\r\n      ...character.status,\r\n      { type: statusType, duration: statusEffect.duration },\r\n    ],\r\n  }\r\n}\r\nexport const addMultipleStatus = (\r\n  character: CharacterT,\r\n  statusTypes: StatusTypeT[],\r\n) => {\r\n  return statusTypes.reduce(\r\n    (char, statusType) => {\r\n      return addStatus(char, statusType)\r\n    },\r\n    { ...character },\r\n  )\r\n}\r\n\r\nexport const getCharacterStat = (character: CharacterT, statValue: CheckT) => {\r\n  const resolvedStatValue = statValue.key ? character.stats[statValue.key] : 0\r\n  return resolvedStatValue + (statValue.offset || 0)\r\n}\r\n\r\nexport const getDamageResistance = (\r\n  character: ProcessedCharacterT,\r\n  damageType: DamageTypeT,\r\n) => {\r\n  if (damageType === 'physical') return character.stats.armor\r\n  if (damageType === 'magic') return character.stats.resistance\r\n  return 0\r\n}\r\n\r\nexport const hasTag = (character: CharacterT, tagType: CharacterTagTypeT) =>\r\n  character.tags.map((t) => t.type).includes(tagType)\r\n","import { WeaponT, ProcessedWeaponT } from '../types'\r\n\r\nexport const processWeapon = (weapon: WeaponT): ProcessedWeaponT => {\r\n  const damage = weapon.traits.reduce((p, c) => {\r\n    return {\r\n      ...p,\r\n      damage: p.damage + c.damage,\r\n    }\r\n  }, weapon.damage)\r\n  return {\r\n    ...weapon,\r\n    damage,\r\n    processed: true,\r\n  }\r\n}\r\n","import { v4 } from 'uuid'\r\nimport { useSelector } from 'react-redux'\r\nimport { StateCoreT, StateActionT, StateT } from '../types'\r\nimport { PartyT, CharacterT } from '../../types'\r\nimport { Dispatch } from 'redux'\r\nimport { makeReducer } from '../util'\r\nimport { useActions } from '../../hooks/useActions'\r\nimport {\r\n  updateCharacter,\r\n  makeCharacter,\r\n  checkForProcessedParty,\r\n} from '../../functions'\r\nimport { PLAYER_PARTY_ID } from '../../objects/Party'\r\n\r\nexport const UPDATE_PARTY = '@actions/parties/set-party'\r\nexport const UPSERT_CHARACTER = '@actions/parties/upsert-character'\r\nexport const DELETE_CHARACTER = '@actions/parties/delete-character'\r\nexport const UPSERT_ITEM = '@actions/parties/upsert-item'\r\nexport const DELETE_ITEM = '@actions/parties/delete-item'\r\nexport const UPSERT_MOD = '@actions/parties/upsert-mod'\r\nexport const DELETE_MOD = '@actions/parties/delete-mod'\r\n\r\nexport const actionCreators = {\r\n  updateParty: (party: PartyT): StateActionT => {\r\n    return {\r\n      type: UPDATE_PARTY,\r\n      payload: {\r\n        party,\r\n      },\r\n    }\r\n  },\r\n  upsertCharacter: (character: CharacterT): StateActionT => {\r\n    return {\r\n      type: UPSERT_CHARACTER,\r\n      payload: {\r\n        character,\r\n      },\r\n    }\r\n  },\r\n  deleteCharacter: (characterId: string): StateActionT => {\r\n    return {\r\n      type: DELETE_CHARACTER,\r\n      payload: {\r\n        characterId,\r\n      },\r\n    }\r\n  },\r\n}\r\n\r\nexport const actions = {\r\n  updateParty: (party: PartyT) => (dispatch: Dispatch) => {\r\n    checkForProcessedParty(party)\r\n    dispatch(actionCreators.updateParty(party))\r\n  },\r\n  upsertCharacter: (character: CharacterT) => (dispatch: Dispatch) => {\r\n    dispatch(actionCreators.upsertCharacter(character))\r\n  },\r\n  deleteCharacter: (characterId: string) => (dispatch: Dispatch) => {\r\n    dispatch(actionCreators.deleteCharacter(characterId))\r\n  },\r\n}\r\n\r\nexport const core: StateCoreT<PartyT> = {\r\n  [UPDATE_PARTY]: (state, action) => {\r\n    return {\r\n      ...action.payload.party,\r\n    }\r\n  },\r\n  [UPSERT_CHARACTER]: (state, action) => {\r\n    return updateCharacter(\r\n      state,\r\n      action.payload.character.id,\r\n      (c) => action.payload.character,\r\n    )\r\n  },\r\n  [DELETE_CHARACTER]: (state, action) => {\r\n    return {\r\n      ...state,\r\n      characters: state.characters.filter(\r\n        (c) => c.id !== action.payload.characterId,\r\n      ),\r\n    }\r\n  },\r\n}\r\nconst jack = { ...makeCharacter('blacksmith'), name: 'Jack' }\r\nexport const INITIAL_STATE: PartyT = {\r\n  isParty: true,\r\n  id: PLAYER_PARTY_ID,\r\n  name: 'PlayerParty',\r\n  characters: [\r\n    { ...jack },\r\n    { ...makeCharacter('hunter'), name: 'Jim' },\r\n    { ...makeCharacter('scholar'), name: 'Johnny' },\r\n  ],\r\n}\r\nexport default makeReducer(core, INITIAL_STATE)\r\nexport const useParty = () => useSelector((state: StateT) => state.party)\r\nexport const usePartyActions = () =>\r\n  useActions(actions) as {\r\n    updateParty: (party: PartyT) => void\r\n    upsertCharacter: (character: CharacterT) => void\r\n    deleteCharacter: (characterId: string) => void\r\n  }\r\n","import { StateCoreT, StateReducerT } from './types'\r\n\r\nexport const makeReducer = (\r\n  core: StateCoreT,\r\n  initialState: any,\r\n): StateReducerT => {\r\n  return (state = initialState, action) => {\r\n    const coreFn = core[action.type]\r\n    if (coreFn) return coreFn(state, action)\r\n    return state\r\n  }\r\n}\r\n","import { useMemo } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\n\r\nexport const useActions = (actions: any) => {\r\n  const dispatch = useDispatch()\r\n  return useMemo(() => bindActionCreators(actions, dispatch), [\r\n    dispatch,\r\n    actions,\r\n  ])\r\n}\r\n","import React, { useMemo, useContext } from 'react'\r\nimport {\r\n  PartyT,\r\n  ProcessedPartyT,\r\n  CharacterT,\r\n  ProcessedCharacterT,\r\n} from '../../types'\r\nimport { usePartyActions, useParty } from '../../state/party'\r\nimport { findCharacterInParty, processParty, makeParty } from '../../functions'\r\n\r\nexport interface PartyContextT {\r\n  party: ProcessedPartyT\r\n  rawParty: PartyT\r\n  updateParty: (party: PartyT) => void\r\n  upsertCharacter: (character: CharacterT) => void\r\n  deleteCharacter: (characterId: string) => void\r\n  findCharacter: (characterId: string) => ProcessedCharacterT | undefined\r\n  findRawCharacter: (characterId: string) => CharacterT | undefined\r\n}\r\nconst defaultContextValue: PartyContextT = {\r\n  rawParty: makeParty(),\r\n  party: processParty(makeParty()),\r\n  updateParty: (party) => {},\r\n  upsertCharacter: (character) => {},\r\n  deleteCharacter: (characterId) => {},\r\n  findCharacter: (characterId) => undefined,\r\n  findRawCharacter: (characterId) => undefined,\r\n}\r\nexport const PartyContext = React.createContext<PartyContextT>(\r\n  defaultContextValue,\r\n)\r\n\r\nexport interface PartyContextProviderPropsT {\r\n  children: React.ReactNode | React.ReactNode[]\r\n}\r\nexport const PartyContextProvider = (props: PartyContextProviderPropsT) => {\r\n  const { children } = props\r\n  const actions = usePartyActions()\r\n  const rawParty = useParty()\r\n  const party = useMemo(() => processParty(rawParty), [rawParty])\r\n\r\n  const updateParty = (party: PartyT) => {\r\n    actions.updateParty(party)\r\n  }\r\n  const upsertCharacter = (character: CharacterT) => {\r\n    if (!character) return\r\n    if ((character as ProcessedCharacterT).processed) {\r\n      throw new Error('No processed Characters Allowed')\r\n    }\r\n    actions.upsertCharacter(character)\r\n  }\r\n  const deleteCharacter = (characterId: string) => {\r\n    actions.deleteCharacter(characterId)\r\n  }\r\n  const findCharacter = (characterId: string) => {\r\n    return findCharacterInParty<ProcessedPartyT, ProcessedCharacterT>(\r\n      party,\r\n      characterId,\r\n    )\r\n  }\r\n  const findRawCharacter = (characterId: string) => {\r\n    return findCharacterInParty(rawParty, characterId)\r\n  }\r\n\r\n  return (\r\n    <PartyContext.Provider\r\n      value={{\r\n        party,\r\n        rawParty,\r\n        updateParty,\r\n        upsertCharacter,\r\n        deleteCharacter,\r\n        findCharacter,\r\n        findRawCharacter,\r\n      }}\r\n    >\r\n      {children}\r\n    </PartyContext.Provider>\r\n  )\r\n}\r\n\r\nexport const usePartyContext = () => useContext(PartyContext)\r\n","import { ProcessedCharacterT } from './Character'\r\nimport { hasTag } from '../functions'\r\n\r\nexport interface CombatQueueT {\r\n  [characterId: string]: number\r\n}\r\n\r\nexport const makeCombatQueue = (\r\n  characters: ProcessedCharacterT[],\r\n): CombatQueueT => {\r\n  const sortedCharacters = characters.sort(\r\n    (a, b) => b.stats.agility - a.stats.agility,\r\n  )\r\n  return sortedCharacters.reduce(\r\n    (r, c, i) => ({\r\n      ...r,\r\n      [c.id]: 100 - c.stats.agility,\r\n    }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const getMax = (queue: CombatQueueT): number => {\r\n  return Object.keys(queue).reduce((r: number, id: string) => {\r\n    if (r < queue[id]) return queue[id]\r\n    return r\r\n  }, Number.NEGATIVE_INFINITY)\r\n}\r\n\r\nexport const getMin = (queue: CombatQueueT): number => {\r\n  return Object.keys(queue).reduce((r: number, id: string) => {\r\n    if (queue[id] < r) return queue[id]\r\n    return r\r\n  }, Number.POSITIVE_INFINITY)\r\n}\r\n\r\nexport const consolidateQueue = (\r\n  queue: CombatQueueT,\r\n  characters: ProcessedCharacterT[] = [],\r\n): CombatQueueT => {\r\n  let min = getMin(queue)\r\n  return Object.keys(queue).reduce((r, id) => {\r\n    const character = characters.find((c) => c.id === id)\r\n    const offset = character && hasTag(character, 'dazed') ? 0 : min\r\n    return {\r\n      ...r,\r\n      [id]: queue[id] - offset,\r\n    }\r\n  }, {})\r\n}\r\n\r\nexport const shiftQueue = (\r\n  queue: CombatQueueT,\r\n  character: ProcessedCharacterT,\r\n  characters: ProcessedCharacterT[],\r\n): CombatQueueT => {\r\n  const ret = consolidateQueue(\r\n    {\r\n      ...queue,\r\n      [character.id]: 200 - character.stats.agility,\r\n    },\r\n    characters,\r\n  )\r\n  return ret\r\n}\r\n\r\nexport const getFirst = (queue: CombatQueueT): string => {\r\n  let min = Number.POSITIVE_INFINITY\r\n  let key = Object.keys(queue)[0]\r\n  Object.keys(queue).forEach((id) => {\r\n    if (min > queue[id]) {\r\n      min = queue[id]\r\n      key = id\r\n    }\r\n  })\r\n  return key\r\n}\r\n\r\nexport const removeFromQueue = (\r\n  queue: CombatQueueT,\r\n  id: string,\r\n): CombatQueueT => {\r\n  return consolidateQueue(\r\n    Object.keys(queue)\r\n      .filter((key) => key !== id)\r\n      .reduce(\r\n        (r, id) => ({\r\n          ...r,\r\n          [id]: queue[id],\r\n        }),\r\n        {},\r\n      ),\r\n  )\r\n}\r\n\r\nexport const validateQueue = (\r\n  queue: CombatQueueT,\r\n  characters: ProcessedCharacterT[],\r\n): CombatQueueT => {\r\n  return consolidateQueue(\r\n    characters.reduce((r, c) => {\r\n      return c.dead ? r : { ...r, [c.id]: queue[c.id] }\r\n    }, {}),\r\n  )\r\n}\r\n\r\nexport const getSortedIds = (queue: CombatQueueT): string[] => {\r\n  return Object.keys(queue).sort((a, b) => queue[a] - queue[b])\r\n}\r\n","import React, {\r\n  createContext,\r\n  useContext,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useCallback,\r\n} from 'react'\r\nimport {\r\n  ProcessedPartyT,\r\n  PartyT,\r\n  SkillT,\r\n  ProcessedCharacterT,\r\n  TargetSkillResultT,\r\n  SkillTargetT,\r\n} from '../../types'\r\nimport {\r\n  makeParty,\r\n  processParty,\r\n  getSkillResults,\r\n  commitSkillResults,\r\n  processCharacter,\r\n  makeCharacter,\r\n  resolveSkillTarget,\r\n  makeSkillTarget,\r\n} from '../../functions'\r\nimport { usePartyContext } from '../PartyContext'\r\nimport {\r\n  CombatQueueT,\r\n  makeCombatQueue,\r\n  getFirst,\r\n  shiftQueue,\r\n  validateQueue,\r\n} from '../../types/CombatQueue'\r\nimport { getAIAction } from '../../functions/AI'\r\nimport { v4 } from 'uuid'\r\n\r\nexport interface CombatContextT {\r\n  party: ProcessedPartyT\r\n  enemyParty: ProcessedPartyT\r\n  activeCharacter: ProcessedCharacterT\r\n  characters: ProcessedCharacterT[]\r\n  queue: CombatQueueT\r\n  selectedSkill: SkillT | undefined\r\n  selectedTargets: ProcessedCharacterT[]\r\n  roundResults: TargetSkillResultT[][]\r\n  activeRound: TargetSkillResultT[] | undefined\r\n  isRunning: boolean\r\n  isDone: boolean\r\n  isRenderingResult: boolean\r\n  onSkillSelect: (skill: SkillT) => void\r\n  onTargetsSelect: (target: ProcessedCharacterT | ProcessedPartyT) => void\r\n  start: () => void\r\n  next: (nextTarget?: ProcessedCharacterT | ProcessedPartyT) => void\r\n  commit: () => void\r\n}\r\nconst defaultValue: CombatContextT = {\r\n  party: processParty(makeParty()),\r\n  enemyParty: processParty(makeParty()),\r\n  activeCharacter: processCharacter(makeCharacter('blacksmith')),\r\n  characters: [],\r\n  queue: {},\r\n  selectedSkill: undefined,\r\n  selectedTargets: [],\r\n  roundResults: [],\r\n  activeRound: undefined,\r\n  isRunning: false,\r\n  isDone: false,\r\n  isRenderingResult: false,\r\n  onSkillSelect: (skill: SkillT) => {},\r\n  onTargetsSelect: (target: ProcessedCharacterT | ProcessedPartyT) => {},\r\n  start: () => {},\r\n  next: () => {},\r\n  commit: () => {},\r\n}\r\nexport const CombatContext = createContext<CombatContextT>(defaultValue)\r\nexport const useCombatContext = () => useContext(CombatContext)\r\n\r\nexport interface CombatContextProviderPropsT {\r\n  children: JSX.Element\r\n  enemyParty: PartyT\r\n  setEnemyParty: (party: PartyT) => void\r\n  onRequestNewParty: () => void\r\n}\r\nexport const CombatContextProvider = (props: CombatContextProviderPropsT) => {\r\n  const { children, setEnemyParty, onRequestNewParty } = props\r\n  const { party, rawParty, updateParty } = usePartyContext()\r\n  const resultCommitter = useMemo(\r\n    () => commitSkillResults(rawParty, props.enemyParty),\r\n    [rawParty, props.enemyParty],\r\n  )\r\n  const enemyParty = useMemo(() => processParty(props.enemyParty), [\r\n    props.enemyParty,\r\n  ])\r\n  const [isRunning, setIsRunning] = useState<boolean>(false)\r\n  const [isDone, setIsDone] = useState<boolean>(false)\r\n  const [isRenderingResult, setIsRenderingResult] = useState<boolean>(false)\r\n  const characters = useMemo(\r\n    () => [...party.characters, ...enemyParty.characters],\r\n    [party, enemyParty],\r\n  )\r\n  const [queue, setQueue] = useState<CombatQueueT>(\r\n    makeCombatQueue([...party.characters, ...enemyParty.characters]),\r\n  )\r\n  const [roundId, setRoundId] = useState<string>(v4())\r\n  const [roundResults, setRoundResults] = useState<TargetSkillResultT[][]>([])\r\n  const [activeRound, setActiveRound] = useState<\r\n    TargetSkillResultT[] | undefined\r\n  >()\r\n  const [selectedTarget, setSelectedTarget] = useState<\r\n    SkillTargetT | undefined\r\n  >()\r\n  const [selectedSkill, setSelectedSkill] = useState<SkillT | undefined>()\r\n  const activeCharacter = useMemo(\r\n    () =>\r\n      characters.find(\r\n        (c) => !c.dead && c.id === getFirst(queue),\r\n      ) as ProcessedCharacterT,\r\n    [queue, characters],\r\n  )\r\n\r\n  const start = useCallback(() => {\r\n    setIsDone(false)\r\n    setIsRunning(true)\r\n  }, [activeCharacter])\r\n\r\n  // temp code\r\n  useEffect(() => {\r\n    if (!isRunning) {\r\n      start()\r\n    } else {\r\n      setQueue(makeCombatQueue([...party.characters, ...enemyParty.characters]))\r\n    }\r\n  }, [isRunning])\r\n\r\n  const next = (nextTarget?: ProcessedCharacterT | ProcessedPartyT) => {\r\n    if (!selectedSkill) return\r\n    const roundTarget = nextTarget\r\n      ? makeSkillTarget(selectedSkill.targetType, nextTarget)\r\n      : selectedTarget\r\n    if (!selectedSkill || !roundTarget) return\r\n    const results = getSkillResults(\r\n      selectedSkill,\r\n      activeCharacter,\r\n      resolveSkillTarget(roundTarget).filter((c) => !c.dead),\r\n    )\r\n    setActiveRound(results)\r\n    setSelectedSkill(undefined)\r\n    setSelectedTarget(undefined)\r\n    setIsRenderingResult(true)\r\n  }\r\n\r\n  const onSkillSelect = (skill: SkillT) => {\r\n    setSelectedSkill(skill)\r\n    if (skill.targetType !== selectedSkill?.targetType) {\r\n      setSelectedTarget(undefined)\r\n    }\r\n  }\r\n\r\n  const onTargetsSelect = (target: ProcessedCharacterT | ProcessedPartyT) => {\r\n    if (!selectedSkill) return\r\n    setSelectedTarget(makeSkillTarget(selectedSkill.targetType, target))\r\n  }\r\n\r\n  const commit = useCallback(() => {\r\n    if (!activeRound) return\r\n    const parties = resultCommitter(activeRound)\r\n    setRoundResults((r) => [...r, activeRound])\r\n    setEnemyParty(parties.enemyParty)\r\n    updateParty(parties.party)\r\n    setActiveRound(undefined)\r\n    const updatedCharacters = [\r\n      ...parties.party.characters,\r\n      ...parties.enemyParty.characters,\r\n    ].map((c) => processCharacter(c))\r\n    setQueue(\r\n      validateQueue(\r\n        shiftQueue(queue, activeRound[0].source, updatedCharacters),\r\n        updatedCharacters,\r\n      ),\r\n    )\r\n    setRoundId(v4())\r\n    setIsRenderingResult(false)\r\n  }, [activeRound, queue])\r\n\r\n  const execEnemyTurn = (skill: SkillT, target: SkillTargetT) => {\r\n    const results = getSkillResults(\r\n      skill,\r\n      activeCharacter,\r\n      resolveSkillTarget(target),\r\n    )\r\n    setActiveRound(results)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (activeCharacter) {\r\n      if (activeCharacter.partyId === enemyParty.id) {\r\n        const { skill, target } = getAIAction(\r\n          activeCharacter,\r\n          party,\r\n          enemyParty,\r\n        )\r\n\r\n        execEnemyTurn(skill, makeSkillTarget(skill.targetType, target))\r\n      } else {\r\n        setSelectedSkill(activeCharacter.skills[0])\r\n      }\r\n    }\r\n  }, [roundId])\r\n\r\n  useEffect(() => {\r\n    if (isDone) return\r\n    if (enemyParty.characters.every((c) => c.dead)) {\r\n      alert('you win')\r\n      onRequestNewParty()\r\n      setRoundResults([])\r\n      setSelectedSkill(undefined)\r\n      setIsRunning(false)\r\n      return\r\n    }\r\n    if (party.characters.every((c) => c.dead)) {\r\n      alert('you lose')\r\n      setIsDone(true)\r\n      return\r\n    }\r\n  }, [party, enemyParty])\r\n\r\n  useEffect(() => {\r\n    if (activeCharacter && activeCharacter.skills[0]) {\r\n      setSelectedSkill(activeCharacter.skills[0])\r\n    }\r\n  }, [activeCharacter])\r\n\r\n  return (\r\n    <CombatContext.Provider\r\n      value={{\r\n        party,\r\n        enemyParty,\r\n        characters,\r\n        queue,\r\n        activeCharacter,\r\n        activeRound,\r\n        selectedSkill,\r\n        selectedTargets: selectedTarget\r\n          ? resolveSkillTarget(selectedTarget)\r\n          : [],\r\n        roundResults,\r\n        isDone,\r\n        isRunning,\r\n        isRenderingResult,\r\n        onSkillSelect,\r\n        onTargetsSelect,\r\n        start,\r\n        next,\r\n        commit,\r\n      }}\r\n    >\r\n      {children}\r\n    </CombatContext.Provider>\r\n  )\r\n}\r\n","import { ProcessedCharacterT, ProcessedPartyT, SkillT } from '../types'\r\nimport { getRandom } from '../util'\r\nimport { getSkillTargetOptions } from './Skill'\r\n\r\nexport interface AIActionT {\r\n  skill: SkillT\r\n  target: ProcessedCharacterT | ProcessedPartyT\r\n}\r\nexport const getAIAction = (\r\n  source: ProcessedCharacterT,\r\n  playerParty: ProcessedPartyT,\r\n  enemyParty: ProcessedPartyT,\r\n): AIActionT => {\r\n  const skill = getRandom(source.skills)\r\n  const targetedCharacters = playerParty.characters.filter((c) =>\r\n    c.tags.map((t) => t.type).includes('targeted'),\r\n  )\r\n  const target =\r\n    skill.targetType === 'single'\r\n      ? targetedCharacters.length > 0\r\n        ? getRandom(targetedCharacters)\r\n        : getRandom(playerParty.characters)\r\n      : getRandom<ProcessedPartyT | ProcessedCharacterT>(\r\n          getSkillTargetOptions(source, enemyParty, playerParty, skill),\r\n        )\r\n\r\n  return { skill, target }\r\n}\r\n","import { styled } from 'styletron-react'\r\n\r\nexport interface FlexContainerPropsT {\r\n  $direction?: 'row' | 'column' | 'column-reverse'\r\n  $full?: boolean\r\n}\r\nexport const FlexContainer = styled('div', (props: FlexContainerPropsT) => ({\r\n  display: 'flex',\r\n  flexDirection: props.$direction || 'row',\r\n  flex: props.$full ? 1 : 'default',\r\n}))\r\nexport const FullContainer = styled('div', () => ({\r\n  flex: 1,\r\n}))\r\n","import { styled } from 'styletron-react'\r\n\r\nexport const Monospace = styled('span', () => ({\r\n  fontFamily: 'Inconsolata, monospace',\r\n  fontWeight: 600,\r\n}))\r\nexport const Monodiv = styled('div', () => ({\r\n  fontFamily: 'Inconsolata, monospace',\r\n  fontWeight: 600,\r\n}))\r\n","import React from 'react'\r\nimport { CharacterT, PartyT, SkillT } from '../../types'\r\n\r\nexport const Span = (color: string, text: JSX.Element | string) => (\r\n  <span style={{ color, fontWeight: 'bold' }}>{text}</span>\r\n)\r\nexport const SkillSpan = (skill: SkillT) => Span('plum', skill.name)\r\n\r\nexport const NameSpanBuilder = (party: PartyT, enemyParty: PartyT) => (\r\n  character: CharacterT,\r\n) => {\r\n  const isUserParty = character.partyId === party.id\r\n  const isEnemyParty = character.partyId === enemyParty.id\r\n  const color = isUserParty\r\n    ? 'lightgreen'\r\n    : isEnemyParty\r\n    ? 'lightsalmon'\r\n    : 'white'\r\n\r\n  return Span(color, character.name)\r\n}\r\n","import React, { createContext, useContext, useState, useEffect } from 'react'\r\nimport { useCombatContext } from '../CombatContext'\r\nimport { Monospace } from '../../elements/monospace'\r\nimport { NameSpanBuilder, SkillSpan, Span } from './util'\r\nimport { getDamageResistance } from '../../functions'\r\n\r\nexport interface CombatLogContextT {\r\n  combatLog: JSX.Element[]\r\n}\r\nconst defualtValue: CombatLogContextT = {\r\n  combatLog: [],\r\n}\r\nexport const CombatLogContext = createContext<CombatLogContextT>(defualtValue)\r\nexport const useCombatLogContext = () => useContext(CombatLogContext)\r\n\r\ntype DeadLogT = Record<string, boolean | undefined>\r\n\r\nexport interface CombatLogContextProviderPropsT {\r\n  children: JSX.Element\r\n}\r\nexport const CombatLogContextProvider = (\r\n  props: CombatLogContextProviderPropsT,\r\n) => {\r\n  const { children } = props\r\n  const { activeRound, roundResults, enemyParty, party } = useCombatContext()\r\n  const [combatLog, setCombatLog] = useState<JSX.Element[]>([])\r\n  const [deadLog, setDeadLog] = useState<DeadLogT>({})\r\n  const NameSpan = NameSpanBuilder(party, enemyParty)\r\n  const log = (line: JSX.Element) =>\r\n    setCombatLog((log) => [\r\n      ...log,\r\n      <Monospace style={{ display: 'inline-block', fontWeight: 'normal' }}>\r\n        {line}\r\n      </Monospace>,\r\n    ])\r\n\r\n  useEffect(() => {\r\n    const characters = [...enemyParty.characters, ...party.characters]\r\n    setTimeout(() => {\r\n      characters.forEach((character) => {\r\n        if (character.dead && !deadLog[character.id]) {\r\n          setDeadLog((dLog) => ({ ...dLog, [character.id]: true }))\r\n          log(<span>{Span('lightcoral', `${character.name} died.`)}</span>)\r\n        }\r\n      })\r\n    }, 5)\r\n  }, [enemyParty, party])\r\n\r\n  useEffect(() => {\r\n    if (activeRound && activeRound[0]) {\r\n      log(\r\n        <span>\r\n          {NameSpan(activeRound[0].source)} uses{' '}\r\n          {SkillSpan(activeRound[0].skill)}.\r\n        </span>,\r\n      )\r\n    }\r\n  }, [activeRound])\r\n\r\n  useEffect(() => {\r\n    if (roundResults.length === 0) return\r\n    const latestRounds = roundResults[roundResults.length - 1]\r\n    const baseRound = latestRounds[0]\r\n    if (!baseRound) return\r\n\r\n    if (!baseRound.accuracySuccess) {\r\n      if (baseRound.skill.damage) {\r\n        {\r\n          log(<span>{baseRound.source.name}'s attack missed.</span>)\r\n        }\r\n      } else {\r\n        log(<span>{SkillSpan(baseRound.skill)} failed.</span>)\r\n      }\r\n    }\r\n    if (baseRound.criticalSuccess) {\r\n      log(<span>{Span('gold', 'Critical Hit!')}</span>)\r\n    }\r\n    if (baseRound.perfect) {\r\n      log(<span>{Span('gold', 'Perfect!')}</span>)\r\n    }\r\n    latestRounds.forEach((round) => {\r\n      const targetParty = party.id === round.source.partyId ? enemyParty : party\r\n      if (round.accuracySuccess) {\r\n        if (round.dodgeSuccess) {\r\n          log(<span>{NameSpan(round.target)} dodged the attack.</span>)\r\n        } else if (round.totalDamage.damage > 0) {\r\n          log(\r\n            <span>\r\n              {SkillSpan(round.skill)} deals{' '}\r\n              {Span('white', `${round.totalDamage.damage} damage`)} to{' '}\r\n              {NameSpan(round.target)}.\r\n            </span>,\r\n          )\r\n        } else if (round.skill.damage) {\r\n          log(\r\n            <span>\r\n              {SkillSpan(round.skill)} did no damage to {NameSpan(round.target)}\r\n              .\r\n            </span>,\r\n          )\r\n        }\r\n        if (round.splashDamage.damage > 0) {\r\n          targetParty.characters\r\n            .filter((c) => c.id !== round.target.id && !c.dead)\r\n            .forEach((subTarget) => {\r\n              const splashDamageResistance = getDamageResistance(\r\n                subTarget,\r\n                round.splashDamage.type,\r\n              )\r\n              log(\r\n                <span>\r\n                  {SkillSpan(round.skill)} deals{' '}\r\n                  {Span(\r\n                    'white',\r\n                    `${\r\n                      round.splashDamage.damage - splashDamageResistance\r\n                    } splash damage`,\r\n                  )}{' '}\r\n                  to {NameSpan(subTarget)}.\r\n                </span>,\r\n              )\r\n            })\r\n        }\r\n\r\n        round.addedTags.forEach((tag) => {\r\n          log(\r\n            <span>\r\n              {NameSpan(round.target)} became {tag.type} ({tag.duration} turns).\r\n            </span>,\r\n          )\r\n        })\r\n      }\r\n    })\r\n  }, [roundResults.length])\r\n\r\n  return (\r\n    <CombatLogContext.Provider value={{ combatLog }}>\r\n      {children}\r\n    </CombatLogContext.Provider>\r\n  )\r\n}\r\n","import React, { useState, useLayoutEffect } from 'react'\r\nimport { v4 } from 'uuid'\r\n\r\nexport interface HoverChildrenT {\r\n  isHovering: boolean\r\n}\r\nexport interface HoverPropsT {\r\n  delay?: number\r\n  children: (props: HoverChildrenT) => JSX.Element\r\n}\r\nexport const Hover = (props: HoverPropsT) => {\r\n  const { delay = 500, children } = props\r\n  const [internalHovering, setInternalHovering] = useState<boolean>(false)\r\n  const [isHovering, setIsHovering] = useState<boolean>(false)\r\n  const [guid, setGuid] = useState<string>(v4())\r\n  useLayoutEffect(() => {\r\n    const action = async () => {\r\n      if (internalHovering) {\r\n        setTimeout(() => {\r\n          setGuid(v4())\r\n        }, delay)\r\n      }\r\n    }\r\n    action()\r\n  }, [internalHovering])\r\n  useLayoutEffect(() => {\r\n    if (internalHovering) {\r\n      setIsHovering(true)\r\n    }\r\n  }, [guid])\r\n  const onMouseEnter = (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    setInternalHovering(true)\r\n  }\r\n  const onMouseLeave = (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    setInternalHovering(false)\r\n    setIsHovering(false)\r\n  }\r\n  return (\r\n    <div onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\r\n      {children({ isHovering })}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Hover } from '../components/Hover'\r\n\r\nexport interface BoxContainerPropsT extends React.HTMLProps<HTMLDivElement> {\r\n  substyle?: React.CSSProperties\r\n  tag?: any\r\n  to?: string\r\n}\r\nexport const BoxContainer = (props: BoxContainerPropsT) => {\r\n  const {\r\n    style = {},\r\n    substyle = {},\r\n    children,\r\n    tag: Element = 'div',\r\n    ...rest\r\n  } = props\r\n  return (\r\n    <div\r\n      style={{\r\n        border: '1px solid #000',\r\n        display: 'flex',\r\n        boxSizing: 'border-box',\r\n        ...style,\r\n      }}\r\n    >\r\n      <Element\r\n        style={{\r\n          border: substyle.border || '1px solid #555',\r\n          background: 'linear-gradient(0deg, #222222 0%, #2a2a2a 100%)',\r\n          padding: 10,\r\n          color: '#ccc',\r\n          flex: 1,\r\n          boxShadow: 'inset 0px 0px 2px black',\r\n          ...substyle,\r\n        }}\r\n        {...rest}\r\n      >\r\n        {children}\r\n      </Element>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const SmallBox = (props: BoxContainerPropsT) => (\r\n  <BoxContainer\r\n    {...props}\r\n    style={{\r\n      height: 40,\r\n      width: 40,\r\n      ...props.style,\r\n    }}\r\n    substyle={{\r\n      display: 'flex',\r\n      padding: 0,\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      background: '#111',\r\n      ...props.substyle,\r\n    }}\r\n  >\r\n    {props.children}\r\n  </BoxContainer>\r\n)\r\n\r\nexport const BoxButton = (props: BoxContainerPropsT) => {\r\n  return (\r\n    <Hover delay={0}>\r\n      {({ isHovering }) => (\r\n        <BoxContainer\r\n          {...props}\r\n          tag='button'\r\n          style={{\r\n            margin: 0,\r\n            ...(props.style || {}),\r\n          }}\r\n          substyle={{\r\n            borderColor: isHovering && !props.disabled ? '#999' : '#555',\r\n            padding: '4px',\r\n            cursor: props.disabled ? 'default' : 'pointer',\r\n            background: props.disabled ? '#444' : '#111',\r\n            boxShadow: props.disabled ? 'none' : undefined,\r\n            ...(props.substyle || {}),\r\n          }}\r\n        />\r\n      )}\r\n    </Hover>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport BaseTooltip, { TooltipProps } from 'react-tooltip-lite'\r\nimport { Hover } from '../Hover'\r\n\r\ninterface PropsT extends TooltipProps {\r\n  children: JSX.Element\r\n}\r\nexport const Tooltip = (props: PropsT) => {\r\n  const { ...rest } = props\r\n  return (\r\n    <BaseTooltip\r\n      direction='up'\r\n      tagName='div'\r\n      padding='0'\r\n      arrow={false}\r\n      {...rest}\r\n    />\r\n  )\r\n}\r\n\r\nexport const HoverToolTip = (props: PropsT) => {\r\n  return (\r\n    <Hover>\r\n      {({ isHovering }) => <Tooltip {...props} isOpen={isHovering} />}\r\n    </Hover>\r\n  )\r\n}\r\n","import React, { CSSProperties } from 'react'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\nimport { HoverToolTip } from '../Tooltip'\r\nimport { Monodiv } from '../../elements/monospace'\r\n\r\nexport interface GaugePropsT {\r\n  name?: string\r\n  color: string\r\n  height?: number\r\n  max: number\r\n  value: number\r\n  style?: CSSProperties\r\n  children?: React.ReactNode | React.ReactNode[]\r\n}\r\nexport const Gauge = (props: GaugePropsT) => {\r\n  const { name = '', value, max, color, height = 30, children } = props\r\n  const p = (value / max) * 100\r\n  const percentage = p > 100 ? 100 : p\r\n  return (\r\n    <HoverToolTip\r\n      direction='right'\r\n      content={<BoxContainer>{`${name} (${value} / ${max})`}</BoxContainer>}\r\n    >\r\n      <BoxContainer\r\n        style={{ borderLeft: 'none' }}\r\n        substyle={{\r\n          padding: 0,\r\n          background: '#555',\r\n          height: height - 2,\r\n          position: 'relative',\r\n          borderColor: '1px rgba(255,255,255,0.3)',\r\n        }}\r\n      >\r\n        <FlexContainer\r\n          style={{\r\n            position: 'absolute',\r\n            left: 0,\r\n            boxSizing: 'border-box',\r\n            height: height - 2,\r\n            maxWidth: `${percentage}%`,\r\n            minWidth: `${percentage}%`,\r\n            boxShadow: 'inset 0px 0px 1px rgba(0,0,0,0.5)',\r\n            textShadow: '1px 1px 1px black',\r\n            backgroundColor: color,\r\n            color: 'white',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            transition: 'all 0.5s',\r\n          }}\r\n        ></FlexContainer>\r\n        <FullContainer\r\n          style={{\r\n            position: 'absolute',\r\n            height,\r\n            lineHeight: `${height - 2}px`,\r\n            right: 4,\r\n            top: 0,\r\n            fontSize: 10,\r\n            fontWeight: 'bold',\r\n            overflow: 'hidden',\r\n            textShadow: '0px 0px 3px black',\r\n          }}\r\n        >\r\n          <Monodiv>{children}</Monodiv>\r\n        </FullContainer>\r\n      </BoxContainer>\r\n    </HoverToolTip>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { styled, withWrapper } from 'styletron-react'\r\n\r\nconst Div = styled('div', {\r\n  transform: 'rotateY(0deg) rotate(-45deg)',\r\n})\r\nexport const Badge = withWrapper(Div, (Element) => (props: any) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: props.$absolute === false ? 'relative' : 'absolute',\r\n        background: '#111',\r\n        padding: '4px',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        boxShadow: '1px 1px 0px black',\r\n        height: props.$size || '20px',\r\n        width: props.$size || '20px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        lineHeight: '20px',\r\n        fontWeight: 'bolder',\r\n        borderRadius: '30%',\r\n        transform: 'rotateY(0deg) rotate(45deg)',\r\n        color: props.$color || 'white',\r\n        top: props.$top,\r\n        bottom: props.$bottom,\r\n        right: props.$right,\r\n        left: props.$left,\r\n      }}\r\n    >\r\n      <Element {...props} />\r\n    </div>\r\n  )\r\n})\r\n","import React, { useState, useEffect } from 'react'\r\nexport interface IconPropsT {\r\n  src: string\r\n  size: number\r\n  fill?: string\r\n  style?: React.CSSProperties\r\n  shadow?: boolean\r\n  onClick?: () => void\r\n}\r\nexport const Icon = ({\r\n  src,\r\n  size,\r\n  style = {},\r\n  fill = 'white',\r\n  shadow,\r\n  onClick,\r\n}: IconPropsT) => {\r\n  const [loading, setLoading] = useState(true)\r\n  const [svg, setSvg] = useState('')\r\n\r\n  useEffect(() => {\r\n    if (src) {\r\n      fetch(src)\r\n        .then((res) => res.text())\r\n        .then((text) => setSvg(text))\r\n        .then(() => setLoading(false))\r\n    }\r\n  }, [src])\r\n\r\n  return !loading ? (\r\n    <div\r\n      className={`icon ${shadow ? 'shadow' : ''}`}\r\n      onClick={() => {\r\n        if (onClick) onClick()\r\n      }}\r\n      style={{ ...style, height: size, width: size, fill }}\r\n      dangerouslySetInnerHTML={{ __html: svg }}\r\n    />\r\n  ) : (\r\n    <div />\r\n  )\r\n}\r\n","import { StatsT, CharacterTagTypeT } from '../types'\r\n\r\nimport Vigor from './svg/delapouite/heart-beats.svg'\r\nimport Strength from './svg/delapouite/biceps.svg'\r\nimport Brain from './svg/lorc/brain.svg'\r\nimport Awareness from './svg/delapouite/eye-target.svg'\r\nimport Juggler from './svg/lorc/juggler.svg'\r\nimport Agility from './svg/lorc/sprint.svg'\r\nimport Clover from './svg/lorc/clover.svg'\r\nimport Accuracy from './svg/delapouite/convergence-target.svg'\r\n\r\nimport Dazed from './svg/lorc/star-swirl.svg'\r\nimport Targeted from './svg/sbed/targeted.svg'\r\n\r\nimport Shot from './svg/lorc/high-shot.svg'\r\nimport SnipeShot from './svg/delapouite/shield-impact.svg'\r\nimport Surge from './svg/lorc/fire-zone.svg'\r\nimport AreaBast from './svg/lorc/heavy-timer.svg'\r\nimport Dazzle from './svg/lorc/ubisoft-sun.svg'\r\nimport Smash from './svg/lorc/flat-hammer.svg'\r\nimport Shockwave from './svg/lorc/hammer-drop.svg'\r\nimport Taunt from './svg/lorc/bordered-shield.svg'\r\nimport { SHOT } from '../objects/skills/shot'\r\nimport { SNIPE_SHOT } from '../objects/skills/snipe_shot'\r\nimport { SURGE } from '../objects/skills/surge'\r\nimport { AREA_BLAST } from '../objects/skills/area_blast'\r\nimport { DAZZLE } from '../objects/skills/Dazzle'\r\nimport { SMASH } from '../objects/skills/smash'\r\nimport { SHOCKWAVE } from '../objects/skills/shockwave'\r\nimport { TAUNT } from '../objects/skills/taunt'\r\n\r\nexport const STATI_ICONS: Partial<Record<keyof StatsT | 'accuracy', string>> = {\r\n  vigor: Vigor,\r\n  strength: Strength,\r\n  intelligence: Brain,\r\n  perception: Awareness,\r\n  talent: Juggler,\r\n  agility: Agility,\r\n  luck: Clover,\r\n  accuracy: Accuracy,\r\n}\r\n\r\nexport const TAG_ICONS: Record<CharacterTagTypeT, string> = {\r\n  dazed: Dazed,\r\n  targeted: Targeted,\r\n}\r\n\r\nexport const SKILL_ICONS: Record<string, string> = {\r\n  [SHOT.id]: Shot,\r\n  [SNIPE_SHOT.id]: SnipeShot,\r\n  [SURGE.id]: Surge,\r\n  [AREA_BLAST.id]: AreaBast,\r\n  [DAZZLE.id]: Dazzle,\r\n  [SMASH.id]: Smash,\r\n  [SHOCKWAVE.id]: Shockwave,\r\n  [TAUNT.id]: Taunt,\r\n}\r\n","import React from 'react'\r\nimport { ProcessedCharacterT, StatsT } from '../../types'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\nimport { Gauge } from '../Gauge'\r\nimport { noneg } from '../../util'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { Monodiv } from '../../elements/monospace'\r\nimport { styled, withStyle } from 'styletron-react'\r\nimport { Badge } from '../../elements/badge'\r\nimport { Icon } from '../Icon'\r\nimport { STATI_ICONS } from '../../icons/maps'\r\nimport Details from '../../icons/svg/delapouite/skills.svg'\r\nimport Inventory from '../../icons/svg/lorc/knapsack.svg'\r\n\r\nconst ResourceE = withStyle(Monodiv, (props: any) => ({\r\n  height: 15,\r\n  color: props.$color,\r\n  fontSize: '12px',\r\n  fontWeight: 'bolder',\r\n  padding: '0px 4px',\r\n  lineHeight: '15px',\r\n  flex: 1,\r\n  textAlign: 'center',\r\n  background: '#111',\r\n  display: 'flex',\r\n}))\r\n\r\nexport interface PartyCharacterProps {\r\n  character: ProcessedCharacterT\r\n  activeCharacter: ProcessedCharacterT\r\n  hoverable?: boolean\r\n  selected?: boolean\r\n  isHovering?: boolean\r\n  onClick?: () => void\r\n}\r\nconst Wrapper = styled('div', (props: any) => {\r\n  const { $selected, $active, $hoverable, $isHovering } = props\r\n  const hoverable = $hoverable && !$selected\r\n  return {\r\n    margin: 10,\r\n    position: 'relative',\r\n    boxShadow: $isHovering\r\n      ? '0px 0px 20px black'\r\n      : $selected\r\n      ? '0px 0px 10px black'\r\n      : $active\r\n      ? '0px 0px 20px white'\r\n      : 'none',\r\n    ':hover': {\r\n      boxShadow: hoverable ? '0px 0px 20px black' : undefined,\r\n    },\r\n    transition: 'all 0.1s',\r\n  }\r\n})\r\n\r\ninterface CharacterStatPropsT {\r\n  statKey: keyof StatsT\r\n  character: ProcessedCharacterT\r\n}\r\nconst CharacterStat = (props: CharacterStatPropsT) => {\r\n  const { statKey, character } = props\r\n  return (\r\n    <ResourceE $color={getStatColor(character, statKey)}>\r\n      <Icon\r\n        src={STATI_ICONS[statKey] || ''}\r\n        fill={getStatColor(character, statKey)}\r\n        size={14}\r\n        style={{ marginRight: 4 }}\r\n      />\r\n      {character.stats[statKey]}\r\n    </ResourceE>\r\n  )\r\n}\r\n\r\nconst getStatColor = (\r\n  character: ProcessedCharacterT,\r\n  key: keyof StatsT,\r\n): string => {\r\n  const a = character.stats[key]\r\n  const b = character.rawStats[key]\r\n  if (a > b) return 'lightgreen'\r\n  if (b > a) return 'lightcoral'\r\n  return 'rgba(255,255,255,0.6)'\r\n}\r\n\r\nexport const PartyCharacter = (props: PartyCharacterProps) => {\r\n  const {\r\n    character,\r\n    activeCharacter,\r\n    hoverable,\r\n    selected,\r\n    isHovering,\r\n    onClick,\r\n  } = props\r\n  const health = character.health - character.stats.healthOffset\r\n  return (\r\n    <Wrapper\r\n      $hoverable={hoverable && !character.dead}\r\n      $active={character.id === activeCharacter.id}\r\n      $selected={selected}\r\n      $isHovering={isHovering}\r\n      style={{\r\n        opacity: character.dead ? 0.5 : 1,\r\n      }}\r\n    >\r\n      <BoxContainer\r\n        onClick={() => (onClick && !character.dead ? onClick() : null)}\r\n        style={{\r\n          borderWidth: 2,\r\n          cursor: onClick ? 'pointer' : 'default',\r\n        }}\r\n        substyle={{ padding: 0, minWidth: 380 }}\r\n      >\r\n        <FlexContainer style={{ border: '2px solid black' }}>\r\n          <FlexContainer style={{ borderRight: '2px solid black' }}>\r\n            <img\r\n              alt='profile'\r\n              height='115'\r\n              width='115'\r\n              src={`https://picsum.photos/seed/${character.name}/115/115`}\r\n              style={{\r\n                height: 115,\r\n                width: 115,\r\n              }}\r\n            />\r\n          </FlexContainer>\r\n          <FlexContainer $full $direction='column'>\r\n            <FlexContainer\r\n              style={{\r\n                marginTop: -3,\r\n                marginRight: -3,\r\n                padding: '2px 4px',\r\n                paddingLeft: 8,\r\n                background: '#555',\r\n                borderBottom: '1px solid rgba(255,255,255,0.2)',\r\n                boxShadow: '0px 4px 5px black',\r\n              }}\r\n            >\r\n              <span\r\n                style={{\r\n                  fontWeight: 'bolder',\r\n                  textShadow: '0px 0px 2px black',\r\n                }}\r\n              >\r\n                {character.name}\r\n              </span>\r\n            </FlexContainer>\r\n            <FlexContainer>\r\n              <span\r\n                style={{\r\n                  fontWeight: 'bolder',\r\n                  padding: 4,\r\n                  fontSize: 42,\r\n                  height: 42,\r\n                  lineHeight: '42px',\r\n                  color: '#b55553',\r\n                }}\r\n              >\r\n                {health > 0 ? health : 0}\r\n              </span>\r\n              <FullContainer />\r\n              <FlexContainer $direction='column'>\r\n                <FlexContainer $direction='column' $full>\r\n                  <span>\r\n                    {character.status.map((s) => `${s.type} (${s.duration})`)}\r\n                  </span>\r\n                  <span>\r\n                    {character.tags.map((s) => `${s.type} (${s.duration})`)}\r\n                  </span>\r\n                </FlexContainer>\r\n                <FlexContainer>\r\n                  <Icon\r\n                    src={Inventory}\r\n                    fill={'rgba(255,255,255,0.7)'}\r\n                    size={18}\r\n                    shadow\r\n                    style={{ padding: 6, cursor: 'pointer' }}\r\n                  />\r\n                  <Icon\r\n                    src={Details}\r\n                    fill={'rgba(255,255,255,0.7)'}\r\n                    size={18}\r\n                    shadow\r\n                    style={{ padding: 6, cursor: 'pointer' }}\r\n                  />\r\n                </FlexContainer>\r\n              </FlexContainer>\r\n            </FlexContainer>\r\n            <FullContainer />\r\n            <Gauge\r\n              name='Health'\r\n              color='#8f4e4d'\r\n              max={character.health}\r\n              value={noneg(health)}\r\n              height={12}\r\n            >\r\n              {noneg(health)}/{character.health}\r\n            </Gauge>\r\n            <Gauge\r\n              name='XP'\r\n              color='#5e8575'\r\n              max={3300}\r\n              value={1256}\r\n              height={12}\r\n            >\r\n              1256/3300\r\n            </Gauge>\r\n            <Badge $bottom='18px' $left='105px'>\r\n              {character.level}\r\n            </Badge>\r\n            <FlexContainer>\r\n              <CharacterStat statKey='strength' character={character} />\r\n              <CharacterStat statKey='vigor' character={character} />\r\n              <CharacterStat statKey='intelligence' character={character} />\r\n              <CharacterStat statKey='perception' character={character} />\r\n              <CharacterStat statKey='talent' character={character} />\r\n              <CharacterStat statKey='agility' character={character} />\r\n              <CharacterStat statKey='luck' character={character} />\r\n            </FlexContainer>\r\n          </FlexContainer>\r\n        </FlexContainer>\r\n      </BoxContainer>\r\n      <Badge $bottom='64px' $left='-12px' $color='lightblue'>\r\n        {character.stats.armor}\r\n      </Badge>\r\n      <Badge $bottom='26px' $left='-12px' $color='plum'>\r\n        {character.stats.resistance}\r\n      </Badge>\r\n      <Badge $bottom='-10px' $left='-12px' $color='lightgreen'>\r\n        {character.stats.evasion}\r\n      </Badge>\r\n      <Badge\r\n        $bottom='-12px'\r\n        $left='40px'\r\n        $size='35px'\r\n        $color={\r\n          character.weapon.damage.type === 'physical'\r\n            ? 'rgba(255,255,255,0.8)'\r\n            : 'plum'\r\n        }\r\n        style={{ fontSize: 24 }}\r\n      >\r\n        {character.weapon.damage.damage}\r\n      </Badge>\r\n    </Wrapper>\r\n  )\r\n}\r\n","import { styled, withStyle } from 'styletron-react'\r\n\r\nexport interface ButtonPropsT {\r\n  $direction?: 'up' | 'down'\r\n}\r\nexport const Button = styled('button', (props: ButtonPropsT) => {\r\n  return {\r\n    cursor: 'pointer',\r\n    background: '#222',\r\n    boxShadow: 'inset 0px 0px 3px black',\r\n    textShadow: '0px 1px 3px black',\r\n    border: '1px solid rgba(255,255,255,0.2)',\r\n    color: 'rgba(255,255,255,1)',\r\n    ':hover': {\r\n      border: '1px solid rgba(255,255,255,0.4)',\r\n    },\r\n    ':active': {\r\n      outline: 'none',\r\n      border: '1px solid rgba(255,255,255,0.7)',\r\n    },\r\n    ':focus': {\r\n      outline: 'none',\r\n    },\r\n    padding: '10px 30px',\r\n  }\r\n})\r\n\r\nexport const ConfirmButton = withStyle(Button, (props: ButtonPropsT) => {\r\n  const { $direction } = props\r\n  return {\r\n    //background: 'linear-gradient(0deg, rgba(157,0,0,1) 0%, rgba(110,0,0,1) 100%)',\r\n    fontWeight: 'bold',\r\n    borderTop: $direction === 'down' ? 'none' : undefined,\r\n    borderBottom: $direction === 'up' ? 'none' : undefined,\r\n    padding: '10px 30px',\r\n    boxShadow: 'inset 0px 2px 8px black',\r\n    ':hover': {\r\n      borderTop: $direction === 'down' ? 'none' : undefined,\r\n      borderBottom: $direction === 'up' ? 'none' : undefined,\r\n    },\r\n  }\r\n})\r\n","import React, { useState } from 'react'\r\nimport { ProcessedPartyT } from '../../types'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { PartyCharacter } from '../PartyCharacter'\r\nimport { useCombatContext } from '../../contexts/CombatContext'\r\nimport { ConfirmButton } from '../../elements/button'\r\n\r\nexport interface CombatPartyPlayerPropsT {\r\n  party: ProcessedPartyT\r\n}\r\nexport const CombatPlayerParty = (props: CombatPartyPlayerPropsT) => {\r\n  const { party } = props\r\n  const {\r\n    activeCharacter,\r\n    selectedSkill,\r\n    selectedTargets,\r\n    onTargetsSelect,\r\n    next,\r\n  } = useCombatContext()\r\n\r\n  const [isHovering, setIsHovering] = useState<boolean>(false)\r\n  return (\r\n    <FlexContainer $direction='column'>\r\n      <FlexContainer\r\n        style={{\r\n          justifyContent: 'space-around',\r\n          alignItems: 'flex-end',\r\n          cursor: selectedSkill?.targetType === 'party' ? 'pointer' : 'default',\r\n        }}\r\n        onMouseEnter={() => setIsHovering(true)}\r\n        onMouseLeave={() => setIsHovering(false)}\r\n        onClick={() => {\r\n          if (selectedSkill && selectedSkill.targetType === 'party') {\r\n            onTargetsSelect(party)\r\n          }\r\n        }}\r\n      >\r\n        {party.characters.map((c) => (\r\n          <div key={c.id}>\r\n            {selectedSkill &&\r\n              !c.dead &&\r\n              ((selectedSkill.targetType === 'self' &&\r\n                c.id === activeCharacter.id) ||\r\n                selectedSkill.targetType === 'ally') && (\r\n                <FlexContainer style={{ justifyContent: 'center' }}>\r\n                  <div style={{ boxShadow: '0px 2px 5px black' }}>\r\n                    <ConfirmButton onClick={() => next(c)} $direction='up'>\r\n                      Confirm Target\r\n                    </ConfirmButton>\r\n                  </div>\r\n                </FlexContainer>\r\n              )}\r\n            <PartyCharacter activeCharacter={activeCharacter} character={c} />\r\n          </div>\r\n        ))}\r\n      </FlexContainer>\r\n      {selectedSkill && selectedSkill.targetType === 'party' && (\r\n        <FlexContainer style={{ justifyContent: 'center' }}>\r\n          <div style={{ boxShadow: '0px 2px 5px black' }}>\r\n            <ConfirmButton\r\n              onClick={() => next(party)}\r\n              onMouseEnter={() => setIsHovering(true)}\r\n              onMouseLeave={() => setIsHovering(false)}\r\n            >\r\n              Confirm Group Target\r\n            </ConfirmButton>\r\n          </div>\r\n        </FlexContainer>\r\n      )}\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import { ModalStylesT } from '.'\r\n\r\nexport interface ModalContextStateT {\r\n  isOpen: boolean\r\n  contents: JSX.Element | null\r\n  callback: ((payload?: any) => void) | null\r\n  payload: any | null\r\n  blocking: boolean\r\n  styles: ModalStylesT\r\n}\r\nexport const initialState: ModalContextStateT = {\r\n  isOpen: false,\r\n  contents: null,\r\n  callback: null,\r\n  payload: null,\r\n  blocking: false,\r\n  styles: {},\r\n}\r\n\r\nexport const OPEN = 'modalContext/OPEN'\r\nexport const CLOSE = 'modalContext/CLOSE'\r\nexport const SET_CONTENTS = 'modalContext/SET_CONTENTS'\r\nexport const SET_CALLBACK = 'modalContext/SET_CALLBACK'\r\nexport const SET_PAYLOAD = 'modalContext/SET_PAYLOAD'\r\nexport const SET_BLOCKING = 'modalContext/SET_BLOCKING'\r\nexport const SET_STYLE = 'modalContext/SET_STYLE'\r\n\r\nexport const actions = {\r\n  open: (\r\n    contents?: JSX.Element,\r\n    styles?: ModalStylesT,\r\n    blocking?: boolean,\r\n    callback?: (payload?: any) => void,\r\n  ) => ({\r\n    type: OPEN,\r\n    contents,\r\n    styles,\r\n    blocking,\r\n    callback,\r\n  }),\r\n  close: () => ({ type: CLOSE }),\r\n  setPayload: (payload: any) => ({ type: SET_PAYLOAD, payload }),\r\n  setContents: (contents: JSX.Element | null) => ({\r\n    type: SET_CONTENTS,\r\n    contents,\r\n  }),\r\n  setCallback: (callback: (() => void) | null) => ({\r\n    type: SET_CALLBACK,\r\n    callback,\r\n  }),\r\n  setBlocking: (blocking: boolean) => ({ type: SET_BLOCKING, blocking }),\r\n  setStyles: (styles: ModalStylesT) => ({ type: SET_STYLE, styles }),\r\n}\r\n\r\nconst core: Record<\r\n  string,\r\n  (state: ModalContextStateT, action: any) => ModalContextStateT\r\n> = {\r\n  [OPEN]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    isOpen: true,\r\n    contents: action.contents ? action.contents : state.contents,\r\n    styles: action.styles ? action.styles : state.styles || {},\r\n    blocking: action.blocking || false,\r\n    callback: action.callback ? action.callback : state.callback,\r\n  }),\r\n  [CLOSE]: (state: ModalContextStateT) => ({\r\n    ...state,\r\n    isOpen: false,\r\n  }),\r\n  [SET_PAYLOAD]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    payload: action.payload,\r\n  }),\r\n  [SET_CONTENTS]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    callback: null,\r\n    payload: null,\r\n    contents: action.contents,\r\n    blocking: false,\r\n    style: {},\r\n  }),\r\n  [SET_CALLBACK]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    callback: action.callback,\r\n  }),\r\n  [SET_BLOCKING]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    blocking: action.blocking,\r\n  }),\r\n  [SET_STYLE]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    styles: action.styles,\r\n  }),\r\n}\r\n\r\nexport const reducer = (\r\n  state: ModalContextStateT = initialState,\r\n  action: any,\r\n) => {\r\n  const coreFunction = core[action.type]\r\n  return coreFunction ? coreFunction(state, action) : state\r\n}\r\n","import React, { useContext, useReducer, useMemo, CSSProperties } from 'react'\r\nimport Modal from 'react-modal'\r\nimport { actions, reducer, initialState, ModalContextStateT } from './reducer'\r\n\r\nexport interface ModalContextT {\r\n  open: (\r\n    contents?: JSX.Element,\r\n    styles?: ModalStylesT,\r\n    blocking?: boolean,\r\n    callback?: (payload?: any) => void,\r\n  ) => void\r\n  close: (payload?: any) => void\r\n  setPayload: (payload: any) => void\r\n  setBlocking: (blocking: boolean) => void\r\n  setContents: (contents: JSX.Element) => void\r\n  setCallback: (callback: (payload?: any) => void) => void\r\n  setStyles: (styles: ModalStylesT) => void\r\n}\r\nconst defaultContext: ModalContextT = {\r\n  open: () => null,\r\n  close: () => null,\r\n  setBlocking: () => null,\r\n  setPayload: () => null,\r\n  setContents: () => null,\r\n  setCallback: () => null,\r\n  setStyles: () => null,\r\n}\r\nexport const ModalContext = React.createContext<ModalContextT>(defaultContext)\r\nexport const useModalContext = () => useContext(ModalContext)\r\n\r\nexport interface ModalStylesT {\r\n  modal?: CSSProperties\r\n  overlay?: CSSProperties\r\n}\r\n\r\nconst getContextValue = (\r\n  state: ModalContextStateT,\r\n  dispatch: React.Dispatch<any>,\r\n) => ({\r\n  isOpen: state.isOpen,\r\n  open: (\r\n    contents?: JSX.Element,\r\n    styles?: ModalStylesT,\r\n    blocking?: boolean,\r\n    callback?: (payload?: any) => void,\r\n  ) => {\r\n    dispatch(actions.open(contents, styles, blocking, callback))\r\n  },\r\n  close: (payload?: any) => {\r\n    if (state.callback) state.callback(payload || state.payload)\r\n    dispatch(actions.close())\r\n  },\r\n  setPayload: (payload: any) => dispatch(actions.setPayload(payload)),\r\n  setContents: (contents: JSX.Element) =>\r\n    dispatch(actions.setContents(contents)),\r\n  setCallback: (callback: (payload?: any) => void) =>\r\n    dispatch(actions.setCallback(callback)),\r\n  setBlocking: (blocking: boolean) => dispatch(actions.setBlocking(blocking)),\r\n  setStyles: (styles: ModalStylesT) => dispatch(actions.setStyles(styles)),\r\n})\r\nModal.setAppElement('#root')\r\nexport interface ModalContextProviderPropsT {\r\n  children: JSX.Element\r\n}\r\nexport const ModalContextProvider = (props: ModalContextProviderPropsT) => {\r\n  const { children } = props\r\n  const reducerValue = useReducer(reducer, initialState)\r\n  const [state] = reducerValue\r\n  const context = useMemo(() => getContextValue(...reducerValue), [\r\n    reducerValue,\r\n  ])\r\n\r\n  return (\r\n    <ModalContext.Provider value={context}>\r\n      {children}\r\n      <Modal\r\n        isOpen={state.isOpen}\r\n        onRequestClose={() => {\r\n          if (!state.blocking) context.close()\r\n        }}\r\n        style={{\r\n          content: {\r\n            backgroundColor: '#111',\r\n            color: 'white',\r\n            width: 400,\r\n            margin: '0 auto',\r\n            bottom: 'unset',\r\n            borderColor: '#555',\r\n            ...state.styles.modal,\r\n          },\r\n          overlay: {\r\n            backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n            ...state.styles.overlay,\r\n          },\r\n        }}\r\n      >\r\n        {state.contents || <div />}\r\n      </Modal>\r\n    </ModalContext.Provider>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { SkillT, StatsT } from '../../types'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { STATI_ICONS } from '../../icons/maps'\r\nimport { Icon } from '../Icon'\r\nimport { Badge } from '../../elements/badge'\r\nimport { CheckKVT } from '../RoundResultRenderer'\r\nimport X from '../../icons/svg/lorc/split-cross.svg'\r\n\r\nexport interface SkillChecksPropsT {\r\n  skill: SkillT\r\n}\r\nexport const SkillChecks = (props: SkillChecksPropsT) => {\r\n  const { skill } = props\r\n  return (\r\n    <FlexContainer\r\n      style={{ justifyContent: 'center', padding: '0px 0 24px 0' }}\r\n    >\r\n      {skill.rolls.map((roll, i) => (\r\n        <SkillCheck\r\n          key={i}\r\n          check={{ label: roll.key || 'strength', result: undefined }}\r\n        />\r\n      ))}\r\n    </FlexContainer>\r\n  )\r\n}\r\n\r\nexport interface SkillCheckT {\r\n  check: CheckKVT\r\n}\r\nexport const SkillCheck = (props: SkillCheckT) => {\r\n  const { check } = props\r\n  return (\r\n    <div\r\n      style={{\r\n        padding: '0px 12px',\r\n        opacity: check.result === undefined ? 0.5 : 1,\r\n      }}\r\n    >\r\n      <Badge $absolute={false} $size={36}>\r\n        <Icon\r\n          src={STATI_ICONS[(check.label as keyof StatsT) || 'strength'] || ''}\r\n          fill={getColor(check.result)}\r\n          size={32}\r\n        />\r\n        {check.result === false && (\r\n          <Icon\r\n            src={X}\r\n            fill={'lightcoral'}\r\n            size={32}\r\n            style={{ position: 'absolute', top: 0 }}\r\n          />\r\n        )}\r\n      </Badge>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst getColor = (result: boolean | undefined) => {\r\n  if (result === true) return 'white'\r\n  if (result === false) return 'rgba(255,255,255,0.6)'\r\n  return 'rgba(255,255,255,0.6)'\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useCombatContext } from '../../contexts/CombatContext'\r\nimport { useModalContext } from '../../contexts/ModalContext'\r\nimport { NameSpanBuilder } from '../../contexts/CombatLogContext/util'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport Kefir from 'kefir'\r\nimport { SkillCheck } from '../SkillChecks'\r\n\r\nexport interface RoundResultRendererPropsT {\r\n  isModal?: boolean\r\n}\r\nexport const RoundResultRenderer = (props: RoundResultRendererPropsT) => {\r\n  const { isModal = true } = props\r\n  const { activeRound, commit } = useCombatContext()\r\n  const { open, close } = useModalContext()\r\n  const [isOpen, setIsOpen] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (activeRound && !isOpen) {\r\n      setIsOpen(true)\r\n      if (isModal) {\r\n        open(\r\n          <RoundResult\r\n            close={() => {\r\n              close(true)\r\n              setIsOpen(false)\r\n              commit()\r\n            }}\r\n          />,\r\n          {\r\n            overlay: {\r\n              background: 'transparent',\r\n            },\r\n          },\r\n          true,\r\n        )\r\n      }\r\n    }\r\n  }, [isModal, isOpen, activeRound, open, close, commit])\r\n\r\n  if (!isModal && activeRound && activeRound[0]) {\r\n    return (\r\n      <FlexContainer style={{ height: 315 }}>\r\n        <RoundResult\r\n          close={() => {\r\n            setIsOpen(false)\r\n            commit()\r\n          }}\r\n        />\r\n      </FlexContainer>\r\n    )\r\n  }\r\n  return null\r\n}\r\n\r\nexport interface RoundResultPropsT {\r\n  close: () => void\r\n}\r\nexport interface CheckKVT {\r\n  label: string\r\n  result: boolean | undefined\r\n}\r\nexport const RoundResult = (props: RoundResultPropsT) => {\r\n  const { close } = props\r\n  const { activeRound, party, enemyParty } = useCombatContext()\r\n  const [isDone, setIsDone] = useState(false)\r\n  const NameSpan = NameSpanBuilder(party, enemyParty)\r\n  const rounds = activeRound || []\r\n  const round = rounds[0]\r\n  const [roundResults, setRoundResults] = useState<CheckKVT[]>(\r\n    !round\r\n      ? []\r\n      : round.rollResults.map((result, i) => ({\r\n          label: round.skill.rolls[i].key || '<NULL>',\r\n          result: undefined,\r\n        })),\r\n  )\r\n\r\n  const updateRoundResult = (value: CheckKVT, index: number) =>\r\n    setRoundResults((r) => r.map((r, i) => (i === index ? value : r)))\r\n\r\n  useEffect(() => {\r\n    console.log(roundResults)\r\n    const stream = Kefir.sequentially(\r\n      200,\r\n      roundResults.map((r, i) => ({ ...r, index: i })),\r\n    )\r\n    stream.onValue((result) => {\r\n      updateRoundResult(\r\n        {\r\n          label: result.label,\r\n          result:\r\n            result.label === 'accuracy'\r\n              ? round.accuracySuccess\r\n              : round.rollResults[result.index].result,\r\n        },\r\n        result.index,\r\n      )\r\n    })\r\n    stream.onEnd(() => {\r\n      Kefir.later(500, undefined).onValue(() => {\r\n        setIsDone(true)\r\n      })\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (isDone) {\r\n      close()\r\n    }\r\n  }, [isDone, close])\r\n\r\n  if (!round) return null\r\n\r\n  const target = {\r\n    ...round.target,\r\n    name: rounds.length > 1 ? `${rounds.length} characters` : round.target.name,\r\n  }\r\n\r\n  return (\r\n    <FlexContainer $direction='column' style={{ textAlign: 'center' }}>\r\n      <FlexContainer style={{ justifyContent: 'space-evenly' }}>\r\n        {roundResults.map((result, i) => (\r\n          <SkillCheck key={i} check={result} />\r\n        ))}\r\n      </FlexContainer>\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\nimport { SkillT, ProcessedCharacterT } from '../../types'\r\nimport {\r\n  getChecksProbability,\r\n  getSkillDamageRange,\r\n  getSkillDamage,\r\n  getPerfectKeys,\r\n} from '../../functions'\r\n\r\nexport interface SkillPreviewPropsT {\r\n  skill: SkillT\r\n  source: ProcessedCharacterT\r\n  targets: ProcessedCharacterT[]\r\n}\r\nexport const SkillPreview = (props: SkillPreviewPropsT) => {\r\n  const { skill, source, targets } = props\r\n  const perfectChance = getChecksProbability(source, skill.rolls)\r\n  const damage = getSkillDamage(skill, source)\r\n  const damageString = getSkillDamageRange(\r\n    skill,\r\n    source,\r\n    targets.length === 0 ? undefined : targets,\r\n  )\r\n  const perfectKeys = getPerfectKeys(skill)\r\n  return (\r\n    <BoxContainer\r\n      style={{ marginTop: 30, position: 'relative' }}\r\n      substyle={{ background: '#111' }}\r\n    >\r\n      <FlexContainer $direction='column' style={{ alignItems: 'center' }}>\r\n        <FlexContainer style={{ marginTop: -27 }}>\r\n          <FullContainer />\r\n          <BoxContainer\r\n            substyle={{\r\n              padding: '4px 12px',\r\n              background: '#555',\r\n              fontWeight: 'bolder',\r\n            }}\r\n          >\r\n            {skill.name}\r\n          </BoxContainer>\r\n          <FullContainer />\r\n        </FlexContainer>\r\n        <span style={{ color: 'rgba(255,255,255,0.4)' }}>\r\n          Perect ({Math.floor(perfectChance * 100)}%){' '}\r\n          {perfectKeys.length > 0 && '='} {perfectKeys}\r\n        </span>\r\n        <FlexContainer $full style={{ width: '100%', marginBottom: 8 }}>\r\n          {damage.damage > 0 && (\r\n            <FlexContainer\r\n              $full\r\n              $direction='column'\r\n              style={{ alignItems: 'center', marginRight: 10 }}\r\n            >\r\n              <span\r\n                style={{\r\n                  color: damage.type === 'physical' ? 'lightblue' : 'plum',\r\n                  fontWeight: 'bolder',\r\n                  fontSize: 32,\r\n                }}\r\n              >\r\n                {damageString}\r\n              </span>\r\n              <span style={{ color: 'rgba(255,255,255,0.2)' }}>\r\n                {damage.type} DMG\r\n              </span>\r\n            </FlexContainer>\r\n          )}\r\n          <FlexContainer\r\n            $full\r\n            $direction='column'\r\n            style={{ alignItems: 'center' }}\r\n          >\r\n            <span\r\n              style={{\r\n                fontWeight: 'bolder',\r\n                fontSize: 32,\r\n              }}\r\n            >\r\n              {source.stats[skill.rolls[0].key || 'strength'] +\r\n                (skill.rolls[0].offset || 0)}\r\n              %\r\n            </span>\r\n            <span style={{ color: 'rgba(255,255,255,0.2)' }}>\r\n              Per Check ACC\r\n            </span>\r\n          </FlexContainer>\r\n        </FlexContainer>\r\n        <FlexContainer style={{ marginBottom: -18 }}>\r\n          <FullContainer />\r\n          <BoxContainer\r\n            substyle={{ padding: '0px 12px', background: '#555', fontSize: 10 }}\r\n          >\r\n            {skill.targetType}\r\n          </BoxContainer>\r\n          <FullContainer />\r\n        </FlexContainer>\r\n      </FlexContainer>\r\n    </BoxContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { useCombatContext } from '../../contexts/CombatContext'\r\nimport { Button } from '../../elements/button'\r\nimport { SkillPreview } from '../SkillPreview'\r\nimport { SkillChecks } from '../SkillChecks'\r\nimport { PLAYER_PARTY_ID } from '../../objects/Party'\r\nimport { SKILL_ICONS } from '../../icons/maps'\r\nimport { Icon } from '../Icon'\r\nimport { Hover } from '../Hover'\r\n\r\nexport const CombatActions = () => {\r\n  const {\r\n    activeCharacter,\r\n    selectedSkill,\r\n    selectedTargets,\r\n    onSkillSelect,\r\n  } = useCombatContext()\r\n\r\n  if (!activeCharacter || activeCharacter.partyId !== PLAYER_PARTY_ID)\r\n    return null\r\n\r\n  return (\r\n    <FlexContainer $direction='column' style={{ minWidth: 340 }}>\r\n      {selectedSkill && <SkillChecks skill={selectedSkill} />}\r\n      <FlexContainer style={{ justifyContent: 'center' }}>\r\n        {activeCharacter.skills.map((skill) =>\r\n          SKILL_ICONS[skill.id] ? (\r\n            <Hover delay={0}>\r\n              {({ isHovering }) => (\r\n                <Icon\r\n                  src={SKILL_ICONS[skill.id]}\r\n                  size={42}\r\n                  shadow={true}\r\n                  style={{\r\n                    cursor: 'pointer',\r\n                    padding: '0 12px',\r\n                  }}\r\n                  onClick={() => onSkillSelect(skill)}\r\n                  fill={\r\n                    skill.id === selectedSkill?.id\r\n                      ? 'lightsalmon'\r\n                      : isHovering\r\n                      ? 'white'\r\n                      : 'rgba(255,255,255,0.8)'\r\n                  }\r\n                />\r\n              )}\r\n            </Hover>\r\n          ) : (\r\n            <Button\r\n              key={skill.id}\r\n              onClick={() => onSkillSelect(skill)}\r\n              style={{\r\n                background: '#111',\r\n                borderColor:\r\n                  selectedSkill && skill.id === selectedSkill.id\r\n                    ? 'white'\r\n                    : undefined,\r\n              }}\r\n            >\r\n              {skill.name}\r\n            </Button>\r\n          ),\r\n        )}\r\n      </FlexContainer>\r\n      {selectedSkill && (\r\n        <SkillPreview\r\n          skill={selectedSkill}\r\n          source={activeCharacter}\r\n          targets={selectedTargets}\r\n        />\r\n      )}\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ProcessedCharacterT } from '../../types'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\nimport { Gauge } from '../Gauge'\r\nimport { noneg } from '../../util'\r\nimport { styled } from 'styletron-react'\r\nimport { Badge } from '../../elements/badge'\r\nimport { Icon } from '../Icon'\r\nimport { TAG_ICONS } from '../../icons/maps'\r\n\r\nexport interface EnemyCharacterPropsT {\r\n  character: ProcessedCharacterT\r\n  activeCharacter: ProcessedCharacterT\r\n  hoverable?: boolean\r\n  selected?: boolean\r\n  isHovering?: boolean\r\n  onClick?: () => void\r\n}\r\nconst Wrapper = styled('div', (props: any) => {\r\n  const { $selected, $active, $hoverable, $isHovering } = props\r\n  const hoverable = $hoverable && !$selected\r\n  return {\r\n    margin: 10,\r\n    boxShadow: $isHovering\r\n      ? '0px 0px 20px black'\r\n      : $selected\r\n      ? '0px 0px 10px black'\r\n      : $active\r\n      ? '0px 0px 20px white'\r\n      : 'none',\r\n    ':hover': {\r\n      boxShadow: hoverable ? '0px 0px 20px black' : undefined,\r\n    },\r\n    transition: 'all 0.1s',\r\n  }\r\n})\r\nexport const EnemyCharacter = (props: EnemyCharacterPropsT) => {\r\n  const {\r\n    character,\r\n    activeCharacter,\r\n    hoverable,\r\n    selected,\r\n    isHovering,\r\n    onClick,\r\n  } = props\r\n  const health = character.health - character.stats.healthOffset\r\n  return (\r\n    <div\r\n      onClick={() => (onClick && !character.dead ? onClick() : null)}\r\n      style={{\r\n        borderWidth: 2,\r\n        width: 380,\r\n        position: 'relative',\r\n        cursor: onClick ? 'pointer' : 'default',\r\n        color: 'rgba(255,255,255,0.8)',\r\n        opacity: character.dead ? 0.5 : 1,\r\n      }}\r\n    >\r\n      <FlexContainer style={{ alignItems: 'center' }}>\r\n        <FlexContainer style={{ border: '1px solid black' }}>\r\n          <Wrapper\r\n            $hoverable={hoverable && !character.dead}\r\n            $active={character.id === activeCharacter.id}\r\n            $selected={selected}\r\n            $isHovering={isHovering}\r\n            style={{\r\n              height: 64,\r\n              width: 64,\r\n            }}\r\n          >\r\n            <img\r\n              alt='profile'\r\n              height='64'\r\n              width='64'\r\n              src={`https://picsum.photos/seed/${character.name}/94/94`}\r\n              style={{\r\n                height: 64,\r\n                width: 64,\r\n              }}\r\n            />\r\n          </Wrapper>\r\n        </FlexContainer>\r\n        <FlexContainer $full $direction='column'>\r\n          <FlexContainer\r\n            style={{\r\n              justifyContent: 'flex-end',\r\n            }}\r\n          >\r\n            <span\r\n              style={{\r\n                padding: '2px 4px',\r\n                textAlign: 'right',\r\n                fontSize: 18,\r\n                lineHeight: '18px',\r\n                background: 'rgba(0,0,0,0.4)',\r\n                textShadow: '1px 1px 2px black',\r\n              }}\r\n            >\r\n              {character.name}\r\n            </span>\r\n          </FlexContainer>\r\n          <div style={{ boxShadow: '0px 5px 15px rgba(0,0,0,0.4)' }}>\r\n            <Gauge\r\n              name='Health'\r\n              color='#8f4e4d'\r\n              max={character.health}\r\n              value={noneg(health)}\r\n              height={20}\r\n            >\r\n              {noneg(health)}/{character.health}\r\n            </Gauge>\r\n          </div>\r\n          <Badge $left='-6px' $bottom='-6px' $size='20px' $color='lightcoral'>\r\n            {character.level}\r\n          </Badge>\r\n          <FlexContainer\r\n            style={{\r\n              position: 'absolute',\r\n              bottom: '-10px',\r\n              left: '70px',\r\n            }}\r\n          >\r\n            {character.tags.map((tag) => (\r\n              <div>\r\n                <Icon src={TAG_ICONS[tag.type]} size={20} />\r\n              </div>\r\n            ))}\r\n          </FlexContainer>\r\n          <FlexContainer\r\n            style={{\r\n              position: 'absolute',\r\n              bottom: '-6px',\r\n              right: '3px',\r\n              width: 52,\r\n              alignItems: 'center',\r\n            }}\r\n          >\r\n            <FullContainer />\r\n            {character.stats.armor > 0 && (\r\n              <Badge\r\n                $absolute={false}\r\n                $right='4px'\r\n                $size='12px'\r\n                $color='lightblue'\r\n              >\r\n                {character.stats.armor}\r\n              </Badge>\r\n            )}\r\n            {character.stats.resistance > 0 && (\r\n              <Badge $absolute={false} $size='12px' $color='plum'>\r\n                {character.stats.resistance}\r\n              </Badge>\r\n            )}\r\n            <FullContainer />\r\n          </FlexContainer>\r\n        </FlexContainer>\r\n        <span\r\n          style={{\r\n            fontWeight: 'bolder',\r\n            fontSize: 52,\r\n            height: 52,\r\n            lineHeight: '45px',\r\n            textShadow: '1px 1px 10px black',\r\n            color: '#b55553',\r\n          }}\r\n        >\r\n          {health > 0 ? health : 0}\r\n        </span>\r\n      </FlexContainer>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { ProcessedPartyT } from '../../types'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { useCombatContext } from '../../contexts/CombatContext'\r\nimport { ConfirmButton } from '../../elements/button'\r\nimport { EnemyCharacter } from '../EnemyCharacter'\r\nimport { PLAYER_PARTY_ID } from '../../objects/Party'\r\n\r\nexport interface CombatPartyPropsT {\r\n  party: ProcessedPartyT\r\n}\r\nexport const CombatParty = (props: CombatPartyPropsT) => {\r\n  const { party } = props\r\n  const {\r\n    activeCharacter,\r\n    selectedSkill,\r\n    selectedTargets,\r\n    onTargetsSelect,\r\n    next,\r\n  } = useCombatContext()\r\n\r\n  const [isHovering, setIsHovering] = useState<boolean>(false)\r\n  return (\r\n    <FlexContainer $direction='column'>\r\n      <FlexContainer\r\n        style={{\r\n          justifyContent: 'space-around',\r\n          cursor: selectedSkill?.targetType === 'group' ? 'pointer' : 'default',\r\n        }}\r\n        onMouseEnter={() => setIsHovering(true)}\r\n        onMouseLeave={() => setIsHovering(false)}\r\n        onClick={() => {\r\n          if (selectedSkill && selectedSkill.targetType === 'group') {\r\n            onTargetsSelect(party)\r\n          }\r\n        }}\r\n      >\r\n        {party.characters.map((c) => (\r\n          <div key={c.id}>\r\n            <EnemyCharacter\r\n              /*\r\n              hoverable={false}\r\n              isHovering={isHovering && selectedSkill?.targetType === 'group'}\r\n              selected={\r\n                selectedTargets.find((t) => t.id === c.id) !== undefined\r\n              }\r\n              onClick={() => {\r\n                if (selectedSkill && selectedSkill.targetType === 'single') {\r\n                  onTargetsSelect(c)\r\n                }\r\n              }} */\r\n              activeCharacter={activeCharacter}\r\n              character={c}\r\n            />\r\n            {selectedSkill &&\r\n              selectedSkill.targetType === 'single' &&\r\n              !c.dead &&\r\n              activeCharacter.partyId === PLAYER_PARTY_ID && (\r\n                <FlexContainer\r\n                  style={{ justifyContent: 'center', marginTop: -13 }}\r\n                >\r\n                  <div style={{ boxShadow: '0px 2px 5px black' }}>\r\n                    <ConfirmButton onClick={() => next(c)} $direction='down'>\r\n                      Confirm Target\r\n                    </ConfirmButton>\r\n                  </div>\r\n                </FlexContainer>\r\n              )}\r\n          </div>\r\n        ))}\r\n      </FlexContainer>\r\n      {selectedSkill && selectedSkill.targetType === 'group' && (\r\n        <FlexContainer style={{ justifyContent: 'center' }}>\r\n          <div style={{ boxShadow: '0px 2px 5px black' }}>\r\n            <ConfirmButton\r\n              onClick={() => next(party)}\r\n              onMouseEnter={() => setIsHovering(true)}\r\n              onMouseLeave={() => setIsHovering(false)}\r\n            >\r\n              Confirm Group Target\r\n            </ConfirmButton>\r\n          </div>\r\n        </FlexContainer>\r\n      )}\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport {\r\n  CombatQueueT,\r\n  getFirst,\r\n  getSortedIds,\r\n  getMax,\r\n} from '../../types/CombatQueue'\r\nimport { ProcessedCharacterT } from '../../types'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\n\r\nconst size = 40\r\nexport interface CombatQueuePropsT {\r\n  queue: CombatQueueT\r\n  characters: ProcessedCharacterT[]\r\n}\r\nexport const CombatQueue = (props: CombatQueuePropsT) => {\r\n  const { queue, characters } = props\r\n  const first = characters.find(\r\n    (c) => c.id === getFirst(queue),\r\n  ) as ProcessedCharacterT\r\n  const sortedIds = getSortedIds(queue)\r\n  const bigList = [\r\n    ...sortedIds,\r\n    ...sortedIds,\r\n    ...sortedIds,\r\n    ...sortedIds,\r\n    ...sortedIds,\r\n    ...sortedIds,\r\n  ]\r\n  const count = Math.floor((800 - 52) / size)\r\n  const [f, ...list] = Array(count)\r\n    .fill(null)\r\n    .map((_, i) => bigList[i])\r\n    .map((id) => characters.find((c) => c.id === id))\r\n    .filter((c) => c !== undefined)\r\n  const max = getMax(queue)\r\n  const min = 50\r\n  const widthCoef = max > min ? 100 / max : 100 / min\r\n  return (\r\n    <FlexContainer $direction='column'>\r\n      <FlexContainer\r\n        style={{\r\n          justifyContent: 'center',\r\n          background: '#111',\r\n          height: 52,\r\n          borderBottom: '2px solid rgba(255,255,255,0.3)',\r\n          boxShadow: '1px 1px 1px black',\r\n        }}\r\n      >\r\n        <FlexContainer style={{ width: 800 }}>\r\n          <FlexContainer>\r\n            <img\r\n              alt='profile'\r\n              height='64'\r\n              width='64'\r\n              src={`https://picsum.photos/seed/${first.name}/115/115`}\r\n              style={{\r\n                height: 64,\r\n                width: 64,\r\n                border: '1px solid rgba(255,255,255,0.5)',\r\n                boxShadow: '1px 1px 1px black',\r\n              }}\r\n            />\r\n          </FlexContainer>\r\n          <FlexContainer $full $direction='column'>\r\n            <FullContainer />\r\n            <FlexContainer $full style={{ position: 'relative' }}>\r\n              {characters\r\n                .filter((c) => c.id !== first.id && !c.dead)\r\n                .map((c, i) => (\r\n                  <div\r\n                    key={`${c?.id}-${i}`}\r\n                    style={{\r\n                      height: size - 10,\r\n                      width: size - 7,\r\n                      position: 'absolute',\r\n                      bottom: '0px',\r\n                      left: `${queue[c.id] * widthCoef}%`,\r\n                      transition: 'all 0.3s',\r\n                    }}\r\n                  >\r\n                    <img\r\n                      alt={`${queue[c?.id || '']}`}\r\n                      height={size}\r\n                      width={size}\r\n                      src={`https://picsum.photos/seed/${c?.name}/115/115`}\r\n                      style={{\r\n                        height: size - 10,\r\n                        width: size - 7,\r\n                        border: '1px solid rgba(255,255,255,0.5)',\r\n                        borderBottom: 'none',\r\n                      }}\r\n                    />\r\n                  </div>\r\n                ))}\r\n            </FlexContainer>\r\n          </FlexContainer>\r\n        </FlexContainer>\r\n      </FlexContainer>\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React, { useRef, useEffect } from 'react'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { useCombatLogContext } from '../../contexts/CombatLogContext'\r\n\r\nexport const CombatLog = () => {\r\n  const { combatLog } = useCombatLogContext()\r\n  const scrollRef = useRef<HTMLDivElement>(null)\r\n  useEffect(() => {\r\n    if (scrollRef.current) {\r\n      scrollRef.current.scrollIntoView({ behavior: 'smooth' })\r\n    }\r\n  }, [combatLog])\r\n  return (\r\n    <FlexContainer\r\n      $direction='column'\r\n      style={{\r\n        padding: 8,\r\n        minWidth: 400,\r\n        height: 300,\r\n        overflow: 'auto',\r\n        background: 'rgba(0,0,0,0.7)',\r\n        color: 'rgba(255,255,255,0.8)',\r\n      }}\r\n    >\r\n      {combatLog.map((line, i) => (\r\n        <span key={i}>{line}</span>\r\n      ))}\r\n      <div ref={scrollRef} />\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useCombatContext } from '../contexts/CombatContext'\r\nimport { BoxContainer } from '../elements/box'\r\nimport { FlexContainer, FullContainer } from '../elements/flex'\r\nimport { useCombatLogContext } from '../contexts/CombatLogContext'\r\nimport { CombatPlayerParty } from '../components/CombatPlayerParty'\r\nimport { RoundResultRenderer } from '../components/RoundResultRenderer'\r\nimport { CombatActions } from '../components/CombatActions'\r\nimport { CombatParty } from '../components/CombatParty'\r\nimport { useModalContext } from '../contexts/ModalContext'\r\nimport { CombatQueue } from '../components/CombatQueue'\r\nimport ForestBg from '../assets/img/flat-forestred.jpg'\r\nimport { CombatLog } from '../components/CombatLog'\r\n\r\nexport const Combat = () => {\r\n  const {\r\n    party,\r\n    enemyParty,\r\n    activeCharacter,\r\n    characters,\r\n    queue,\r\n    isDone,\r\n    isRunning,\r\n    isRenderingResult,\r\n    start,\r\n  } = useCombatContext()\r\n  const { open, close } = useModalContext()\r\n  const { combatLog } = useCombatLogContext()\r\n  useEffect(() => {\r\n    if (!isRunning) {\r\n      open(\r\n        <div style={{ textAlign: 'center' }}>\r\n          <h1>Combat Start!</h1>\r\n        </div>,\r\n      )\r\n      setTimeout(() => {\r\n        close()\r\n        start()\r\n      }, 500)\r\n    }\r\n  }, [])\r\n  useEffect(() => {\r\n    if (isDone) {\r\n      open(\r\n        <div style={{ textAlign: 'center' }}>\r\n          <h4>Refresh to do combat again</h4>\r\n        </div>,\r\n      )\r\n    }\r\n  }, [isDone])\r\n  if (!isRunning) return null\r\n  if (!activeCharacter) return <span>refresh to do combat again</span>\r\n\r\n  return (\r\n    <FlexContainer\r\n      style={{\r\n        height: '100vh',\r\n        background: `url(${ForestBg}) center center fixed no-repeat`,\r\n        backgroundSize: 'cover',\r\n      }}\r\n    >\r\n      <FlexContainer $full $direction='column'>\r\n        <CombatQueue queue={queue} characters={characters} />\r\n        <FlexContainer\r\n          $direction='column'\r\n          $full\r\n          style={{ padding: '30px 10px' }}\r\n        >\r\n          <FlexContainer $direction='column' $full>\r\n            <CombatParty party={enemyParty} />\r\n          </FlexContainer>\r\n          <FlexContainer $full>\r\n            <FullContainer />\r\n            <FlexContainer $direction='column'>\r\n              {!isRenderingResult && <CombatActions />}\r\n              <RoundResultRenderer isModal={false} />\r\n            </FlexContainer>\r\n            <FlexContainer $full style={{ justifyContent: 'flex-end' }}>\r\n              <CombatLog />\r\n            </FlexContainer>\r\n          </FlexContainer>\r\n          <FlexContainer\r\n            $direction='column'\r\n            $full\r\n            style={{ justifyContent: 'flex-end' }}\r\n          >\r\n            <CombatPlayerParty party={party} />\r\n          </FlexContainer>\r\n        </FlexContainer>\r\n      </FlexContainer>\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\nimport { CombatContextProvider } from './contexts/CombatContext'\nimport { PartyT } from './types'\nimport { makeParty } from './functions'\nimport { Combat } from './domain/Combat'\nimport { CombatLogContextProvider } from './contexts/CombatLogContext'\nimport { ModalContextProvider } from './contexts/ModalContext'\n\nexport const App = () => {\n  const [rawEnemyParty, setRawEnemyParty] = useState<PartyT>(makeParty(3))\n  return (\n    <CombatContextProvider\n      enemyParty={rawEnemyParty}\n      setEnemyParty={setRawEnemyParty}\n      onRequestNewParty={() => setRawEnemyParty(makeParty(3))}\n    >\n      <CombatLogContextProvider>\n        <ModalContextProvider>\n          <Combat />\n        </ModalContextProvider>\n      </CombatLogContextProvider>\n    </CombatContextProvider>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\nimport './index.css'\n\nimport { Provider as StyletronProvider, DebugEngine } from 'styletron-react'\nimport { Client as Styletron } from 'styletron-engine-atomic'\nimport { Provider as ReduxProvider } from 'react-redux'\nimport { makeStore } from './state'\nimport { PartyContextProvider } from './contexts/PartyContext'\n\nconst debug = process.env.NODE_ENV === 'production' ? void 0 : new DebugEngine()\nconst engine: Styletron = new Styletron()\nconst store = makeStore()\n\nReactDOM.render(\n  <React.StrictMode>\n    <ReduxProvider store={store}>\n      <StyletronProvider value={engine} debug={debug} debugAfterHydration>\n        <PartyContextProvider>\n          <App />\n        </PartyContextProvider>\n      </StyletronProvider>\n    </ReduxProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createStore, combineReducers, compose, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport party from './party'\r\n\r\nexport const makeStore = () =>\r\n  createStore(combineReducers({ party }), compose(applyMiddleware(thunk)))\r\n"],"sourceRoot":""}