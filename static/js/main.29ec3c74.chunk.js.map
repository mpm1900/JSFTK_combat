{"version":3,"sources":["objects/Stats.ts","functions/Entity.ts","objects/Status.ts","objects/Traits.ts","functions/Stats.ts","functions/Traits.ts","functions/Roll.ts","util/getRandom.ts","util/noneg.ts","functions/Party.ts","functions/Skill.ts","objects/skills/smash.ts","objects/skills/shockwave.ts","objects/weapons/blacksmiths_hammer.ts","objects/skills/shot.ts","objects/skills/snipe_shot.ts","objects/weapons/hunting_bow.ts","objects/skills/surge.ts","objects/skills/area_blast.ts","objects/Weapon.ts","objects/weapons/scholars_book.ts","objects/skills/taunt.ts","objects/Armor.ts","objects/armor/simple_iron_shield.ts","functions/Character.ts","functions/Weapon.ts","state/party/index.ts","state/util.ts","hooks/useActions.ts","contexts/PartyContext/index.tsx","types/CombatQueue.ts","contexts/CombatContext/index.tsx","functions/AI.ts","components/Hover/index.tsx","elements/box.tsx","elements/flex.ts","elements/monospace.tsx","contexts/CombatLogContext/util.tsx","contexts/CombatLogContext/index.tsx","components/Tooltip/index.tsx","components/Gauge/index.tsx","components/PartyCharacter/index.tsx","elements/button.tsx","components/CombatPlayerParty/index.tsx","contexts/ModalContext/reducer.ts","contexts/ModalContext/index.tsx","components/RoundResultRenderer/index.tsx","components/CombatActions/index.tsx","components/EnemyCharacter/index.tsx","components/CombatParty/index.tsx","domain/Combat.tsx","App.tsx","serviceWorker.ts","index.tsx","state/index.ts"],"names":["ZERO_STATS","vigor","strength","intelligence","perception","talent","agility","luck","armor","resistance","evasion","healthOffset","criticalChance","damageModifier","CLASS_STARTING_STATS","blacksmith","hunter","scholar","bard","makeEntity","name","id","v4","STATUS_EFFECTS","bleeding","type","canStack","duration","traits","commitChance","committedTraits","damage","stats","burning","frozen","poisoned","ZERO_TRAIT","combineStats","reduce","p","c","combineTraits","getTraitsFromObjects","parents","makeCheck","key","offset","resolveCheck","character","check","statValue","getCharacterStat","roll","DiceRoll","input","result","total","averageTotal","maxTotal","minTotal","output","getChecksProbability","checks","map","getRandom","items","Math","floor","random","length","noneg","value","checkForProcessedParty","party","processed","Error","characters","forEach","checkForProcessedCharacter","makeParty","characterCount","isParty","Array","fill","_","i","cClass","makeCharacter","findCharacterInParty","find","updateCharacter","characterId","updater","processParty","processCharacter","partyId","resolveSkillTarget","target","makeSkillTarget","isCharacter","undefined","e","getSkillDamageRange","skill","source","targets","min","max","rawDamage","weapon","damageResistances","getDamageResistance","round","getSkillDamage","getSkillResults","sourceResult","criticalHitResult","rollResults","rolls","passedCount","filter","r","perfect","results","every","didAllPass","accuracySuccess","accuracy","criticalSuccess","pierce","perfectPierce","splashDamage","perfectSplash","addedStatus","perfectStatus","addedTags","perfectTags","getSourceSkillResult","dodgeResult","dodgeSuccess","blockedDamage","totalDamage","getTargetSkillResult","SMASH","targetType","SHOCKWAVE","BLACKSMITHS_HAMMER","rarity","hands","skills","SHOT","SNIPE_SHOT","HUNTING_BOW","SURGE","AREA_BLAST","CLASS_STARTING_WEAPONS","TAUNT","CLASS_STARTING_ARMOR","getStatusEffects","status","getSkills","getTraits","combinedTrait","processWeapon","statusEffects","startingHealth","class","health","level","dead","characterClass","tags","decrementStatusDurations","tag","addMultipleStatus","statusTypes","char","statusType","statusEffect","s","addStatus","damageType","actionCreators","payload","actions","updateParty","dispatch","upsertCharacter","deleteCharacter","makeReducer","core","initialState","state","action","coreFn","usePartyActions","deps","useDispatch","useMemo","bindActionCreators","useActions","defaultContextValue","rawParty","findCharacter","findRawCharacter","PartyContext","React","createContext","PartyContextProvider","props","children","useSelector","Provider","consolidateQueue","queue","Number","POSITIVE_INFINITY","Object","keys","getSortedIds","sort","a","b","defaultValue","enemyParty","activeCharacter","selectedSkill","selectedTargets","roundResults","activeRound","isRunning","isDone","onSkillSelect","onTargetsSelect","start","next","commit","CombatContext","useCombatContext","useContext","CombatContextProvider","setEnemyParty","resultCommitter","localUpdate","sourceParty","targetParty","console","log","splashDamageResistance","commitSkillResults","useState","setIsRunning","setIsDone","makeCombatQueue","setQueue","roundId","setRoundId","setRoundResults","setActiveRound","selectedTarget","setSelectedTarget","setSelectedSkill","getFirst","useCallback","parties","updatedCharacters","validateQueue","shiftQueue","useEffect","playerParty","targetedCharacters","t","includes","getSkillTargetOptions","getAIAction","execEnemyTurn","alert","Hover","delay","internalHovering","setInternalHovering","isHovering","setIsHovering","guid","setGuid","useLayoutEffect","setTimeout","onMouseEnter","preventDefault","stopPropagation","onMouseLeave","BoxContainer","style","substyle","Element","rest","border","display","boxSizing","background","padding","color","flex","boxShadow","FlexContainer","styled","flexDirection","$direction","$full","FullContainer","Monospace","fontFamily","fontWeight","Monodiv","Span","text","SkillSpan","NameSpanBuilder","isUserParty","isEnemyParty","CombatLogContext","combatLog","CombatLogContextProvider","setCombatLog","deadLog","setDeadLog","NameSpan","line","dLog","latestRounds","baseRound","subTarget","Tooltip","direction","tagName","arrow","HoverToolTip","isOpen","Gauge","height","percentage","content","borderLeft","position","borderColor","left","maxWidth","minWidth","textShadow","backgroundColor","alignItems","justifyContent","transition","lineHeight","right","top","fontSize","overflow","ResourceE","textAlign","Wrapper","$selected","$active","$hoverable","margin","$isHovering","PartyCharacter","hoverable","selected","onClick","opacity","borderWidth","cursor","width","borderRight","alt","src","paddingLeft","borderBottom","Button","outline","ConfirmButton","withStyle","borderTop","CombatPlayerParty","contents","callback","blocking","OPEN","CLOSE","reducer","coreFunction","ModalContext","open","close","setBlocking","setPayload","setContents","setCallback","setStyle","useModalContext","getContextValue","ModalContextProvider","reducerValue","useReducer","context","onRequestClose","bottom","overlay","RoundResultRenderer","RoundResult","rounds","label","currentIndex","setCurrentIndex","updateRoundResult","index","marginRight","CombatActions","perfectChance","accuracyChance","marginTop","EnemyCharacter","CombatParty","Combat","overflowY","App","rawEnemyParty","setRawEnemyParty","Boolean","window","location","hostname","match","engine","Styletron","store","createStore","combineReducers","compose","applyMiddleware","thunk","ReactDOM","render","StrictMode","debug","debugAfterHydration","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.29ec3c74.chunk.js","sourcesContent":["import { StatsT, CharacterClassT } from '../types'\r\n\r\nexport const ZERO_STATS: StatsT = {\r\n  vigor: 0,\r\n  strength: 0,\r\n  intelligence: 0,\r\n  perception: 0,\r\n  talent: 0,\r\n\r\n  agility: 0,\r\n  luck: 0,\r\n  armor: 0,\r\n  resistance: 0,\r\n  evasion: 0,\r\n\r\n  healthOffset: 0,\r\n  criticalChance: 0,\r\n  damageModifier: 0,\r\n}\r\n\r\nexport const CLASS_STARTING_STATS: Record<CharacterClassT, StatsT> = {\r\n  blacksmith: {\r\n    strength: 76,\r\n    vigor: 80,\r\n    intelligence: 40,\r\n    perception: 52,\r\n    talent: 72,\r\n    agility: 56,\r\n    luck: 50,\r\n    armor: 2,\r\n    resistance: 0,\r\n    evasion: 7,\r\n    healthOffset: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n  },\r\n  hunter: {\r\n    strength: 52,\r\n    vigor: 66,\r\n    intelligence: 46,\r\n    perception: 78,\r\n    talent: 64,\r\n    agility: 78,\r\n    luck: 50,\r\n    armor: 1,\r\n    resistance: 0,\r\n    evasion: 20,\r\n    healthOffset: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n  },\r\n  scholar: {\r\n    strength: 42,\r\n    vigor: 60,\r\n    intelligence: 78,\r\n    perception: 66,\r\n    talent: 70,\r\n    agility: 70,\r\n    luck: 50,\r\n    armor: 0,\r\n    resistance: 1,\r\n    evasion: 13,\r\n    healthOffset: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n  },\r\n  bard: {\r\n    strength: 44,\r\n    vigor: 50,\r\n    intelligence: 70,\r\n    perception: 68,\r\n    talent: 78,\r\n    agility: 68,\r\n    luck: 50,\r\n    armor: 0,\r\n    resistance: 1,\r\n    evasion: 11,\r\n    healthOffset: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n  },\r\n}\r\n","import { v4 } from 'uuid'\r\n\r\nexport const makeEntity = (name: string = '') => ({\r\n  id: v4(),\r\n  name,\r\n})\r\n","import { StatusTypeT, StatusT } from '../types'\r\nimport { makeEntity } from '../functions/Entity'\r\nimport { ZERO_STATS } from './Stats'\r\n\r\nconst STATUS_DURATION = 5\r\nexport const STATUS_EFFECTS: Record<StatusTypeT, StatusT> = {\r\n  bleeding: {\r\n    ...makeEntity('Bleeding'),\r\n    type: 'bleeding',\r\n    canStack: false,\r\n    duration: STATUS_DURATION,\r\n    traits: [],\r\n    commitChance: 50,\r\n    committedTraits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          healthOffset: -10,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  burning: {\r\n    ...makeEntity('Burning'),\r\n    type: 'burning',\r\n    canStack: false,\r\n    duration: STATUS_DURATION,\r\n    traits: [],\r\n    commitChance: 100,\r\n    committedTraits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          healthOffset: -10,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  frozen: {\r\n    ...makeEntity('Frozen'),\r\n    type: 'frozen',\r\n    canStack: false,\r\n    duration: STATUS_DURATION,\r\n    traits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          damageModifier: 0.25,\r\n        },\r\n      },\r\n    ],\r\n    commitChance: 0,\r\n    committedTraits: [],\r\n  },\r\n  poisoned: {\r\n    ...makeEntity('Poisoned'),\r\n    type: 'poisoned',\r\n    canStack: true,\r\n    duration: STATUS_DURATION,\r\n    traits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          strength: -5,\r\n          intelligence: -5,\r\n          perception: -5,\r\n          talent: -5,\r\n        },\r\n      },\r\n    ],\r\n    commitChance: 100,\r\n    committedTraits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          healthOffset: -5,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n}\r\n","import { TraitT } from '../types'\r\nimport { ZERO_STATS } from './Stats'\r\n\r\nexport const ZERO_TRAIT: TraitT = {\r\n  damage: 0,\r\n  duration: -1,\r\n  stats: ZERO_STATS,\r\n}\r\n","import { StatsT } from '../types'\r\nimport { ZERO_STATS } from '../objects'\r\n\r\nexport const combineStats = (...stats: StatsT[]): StatsT => {\r\n  return stats.reduce(\r\n    (p, c) => ({\r\n      vigor: p.strength + c.strength,\r\n      strength: p.strength + c.strength,\r\n      intelligence: p.intelligence + c.intelligence,\r\n      perception: p.perception + c.perception,\r\n      talent: p.talent + c.talent,\r\n      agility: p.agility + c.agility,\r\n      luck: p.luck + c.luck,\r\n      armor: p.armor + c.armor,\r\n      resistance: p.resistance + c.resistance,\r\n      evasion: p.evasion + c.evasion,\r\n      criticalChance: p.criticalChance + c.criticalChance,\r\n      damageModifier: p.damageModifier + c.damageModifier,\r\n      healthOffset: p.healthOffset + c.healthOffset,\r\n    }),\r\n    ZERO_STATS,\r\n  )\r\n}\r\n","import { TraitT, HasTraitsT, HasCommittedTraits } from '../types'\r\nimport { combineStats } from './Stats'\r\nimport { ZERO_TRAIT } from '../objects'\r\n\r\nexport const combineTraits = (...traits: TraitT[]): TraitT => {\r\n  return traits.reduce(\r\n    (p, c) => ({\r\n      damage: p.damage + c.damage,\r\n      stats: combineStats(p.stats, c.stats),\r\n      duration: -1,\r\n    }),\r\n    ZERO_TRAIT,\r\n  )\r\n}\r\n\r\nexport const getTraitsFromObjects = (parents: HasTraitsT[]) => {\r\n  return parents.reduce((p, c) => {\r\n    return [...p, ...c.traits]\r\n  }, [] as TraitT[])\r\n}\r\nexport const getCommittedTraitsFromObjects = (\r\n  parents: HasCommittedTraits[],\r\n) => {\r\n  return parents.reduce((p, c) => {\r\n    return [...p, ...c.committedTraits]\r\n  }, [] as TraitT[])\r\n}\r\n","import { DiceRoll } from 'rpg-dice-roller'\r\nimport { ProcessedCharacterT, CheckResultT, CheckT, StatsT } from '../types'\r\nimport { getCharacterStat } from './Character'\r\n\r\nexport const makeCheck = (key: keyof StatsT, offset?: number): CheckT => ({\r\n  key,\r\n  offset,\r\n})\r\n\r\nexport const resolveCheck = (\r\n  character: ProcessedCharacterT,\r\n  check: CheckT,\r\n): CheckResultT => {\r\n  const statValue = getCharacterStat(character, check)\r\n  const roll = new DiceRoll('1d100')\r\n  return {\r\n    input: check,\r\n    result: roll.total <= statValue,\r\n    total: roll.total,\r\n    averageTotal: roll.averageTotal,\r\n    maxTotal: roll.maxTotal,\r\n    minTotal: roll.minTotal,\r\n    output: roll.output,\r\n  }\r\n}\r\n\r\nexport const getChecksProbability = (\r\n  character: ProcessedCharacterT,\r\n  checks: CheckT[],\r\n): number => {\r\n  const statValues = checks.map((check) => getCharacterStat(character, check))\r\n  const result = statValues.reduce((p, c) => {\r\n    return p * (c / 100)\r\n  }, 1)\r\n  return result\r\n}\r\n\r\nexport const getPassedCount = (results: CheckResultT[]): number =>\r\n  results.filter((r) => r.result).length\r\n\r\nexport const didAllPass = (results: CheckResultT[]): boolean =>\r\n  results.every((r) => r.result)\r\n","export const getRandom = <T>(items: T[]) =>\r\n  items[Math.floor(Math.random() * items.length)]\r\n","export const noneg = (value: number) => (value > 0 ? value : 0)\r\n","import {\r\n  CharacterT,\r\n  PartyT,\r\n  ProcessedPartyT,\r\n  EntityT,\r\n  CharacterClassT,\r\n} from '../types'\r\nimport {\r\n  checkForProcessedCharacter,\r\n  processCharacter,\r\n  makeCharacter,\r\n} from './Character'\r\nimport { makeEntity } from './Entity'\r\nimport { getRandom } from '../util'\r\n\r\nexport const isParty = (e: EntityT) => e && (e as PartyT).isParty\r\n\r\nexport const checkForProcessedParty = (party: PartyT) => {\r\n  if ((party as ProcessedPartyT).processed) {\r\n    throw new Error('No Processed Parties Allowed')\r\n  }\r\n  party.characters.forEach((character) => {\r\n    checkForProcessedCharacter(character)\r\n  })\r\n}\r\n\r\nexport const makeParty = (characterCount: number = 0): PartyT => {\r\n  return {\r\n    ...makeEntity(),\r\n    isParty: true,\r\n    characters: Array(characterCount)\r\n      .fill(null)\r\n      .map((_, i) => {\r\n        const cClass = getRandom<CharacterClassT>([\r\n          'blacksmith',\r\n          'hunter',\r\n          'scholar',\r\n        ])\r\n        return {\r\n          ...makeCharacter(cClass),\r\n          name: `${cClass} ${i + 1}`,\r\n        }\r\n      }),\r\n  }\r\n}\r\n\r\nexport const findCharacterInParty = <\r\n  T extends PartyT = PartyT,\r\n  R extends CharacterT = CharacterT\r\n>(\r\n  party: T,\r\n  id: string,\r\n): R | undefined => {\r\n  return (party.characters as R[]).find((c) => c.id === id)\r\n}\r\n\r\nexport const updateCharacter = (\r\n  party: PartyT,\r\n  characterId: string,\r\n  updater: (character: CharacterT) => CharacterT,\r\n): PartyT => {\r\n  checkForProcessedParty(party)\r\n  return {\r\n    ...party,\r\n    characters: party.characters.map((c) =>\r\n      c.id === characterId ? updater(c) : c,\r\n    ),\r\n  }\r\n}\r\n\r\nexport const processParty = (party: PartyT): ProcessedPartyT => {\r\n  return {\r\n    ...party,\r\n    processed: true,\r\n    characters: party.characters.map((c) => ({\r\n      ...processCharacter(c),\r\n      partyId: party.id,\r\n    })),\r\n  }\r\n}\r\n","import {\r\n  ProcessedCharacterT,\r\n  SourceSkillResultT,\r\n  HasSkillsT,\r\n  SkillT,\r\n  DamageT,\r\n  TargetSkillResultT,\r\n  CharacterT,\r\n  PartyT,\r\n  SkillTargetT,\r\n  ProcessedPartyT,\r\n  TargetTypeT,\r\n} from '../types'\r\nimport { resolveCheck, getPassedCount, didAllPass } from './Roll'\r\nimport {\r\n  getDamageResistance,\r\n  isCharacter,\r\n  processCharacter,\r\n  addMultipleStatus,\r\n  decrementStatusDurations,\r\n} from './Character'\r\nimport { updateCharacter, isParty } from './Party'\r\n\r\nexport const getSkillsFromObjects = (parents: HasSkillsT[]) => {\r\n  return parents.reduce((p, c) => {\r\n    return [...p, ...c.skills]\r\n  }, [] as SkillT[])\r\n}\r\n\r\nexport const resolveSkillTarget = (\r\n  target: SkillTargetT,\r\n): ProcessedCharacterT[] => {\r\n  switch (target.type) {\r\n    case 'single':\r\n      return target.character ? [target.character] : []\r\n    case 'ally':\r\n      return target.character ? [target.character] : []\r\n    case 'self':\r\n      return target.character ? [target.character] : []\r\n    case 'party':\r\n      return target.party?.characters || []\r\n    case 'group':\r\n      return target.party?.characters || []\r\n    default:\r\n      return []\r\n  }\r\n}\r\n\r\nexport const makeSkillTarget = (\r\n  type: TargetTypeT,\r\n  target: ProcessedCharacterT | ProcessedPartyT,\r\n): SkillTargetT => {\r\n  return {\r\n    type,\r\n    character: isCharacter(target)\r\n      ? (target as ProcessedCharacterT)\r\n      : undefined,\r\n    party: isParty(target) ? (target as ProcessedPartyT) : undefined,\r\n  }\r\n}\r\n\r\nexport const getSourceSkillResult = (\r\n  source: ProcessedCharacterT,\r\n  skill: SkillT,\r\n): SourceSkillResultT => {\r\n  const criticalHitResult = resolveCheck(source, {\r\n    offset: source.stats.criticalChance,\r\n  })\r\n  const rollResults = skill.rolls.map((check) => resolveCheck(source, check))\r\n  const passedCount = criticalHitResult.result\r\n    ? skill.rolls.length\r\n    : getPassedCount(rollResults)\r\n  const perfect = criticalHitResult.result ? true : didAllPass(rollResults)\r\n  const accuracySuccess =\r\n    criticalHitResult.result ||\r\n    perfect ||\r\n    (skill.accuracy !== undefined &&\r\n      resolveCheck(source, skill.accuracy).result)\r\n  const rawDamage: DamageT = {\r\n    damage:\r\n      accuracySuccess && skill.damage\r\n        ? source.weapon.damage.damage *\r\n          (1 + skill.damageModifier + source.stats.damageModifier)\r\n        : 0,\r\n    type: source.weapon.damage.type,\r\n  }\r\n  return {\r\n    rollResults,\r\n    skill,\r\n    source,\r\n    accuracySuccess,\r\n    criticalSuccess: criticalHitResult.result,\r\n    passedCount,\r\n    perfect,\r\n    rawDamage,\r\n    pierce: (perfect && skill.perfectPierce) || criticalHitResult.result,\r\n    splashDamage:\r\n      skill.perfectSplash && perfect\r\n        ? { type: rawDamage.type, damage: Math.floor(rawDamage.damage / 2) }\r\n        : { type: rawDamage.type, damage: 0 },\r\n    addedStatus: perfect ? skill.perfectStatus : [],\r\n    addedTags: perfect ? skill.perfectTags : [],\r\n  }\r\n}\r\n\r\nexport const getTargetSkillResult = (\r\n  target: ProcessedCharacterT,\r\n  sourceResult: SourceSkillResultT,\r\n): TargetSkillResultT => {\r\n  if (sourceResult.accuracySuccess) {\r\n    const dodgeResult = resolveCheck(target, { key: 'evasion' })\r\n    const damageResistances = sourceResult.pierce\r\n      ? 0\r\n      : getDamageResistance(target, sourceResult.rawDamage.type)\r\n    return {\r\n      ...sourceResult,\r\n      target,\r\n      dodgeSuccess: sourceResult.criticalSuccess ? false : dodgeResult.result,\r\n      blockedDamage: {\r\n        type: sourceResult.rawDamage.type,\r\n        damage: sourceResult.pierce ? 0 : damageResistances,\r\n      },\r\n      totalDamage: {\r\n        type: sourceResult.rawDamage.type,\r\n        damage: Math.round(sourceResult.rawDamage.damage - damageResistances),\r\n      },\r\n    }\r\n  } else {\r\n    return {\r\n      ...sourceResult,\r\n      target,\r\n      dodgeSuccess: false,\r\n      blockedDamage: sourceResult.rawDamage,\r\n      totalDamage: sourceResult.rawDamage,\r\n    }\r\n  }\r\n}\r\n\r\nexport const getSkillDamage = (\r\n  skill: SkillT,\r\n  source: ProcessedCharacterT,\r\n  target: ProcessedCharacterT,\r\n): DamageT => {\r\n  const rawDamage: DamageT = {\r\n    type: source.weapon.damage.type,\r\n    damage:\r\n      source.weapon.damage.damage *\r\n      (1 + skill.damageModifier + source.stats.damageModifier),\r\n  }\r\n  const damageResistances = getDamageResistance(target, rawDamage.type)\r\n  return {\r\n    type: rawDamage.type,\r\n    damage: Math.round(rawDamage.damage - damageResistances),\r\n  }\r\n}\r\nexport const getSkillDamageRange = (\r\n  skill: SkillT,\r\n  source: ProcessedCharacterT,\r\n  targets: ProcessedCharacterT[],\r\n) => {\r\n  let min: number | undefined = undefined\r\n  let max: number | undefined = undefined\r\n  targets.forEach((target) => {\r\n    const damage = getSkillDamage(skill, source, target).damage\r\n    if (max === undefined || damage > max) max = damage\r\n    if (min === undefined || damage < min) min = damage\r\n  })\r\n  if (min === max) return `${max || 0}`\r\n  return `${min}-${max}`\r\n}\r\n\r\nexport const getSkillResults = (\r\n  skill: SkillT,\r\n  source: ProcessedCharacterT,\r\n  targets: ProcessedCharacterT[],\r\n): TargetSkillResultT[] => {\r\n  const sourceResult = getSourceSkillResult(source, skill)\r\n  return targets.map((target) => getTargetSkillResult(target, sourceResult))\r\n}\r\n\r\ninterface CommitSkillResultsT {\r\n  party: PartyT\r\n  enemyParty: PartyT\r\n}\r\nexport const commitSkillResults = (party: PartyT, enemyParty: PartyT) => (\r\n  results: TargetSkillResultT[],\r\n): CommitSkillResultsT => {\r\n  const localUpdate = (\r\n    p: PartyT,\r\n    id: string,\r\n    updater: (c: CharacterT) => CharacterT,\r\n  ) => {\r\n    return updateCharacter(p, id, updater)\r\n  }\r\n  results.forEach((result) => {\r\n    const { source, target } = result\r\n    let sourceParty = party.id === source.partyId ? party : enemyParty\r\n    let targetParty = party.id === source.partyId ? enemyParty : party\r\n    if (\r\n      result.skill.targetType === 'self' ||\r\n      result.skill.targetType === 'ally' ||\r\n      result.skill.targetType === 'party'\r\n    ) {\r\n      ;[sourceParty, targetParty] = [targetParty, sourceParty]\r\n    }\r\n    targetParty = localUpdate(targetParty, result.target.id, (c) => {\r\n      console.log(result.addedTags)\r\n      return addMultipleStatus(\r\n        {\r\n          ...c,\r\n          stats: {\r\n            ...c.stats,\r\n            healthOffset: c.stats.healthOffset + result.totalDamage.damage,\r\n          },\r\n          tags: [...c.tags, ...result.addedTags],\r\n        },\r\n        result.addedStatus,\r\n      )\r\n    })\r\n\r\n    if (result.splashDamage.damage > 0) {\r\n      targetParty.characters\r\n        .filter((c) => c.id !== result.target.id)\r\n        .forEach((character) => {\r\n          targetParty = localUpdate(targetParty, character.id, (c) => {\r\n            const splashDamageResistance = getDamageResistance(\r\n              processCharacter(character),\r\n              result.splashDamage.type,\r\n            )\r\n            return {\r\n              ...c,\r\n              stats: {\r\n                ...c.stats,\r\n                healthOffset:\r\n                  c.stats.healthOffset +\r\n                  (result.splashDamage.damage - splashDamageResistance),\r\n              },\r\n            }\r\n          })\r\n        })\r\n    }\r\n    if (sourceParty.id === party.id) {\r\n      party = sourceParty\r\n      enemyParty = targetParty\r\n    } else {\r\n      party = targetParty\r\n      enemyParty = sourceParty\r\n    }\r\n  })\r\n  return {\r\n    party: {\r\n      ...party,\r\n      characters: party.characters.map((c) => decrementStatusDurations(c)),\r\n    },\r\n    enemyParty: {\r\n      ...enemyParty,\r\n      characters: enemyParty.characters.map((c) => decrementStatusDurations(c)),\r\n    },\r\n  }\r\n}\r\n\r\nexport const getSkillTargetOptions = (\r\n  source: ProcessedCharacterT,\r\n  sourceParty: ProcessedPartyT,\r\n  targetParty: ProcessedPartyT,\r\n  skill: SkillT,\r\n): ProcessedCharacterT[] | ProcessedPartyT[] => {\r\n  switch (skill.targetType) {\r\n    case 'single':\r\n      return targetParty.characters.filter((c) => !c.dead)\r\n    case 'ally':\r\n      return sourceParty.characters.filter((c) => !c.dead)\r\n    case 'group':\r\n      return [targetParty]\r\n    case 'party':\r\n      return [sourceParty]\r\n    case 'self':\r\n      return [source]\r\n    default:\r\n      return []\r\n  }\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const SMASH: SkillT = {\r\n  ...makeEntity('Smash'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  rolls: [makeCheck('strength'), makeCheck('strength'), makeCheck('strength')],\r\n  accuracy: makeCheck('strength'),\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n  perfectTags: [],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const SHOCKWAVE: SkillT = {\r\n  ...makeEntity('Shockwave'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  rolls: [\r\n    makeCheck('strength'),\r\n    makeCheck('strength'),\r\n    makeCheck('strength'),\r\n    makeCheck('strength'),\r\n  ],\r\n  accuracy: makeCheck('strength', -10),\r\n  perfectSplash: true,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n  perfectTags: [],\r\n}\r\n","import { WeaponT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { SMASH } from '../skills/smash'\r\nimport { SHOCKWAVE } from '../skills/shockwave'\r\n\r\nexport const BLACKSMITHS_HAMMER: WeaponT = {\r\n  ...makeEntity(`Blacksmith's Hammer`),\r\n  type: 'hammer',\r\n  rarity: 'common',\r\n  hands: 1,\r\n  damage: { type: 'physical', damage: 10 },\r\n  traits: [],\r\n  skills: [SMASH, SHOCKWAVE],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const SHOT: SkillT = {\r\n  ...makeEntity('Shot'),\r\n  // TODO Damage Modifier for flying, etc...\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  rolls: [\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n  ],\r\n  accuracy: makeCheck('perception'),\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n  perfectTags: [],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const SNIPE_SHOT: SkillT = {\r\n  ...makeEntity('Snipe Shot'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  rolls: [\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n  ],\r\n  accuracy: makeCheck('perception', -10),\r\n  perfectSplash: false,\r\n  perfectPierce: true,\r\n  perfectStatus: [],\r\n  perfectTags: [],\r\n}\r\n","import { WeaponT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\nimport { SHOT } from '../skills/shot'\r\nimport { SNIPE_SHOT } from '../skills/snipe_shot'\r\n\r\nexport const HUNTING_BOW: WeaponT = {\r\n  ...makeEntity(`Blacksmith's Hammer`),\r\n  type: 'bow',\r\n  rarity: 'common',\r\n  hands: 2,\r\n  damage: { type: 'physical', damage: 6 },\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        evasion: 3,\r\n      },\r\n      damage: 0,\r\n    },\r\n  ],\r\n  skills: [SHOT, SNIPE_SHOT],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const SURGE: SkillT = {\r\n  ...makeEntity('Surge'),\r\n  damageModifier: -0.2,\r\n  targetType: 'single',\r\n  damage: true,\r\n  rolls: [\r\n    makeCheck('intelligence'),\r\n    makeCheck('intelligence'),\r\n    makeCheck('intelligence'),\r\n  ],\r\n  accuracy: makeCheck('intelligence'),\r\n  perfectSplash: false,\r\n  perfectPierce: true,\r\n  perfectStatus: [],\r\n  perfectTags: [],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const AREA_BLAST: SkillT = {\r\n  ...makeEntity('Area Blast'),\r\n  damageModifier: -0.5,\r\n  targetType: 'group',\r\n  damage: true,\r\n  rolls: [\r\n    makeCheck('intelligence'),\r\n    makeCheck('intelligence'),\r\n    makeCheck('intelligence'),\r\n  ],\r\n  accuracy: makeCheck('intelligence', -5),\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n  perfectTags: [],\r\n}\r\n","import { CharacterClassT, WeaponT } from '../types'\r\nimport { BLACKSMITHS_HAMMER } from './weapons/blacksmiths_hammer'\r\nimport { HUNTING_BOW } from './weapons/hunting_bow'\r\nimport { SCHOLARS_BOOK } from './weapons/scholars_book'\r\n\r\nexport const CLASS_STARTING_WEAPONS: Record<CharacterClassT, WeaponT> = {\r\n  blacksmith: BLACKSMITHS_HAMMER,\r\n  hunter: HUNTING_BOW,\r\n  scholar: SCHOLARS_BOOK,\r\n  bard: BLACKSMITHS_HAMMER,\r\n}\r\n","import { WeaponT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { SURGE } from '../skills/surge'\r\nimport { AREA_BLAST } from '../skills/area_blast'\r\n\r\nexport const SCHOLARS_BOOK: WeaponT = {\r\n  ...makeEntity(`Scholar's Book`),\r\n  type: 'tome',\r\n  rarity: 'common',\r\n  hands: 2,\r\n  damage: { type: 'magic', damage: 6 },\r\n  traits: [],\r\n  skills: [SURGE, AREA_BLAST],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const TAUNT: SkillT = {\r\n  ...makeEntity('Taunt'),\r\n  damageModifier: -1,\r\n  targetType: 'self',\r\n  damage: false,\r\n  rolls: [makeCheck('vigor'), makeCheck('vigor')],\r\n  accuracy: undefined,\r\n  perfectSplash: false,\r\n  perfectPierce: true,\r\n  perfectStatus: [],\r\n  perfectTags: [\r\n    {\r\n      type: 'targeted',\r\n      duration: 5,\r\n    },\r\n  ],\r\n}\r\n","import { CharacterClassT, ArmorT } from '../types'\r\nimport { SIMPLE_IRON_SHIELD } from './armor/simple_iron_shield'\r\n\r\nexport const CLASS_STARTING_ARMOR: Record<CharacterClassT, ArmorT[]> = {\r\n  blacksmith: [SIMPLE_IRON_SHIELD],\r\n  hunter: [],\r\n  scholar: [],\r\n  bard: [],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\nimport { TAUNT } from '../skills/taunt'\r\n\r\nexport const SIMPLE_IRON_SHIELD: ArmorT = {\r\n  ...makeEntity('Simple Iron Shield'),\r\n  rarity: 'common',\r\n  type: 'shield',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        armor: 1,\r\n      },\r\n      damage: 0,\r\n    },\r\n  ],\r\n  skills: [TAUNT],\r\n}\r\n","import {\r\n  CharacterT,\r\n  ProcessedCharacterT,\r\n  StatsT,\r\n  TraitT,\r\n  DamageTypeT,\r\n  StatusTypeT,\r\n  CheckT,\r\n  CharacterClassT,\r\n  EntityT,\r\n} from '../types'\r\nimport { STATUS_EFFECTS, CLASS_STARTING_STATS } from '../objects'\r\nimport {\r\n  combineTraits,\r\n  getTraitsFromObjects,\r\n  getCommittedTraitsFromObjects,\r\n} from './Traits'\r\nimport { processWeapon } from './Weapon'\r\nimport { getSkillsFromObjects } from './Skill'\r\nimport { makeEntity } from './Entity'\r\nimport { combineStats } from './Stats'\r\nimport { CLASS_STARTING_WEAPONS } from '../objects/Weapon'\r\nimport { CLASS_STARTING_ARMOR } from '../objects/Armor'\r\n\r\nexport const checkForProcessedCharacter = (character: CharacterT) => {\r\n  if ((character as ProcessedCharacterT).processed) {\r\n    throw new Error('No Processed Characters Allowed')\r\n  }\r\n}\r\n\r\nexport const isCharacter = (e: EntityT) => e && (e as CharacterT).isCharacter\r\n\r\nexport const getStatusEffects = (character: CharacterT) => {\r\n  return character.status.map((status) => STATUS_EFFECTS[status.type])\r\n}\r\n\r\nexport const getTraits = (character: CharacterT): TraitT[] => {\r\n  checkForProcessedCharacter(character)\r\n  const ret = [\r\n    ...character.traits,\r\n    ...character.weapon.traits,\r\n    ...getTraitsFromObjects(character.armor),\r\n    ...getTraitsFromObjects(getStatusEffects(character)),\r\n  ]\r\n  return ret\r\n}\r\n\r\nexport const getSkills = (character: CharacterT) => {\r\n  checkForProcessedCharacter(character)\r\n  return [...character.weapon.skills, ...getSkillsFromObjects(character.armor)]\r\n}\r\n\r\nexport const processCharacter = (\r\n  character: CharacterT,\r\n): ProcessedCharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  const traits = getTraits(character)\r\n  const combinedTrait = combineTraits(...traits)\r\n  const stats: StatsT = combineStats(character.stats, combinedTrait.stats)\r\n  const weapon = processWeapon(character.weapon)\r\n  const statusEffects = getStatusEffects(character)\r\n  const skills = getSkills(character)\r\n  const startingHealth =\r\n    25 + Math.floor(0.1 * CLASS_STARTING_STATS[character.class].vigor)\r\n  const health = Math.floor(\r\n    startingHealth + character.level + 0.1 * character.level * stats.vigor,\r\n  )\r\n  return {\r\n    ...character,\r\n    health,\r\n    stats,\r\n    weapon,\r\n    statusEffects,\r\n    skills,\r\n    dead: stats.healthOffset >= health,\r\n    processed: true,\r\n  }\r\n}\r\n\r\nexport const makeCharacter = (\r\n  characterClass: CharacterClassT,\r\n  partyId: string = '',\r\n): CharacterT => {\r\n  return {\r\n    ...makeEntity(),\r\n    isCharacter: true,\r\n    partyId,\r\n    level: 1,\r\n    class: characterClass,\r\n    stats: CLASS_STARTING_STATS[characterClass],\r\n    traits: [],\r\n    tags: [],\r\n    weapon: CLASS_STARTING_WEAPONS[characterClass],\r\n    armor: CLASS_STARTING_ARMOR[characterClass],\r\n    status: [],\r\n  }\r\n}\r\n\r\nexport const commitTrait = (\r\n  character: CharacterT,\r\n  trait: TraitT,\r\n): CharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  return {\r\n    ...character,\r\n    stats: combineStats(character.stats, trait.stats),\r\n  }\r\n}\r\nexport const commitStatusEffects = (character: CharacterT): CharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  const statusEffects = getStatusEffects(character)\r\n  const traits = getCommittedTraitsFromObjects(statusEffects)\r\n  return traits.reduce(\r\n    (char, trait) => {\r\n      return commitTrait(char, trait)\r\n    },\r\n    { ...character },\r\n  )\r\n}\r\nexport const decrementStatusDurations = (character: CharacterT): CharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  return {\r\n    ...character,\r\n    tags: character.tags\r\n      .map((tag) => ({ ...tag, duration: tag.duration - 1 }))\r\n      .filter((tag) => tag.duration !== 0),\r\n    status: character.status\r\n      .map((status) => ({ ...status, duration: status.duration - 1 }))\r\n      .filter((status) => status.duration !== 0),\r\n  }\r\n}\r\nexport const addStatus = (character: CharacterT, statusType: StatusTypeT) => {\r\n  const statusEffect = STATUS_EFFECTS[statusType]\r\n  const existingStatus = character.status.find((s) => s.type === statusType)\r\n  if (existingStatus && !statusEffect.canStack) {\r\n    return character\r\n  }\r\n  return {\r\n    ...character,\r\n    status: [\r\n      ...character.status,\r\n      { type: statusType, duration: statusEffect.duration },\r\n    ],\r\n  }\r\n}\r\nexport const addMultipleStatus = (\r\n  character: CharacterT,\r\n  statusTypes: StatusTypeT[],\r\n) => {\r\n  return statusTypes.reduce(\r\n    (char, statusType) => {\r\n      return addStatus(char, statusType)\r\n    },\r\n    { ...character },\r\n  )\r\n}\r\n\r\nexport const getCharacterStat = (character: CharacterT, statValue: CheckT) => {\r\n  const resolvedStatValue = statValue.key ? character.stats[statValue.key] : 0\r\n  return resolvedStatValue + (statValue.offset || 0)\r\n}\r\n\r\nexport const getDamageResistance = (\r\n  character: ProcessedCharacterT,\r\n  damageType: DamageTypeT,\r\n) => {\r\n  if (damageType === 'physical') return character.stats.armor\r\n  if (damageType === 'magic') return character.stats.resistance\r\n  return 0\r\n}\r\n","import { WeaponT, ProcessedWeaponT } from '../types'\r\n\r\nexport const processWeapon = (weapon: WeaponT): ProcessedWeaponT => {\r\n  const damage = weapon.traits.reduce((p, c) => {\r\n    return {\r\n      ...p,\r\n      damage: p.damage + c.damage,\r\n    }\r\n  }, weapon.damage)\r\n  return {\r\n    ...weapon,\r\n    damage,\r\n    processed: true,\r\n  }\r\n}\r\n","import { v4 } from 'uuid'\r\nimport { useSelector } from 'react-redux'\r\nimport { StateCoreT, StateActionT, StateT } from '../types'\r\nimport { PartyT, CharacterT } from '../../types'\r\nimport { Dispatch } from 'redux'\r\nimport { makeReducer } from '../util'\r\nimport { useActions } from '../../hooks/useActions'\r\nimport {\r\n  updateCharacter,\r\n  makeCharacter,\r\n  checkForProcessedParty,\r\n} from '../../functions'\r\n\r\nexport const UPDATE_PARTY = '@actions/parties/set-party'\r\nexport const UPSERT_CHARACTER = '@actions/parties/upsert-character'\r\nexport const DELETE_CHARACTER = '@actions/parties/delete-character'\r\nexport const UPSERT_ITEM = '@actions/parties/upsert-item'\r\nexport const DELETE_ITEM = '@actions/parties/delete-item'\r\nexport const UPSERT_MOD = '@actions/parties/upsert-mod'\r\nexport const DELETE_MOD = '@actions/parties/delete-mod'\r\n\r\nexport const actionCreators = {\r\n  updateParty: (party: PartyT): StateActionT => {\r\n    return {\r\n      type: UPDATE_PARTY,\r\n      payload: {\r\n        party,\r\n      },\r\n    }\r\n  },\r\n  upsertCharacter: (character: CharacterT): StateActionT => {\r\n    return {\r\n      type: UPSERT_CHARACTER,\r\n      payload: {\r\n        character,\r\n      },\r\n    }\r\n  },\r\n  deleteCharacter: (characterId: string): StateActionT => {\r\n    return {\r\n      type: DELETE_CHARACTER,\r\n      payload: {\r\n        characterId,\r\n      },\r\n    }\r\n  },\r\n}\r\n\r\nexport const actions = {\r\n  updateParty: (party: PartyT) => (dispatch: Dispatch) => {\r\n    checkForProcessedParty(party)\r\n    dispatch(actionCreators.updateParty(party))\r\n  },\r\n  upsertCharacter: (character: CharacterT) => (dispatch: Dispatch) => {\r\n    dispatch(actionCreators.upsertCharacter(character))\r\n  },\r\n  deleteCharacter: (characterId: string) => (dispatch: Dispatch) => {\r\n    dispatch(actionCreators.deleteCharacter(characterId))\r\n  },\r\n}\r\n\r\nexport const core: StateCoreT<PartyT> = {\r\n  [UPDATE_PARTY]: (state, action) => {\r\n    return {\r\n      ...action.payload.party,\r\n    }\r\n  },\r\n  [UPSERT_CHARACTER]: (state, action) => {\r\n    return updateCharacter(\r\n      state,\r\n      action.payload.character.id,\r\n      (c) => action.payload.character,\r\n    )\r\n  },\r\n  [DELETE_CHARACTER]: (state, action) => {\r\n    return {\r\n      ...state,\r\n      characters: state.characters.filter(\r\n        (c) => c.id !== action.payload.characterId,\r\n      ),\r\n    }\r\n  },\r\n}\r\n\r\nexport const PLAYER_PARTY_ID = v4()\r\nexport const INITIAL_STATE: PartyT = {\r\n  isParty: true,\r\n  id: PLAYER_PARTY_ID,\r\n  name: 'PlayerParty',\r\n  characters: [\r\n    { ...makeCharacter('blacksmith'), name: 'max m' },\r\n    { ...makeCharacter('hunter'), name: 'katie c' },\r\n    { ...makeCharacter('scholar'), name: 'milo w' },\r\n  ],\r\n}\r\nexport default makeReducer(core, INITIAL_STATE)\r\nexport const useParty = () => useSelector((state: StateT) => state.party)\r\nexport const usePartyActions = () =>\r\n  useActions(actions) as {\r\n    updateParty: (party: PartyT) => void\r\n    upsertCharacter: (character: CharacterT) => void\r\n    deleteCharacter: (characterId: string) => void\r\n  }\r\n","import { StateCoreT, StateReducerT } from './types'\r\n\r\nexport const makeReducer = (\r\n  core: StateCoreT,\r\n  initialState: any,\r\n): StateReducerT => {\r\n  return (state = initialState, action) => {\r\n    const coreFn = core[action.type]\r\n    if (coreFn) return coreFn(state, action)\r\n    return state\r\n  }\r\n}\r\n","import { useMemo } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\n\r\nexport const useActions = (actions: any, deps?: any[]) => {\r\n  const dispatch = useDispatch()\r\n  return useMemo(\r\n    () => bindActionCreators(actions, dispatch),\r\n    deps ? [dispatch, ...deps] : [dispatch],\r\n  )\r\n}\r\n","import React, { useMemo, useContext } from 'react'\r\nimport {\r\n  PartyT,\r\n  ProcessedPartyT,\r\n  CharacterT,\r\n  ProcessedCharacterT,\r\n} from '../../types'\r\nimport { usePartyActions, useParty } from '../../state/party'\r\nimport { findCharacterInParty, processParty, makeParty } from '../../functions'\r\n\r\nexport interface PartyContextT {\r\n  party: ProcessedPartyT\r\n  rawParty: PartyT\r\n  updateParty: (party: PartyT) => void\r\n  upsertCharacter: (character: CharacterT) => void\r\n  deleteCharacter: (characterId: string) => void\r\n  findCharacter: (characterId: string) => ProcessedCharacterT | undefined\r\n  findRawCharacter: (characterId: string) => CharacterT | undefined\r\n}\r\nconst defaultContextValue: PartyContextT = {\r\n  rawParty: makeParty(),\r\n  party: processParty(makeParty()),\r\n  updateParty: (party) => {},\r\n  upsertCharacter: (character) => {},\r\n  deleteCharacter: (characterId) => {},\r\n  findCharacter: (characterId) => undefined,\r\n  findRawCharacter: (characterId) => undefined,\r\n}\r\nexport const PartyContext = React.createContext<PartyContextT>(\r\n  defaultContextValue,\r\n)\r\n\r\nexport interface PartyContextProviderPropsT {\r\n  children: React.ReactNode | React.ReactNode[]\r\n}\r\nexport const PartyContextProvider = (props: PartyContextProviderPropsT) => {\r\n  const { children } = props\r\n  const actions = usePartyActions()\r\n  const rawParty = useParty()\r\n  const party = useMemo(() => processParty(rawParty), [rawParty])\r\n\r\n  const updateParty = (party: PartyT) => {\r\n    actions.updateParty(party)\r\n  }\r\n  const upsertCharacter = (character: CharacterT) => {\r\n    if (!character) return\r\n    if ((character as ProcessedCharacterT).processed) {\r\n      throw new Error('No processed Characters Allowed')\r\n    }\r\n    actions.upsertCharacter(character)\r\n  }\r\n  const deleteCharacter = (characterId: string) => {\r\n    actions.deleteCharacter(characterId)\r\n  }\r\n  const findCharacter = (characterId: string) => {\r\n    return findCharacterInParty<ProcessedPartyT, ProcessedCharacterT>(\r\n      party,\r\n      characterId,\r\n    )\r\n  }\r\n  const findRawCharacter = (characterId: string) => {\r\n    return findCharacterInParty(rawParty, characterId)\r\n  }\r\n\r\n  return (\r\n    <PartyContext.Provider\r\n      value={{\r\n        party,\r\n        rawParty,\r\n        updateParty,\r\n        upsertCharacter,\r\n        deleteCharacter,\r\n        findCharacter,\r\n        findRawCharacter,\r\n      }}\r\n    >\r\n      {children}\r\n    </PartyContext.Provider>\r\n  )\r\n}\r\n\r\nexport const usePartyContext = () => useContext(PartyContext)\r\n","import { ProcessedCharacterT } from './Character'\r\n\r\nexport interface CombatQueueT {\r\n  [characterId: string]: number\r\n}\r\n\r\nexport const makeCombatQueue = (\r\n  characters: ProcessedCharacterT[],\r\n): CombatQueueT => {\r\n  const sortedCharacters = characters.sort(\r\n    (a, b) => b.stats.agility - a.stats.agility,\r\n  )\r\n  return sortedCharacters.reduce(\r\n    (r, c, i) => ({\r\n      ...r,\r\n      [c.id]: i,\r\n    }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const consolidateQueue = (queue: CombatQueueT): CombatQueueT => {\r\n  let min = Number.POSITIVE_INFINITY\r\n  Object.keys(queue).forEach((id) => {\r\n    if (min > queue[id]) min = queue[id]\r\n  })\r\n  return Object.keys(queue).reduce(\r\n    (r, id) => ({\r\n      ...r,\r\n      [id]: queue[id] - min,\r\n    }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const shiftQueue = (\r\n  queue: CombatQueueT,\r\n  character: ProcessedCharacterT,\r\n): CombatQueueT => {\r\n  const ret = consolidateQueue({\r\n    ...queue,\r\n    [character.id]: 100 - character.stats.agility,\r\n  })\r\n  return ret\r\n}\r\n\r\nexport const getFirst = (queue: CombatQueueT): string => {\r\n  let min = Number.POSITIVE_INFINITY\r\n  let key = Object.keys(queue)[0]\r\n  Object.keys(queue).forEach((id) => {\r\n    if (min > queue[id]) {\r\n      min = queue[id]\r\n      key = id\r\n    }\r\n  })\r\n  return key\r\n}\r\n\r\nexport const removeFromQueue = (\r\n  queue: CombatQueueT,\r\n  id: string,\r\n): CombatQueueT => {\r\n  return consolidateQueue(\r\n    Object.keys(queue)\r\n      .filter((key) => key !== id)\r\n      .reduce(\r\n        (r, id) => ({\r\n          ...r,\r\n          [id]: queue[id],\r\n        }),\r\n        {},\r\n      ),\r\n  )\r\n}\r\n\r\nexport const validateQueue = (\r\n  queue: CombatQueueT,\r\n  characters: ProcessedCharacterT[],\r\n): CombatQueueT => {\r\n  return consolidateQueue(\r\n    characters.reduce((r, c) => {\r\n      return c.dead ? r : { ...r, [c.id]: queue[c.id] }\r\n    }, {}),\r\n  )\r\n}\r\n\r\nexport const getSortedIds = (queue: CombatQueueT): string[] => {\r\n  return Object.keys(queue).sort((a, b) => queue[a] - queue[b])\r\n}\r\n","import React, {\r\n  createContext,\r\n  useContext,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useCallback,\r\n} from 'react'\r\nimport {\r\n  ProcessedPartyT,\r\n  PartyT,\r\n  SkillT,\r\n  ProcessedCharacterT,\r\n  TargetSkillResultT,\r\n  SkillTargetT,\r\n} from '../../types'\r\nimport {\r\n  makeParty,\r\n  processParty,\r\n  getSkillResults,\r\n  commitSkillResults,\r\n  processCharacter,\r\n  makeCharacter,\r\n  resolveSkillTarget,\r\n  makeSkillTarget,\r\n} from '../../functions'\r\nimport { usePartyContext } from '../PartyContext'\r\nimport { getRandom } from '../../util'\r\nimport {\r\n  CombatQueueT,\r\n  makeCombatQueue,\r\n  getFirst,\r\n  shiftQueue,\r\n  getSortedIds,\r\n  validateQueue,\r\n} from '../../types/CombatQueue'\r\nimport { getAIAction } from '../../functions/AI'\r\nimport { v4 } from 'uuid'\r\n\r\nexport interface CombatContextT {\r\n  party: ProcessedPartyT\r\n  enemyParty: ProcessedPartyT\r\n  activeCharacter: ProcessedCharacterT\r\n  queue: ProcessedCharacterT[]\r\n  selectedSkill: SkillT | undefined\r\n  selectedTargets: ProcessedCharacterT[]\r\n  roundResults: TargetSkillResultT[][]\r\n  activeRound: TargetSkillResultT[] | undefined\r\n  isRunning: boolean\r\n  isDone: boolean\r\n  onSkillSelect: (skill: SkillT) => void\r\n  onTargetsSelect: (target: ProcessedCharacterT | ProcessedPartyT) => void\r\n  start: () => void\r\n  next: () => void\r\n  commit: () => void\r\n}\r\nconst defaultValue: CombatContextT = {\r\n  party: processParty(makeParty()),\r\n  enemyParty: processParty(makeParty()),\r\n  activeCharacter: processCharacter(makeCharacter('blacksmith')),\r\n  queue: [],\r\n  selectedSkill: undefined,\r\n  selectedTargets: [],\r\n  roundResults: [],\r\n  activeRound: undefined,\r\n  isRunning: false,\r\n  isDone: false,\r\n  onSkillSelect: (skill: SkillT) => {},\r\n  onTargetsSelect: (target: ProcessedCharacterT | ProcessedPartyT) => {},\r\n  start: () => {},\r\n  next: () => {},\r\n  commit: () => {},\r\n}\r\nexport const CombatContext = createContext<CombatContextT>(defaultValue)\r\nexport const useCombatContext = () => useContext(CombatContext)\r\n\r\nexport interface CombatContextProviderPropsT {\r\n  children: JSX.Element\r\n  enemyParty: PartyT\r\n  setEnemyParty: (party: PartyT) => void\r\n}\r\nexport const CombatContextProvider = (props: CombatContextProviderPropsT) => {\r\n  const { children, setEnemyParty } = props\r\n  const { party, rawParty, updateParty } = usePartyContext()\r\n  const resultCommitter = useMemo(\r\n    () => commitSkillResults(rawParty, props.enemyParty),\r\n    [rawParty, props.enemyParty],\r\n  )\r\n  const enemyParty = useMemo(() => processParty(props.enemyParty), [\r\n    props.enemyParty,\r\n  ])\r\n  const [isRunning, setIsRunning] = useState<boolean>(false)\r\n  const [isDone, setIsDone] = useState<boolean>(false)\r\n  const characters = useMemo(\r\n    () => [...party.characters, ...enemyParty.characters],\r\n    [party, enemyParty],\r\n  )\r\n  const [queue, setQueue] = useState<CombatQueueT>(\r\n    makeCombatQueue([...party.characters, ...enemyParty.characters]),\r\n  )\r\n  const [roundId, setRoundId] = useState<string>(v4())\r\n  const [roundResults, setRoundResults] = useState<TargetSkillResultT[][]>([])\r\n  const [activeRound, setActiveRound] = useState<\r\n    TargetSkillResultT[] | undefined\r\n  >()\r\n  const [selectedTarget, setSelectedTarget] = useState<\r\n    SkillTargetT | undefined\r\n  >()\r\n  const [selectedSkill, setSelectedSkill] = useState<SkillT | undefined>()\r\n  const activeCharacter = useMemo(\r\n    () =>\r\n      characters.find(\r\n        (c) => !c.dead && c.id === getFirst(queue),\r\n      ) as ProcessedCharacterT,\r\n    [queue, characters],\r\n  )\r\n\r\n  const start = useCallback(() => setIsRunning(true), [])\r\n\r\n  const next = () => {\r\n    if (!selectedSkill || !selectedTarget) return\r\n    const results = getSkillResults(\r\n      selectedSkill,\r\n      activeCharacter,\r\n      resolveSkillTarget(selectedTarget).filter((c) => !c.dead),\r\n    )\r\n    setActiveRound(results)\r\n    setSelectedSkill(undefined)\r\n    setSelectedTarget(undefined)\r\n  }\r\n\r\n  const onSkillSelect = (skill: SkillT) => {\r\n    setSelectedSkill(skill)\r\n    if (skill.targetType !== selectedSkill?.targetType) {\r\n      setSelectedTarget(undefined)\r\n    }\r\n  }\r\n\r\n  const onTargetsSelect = (target: ProcessedCharacterT | ProcessedPartyT) => {\r\n    if (!selectedSkill) return\r\n    setSelectedTarget(makeSkillTarget(selectedSkill.targetType, target))\r\n  }\r\n\r\n  const commit = useCallback(() => {\r\n    if (!activeRound) return\r\n    const parties = resultCommitter(activeRound)\r\n    setEnemyParty(parties.enemyParty)\r\n    updateParty(parties.party)\r\n    setRoundResults((r) => [...r, activeRound])\r\n    setActiveRound(undefined)\r\n    const updatedCharacters = [\r\n      ...parties.party.characters,\r\n      ...parties.enemyParty.characters,\r\n    ].map((c) => processCharacter(c))\r\n    setQueue(\r\n      validateQueue(\r\n        shiftQueue(queue, activeRound[0].source),\r\n        updatedCharacters,\r\n      ),\r\n    )\r\n    setRoundId(v4())\r\n  }, [activeRound, queue])\r\n\r\n  const execEnemyTurn = (skill: SkillT, target: SkillTargetT) => {\r\n    const results = getSkillResults(\r\n      skill,\r\n      activeCharacter,\r\n      resolveSkillTarget(target),\r\n    )\r\n    setActiveRound(results)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (activeCharacter) {\r\n      if (activeCharacter.partyId === enemyParty.id) {\r\n        const { skill, target } = getAIAction(\r\n          activeCharacter,\r\n          party,\r\n          enemyParty,\r\n        )\r\n\r\n        execEnemyTurn(skill, makeSkillTarget(skill.targetType, target))\r\n      }\r\n    }\r\n  }, [roundId])\r\n\r\n  useEffect(() => {\r\n    if (isDone) return\r\n    if (enemyParty.characters.every((c) => c.dead)) {\r\n      alert('you win')\r\n      setIsDone(true)\r\n      return\r\n    }\r\n    if (party.characters.every((c) => c.dead)) {\r\n      setIsDone(true)\r\n      alert('you lose')\r\n      return\r\n    }\r\n  }, [party, enemyParty])\r\n\r\n  return (\r\n    <CombatContext.Provider\r\n      value={{\r\n        party,\r\n        enemyParty,\r\n        queue: getSortedIds(queue)\r\n          .map(\r\n            (id) => characters.find((c) => c.id === id) as ProcessedCharacterT,\r\n          )\r\n          .filter((c) => c !== undefined)\r\n          .map((c) => ({\r\n            ...c,\r\n            name: `${c.name} (${queue[c.id]})`,\r\n          })),\r\n        activeCharacter,\r\n        activeRound,\r\n        selectedSkill,\r\n        selectedTargets: selectedTarget\r\n          ? resolveSkillTarget(selectedTarget)\r\n          : [],\r\n        roundResults,\r\n        isDone,\r\n        isRunning,\r\n        onSkillSelect,\r\n        onTargetsSelect,\r\n        start,\r\n        next,\r\n        commit,\r\n      }}\r\n    >\r\n      {children}\r\n    </CombatContext.Provider>\r\n  )\r\n}\r\n","import {\r\n  ProcessedCharacterT,\r\n  ProcessedPartyT,\r\n  SkillT,\r\n  SkillTargetT,\r\n} from '../types'\r\nimport { getRandom } from '../util'\r\nimport { getSkillTargetOptions } from './Skill'\r\n\r\nexport interface AIActionT {\r\n  skill: SkillT\r\n  target: ProcessedCharacterT | ProcessedPartyT\r\n}\r\nexport const getAIAction = (\r\n  source: ProcessedCharacterT,\r\n  playerParty: ProcessedPartyT,\r\n  enemyParty: ProcessedPartyT,\r\n): AIActionT => {\r\n  const skill = getRandom(source.skills)\r\n  const targetedCharacters = playerParty.characters.filter((c) =>\r\n    c.tags.map((t) => t.type).includes('targeted'),\r\n  )\r\n  const target =\r\n    skill.targetType === 'single'\r\n      ? targetedCharacters.length > 0\r\n        ? getRandom(targetedCharacters)\r\n        : getRandom(playerParty.characters)\r\n      : getRandom<ProcessedPartyT | ProcessedCharacterT>(\r\n          getSkillTargetOptions(source, enemyParty, playerParty, skill),\r\n        )\r\n\r\n  return { skill, target }\r\n}\r\n","import React, { useState, useLayoutEffect } from 'react'\r\nimport { v4 } from 'uuid'\r\n\r\nexport interface HoverChildrenT {\r\n  isHovering: boolean\r\n}\r\nexport interface HoverPropsT {\r\n  delay?: number\r\n  children: (props: HoverChildrenT) => JSX.Element\r\n}\r\nexport const Hover = (props: HoverPropsT) => {\r\n  const { delay = 500, children } = props\r\n  const [internalHovering, setInternalHovering] = useState<boolean>(false)\r\n  const [isHovering, setIsHovering] = useState<boolean>(false)\r\n  const [guid, setGuid] = useState<string>(v4())\r\n  useLayoutEffect(() => {\r\n    const action = async () => {\r\n      if (internalHovering) {\r\n        setTimeout(() => {\r\n          setGuid(v4())\r\n        }, delay)\r\n      }\r\n    }\r\n    action()\r\n  }, [internalHovering])\r\n  useLayoutEffect(() => {\r\n    if (internalHovering) {\r\n      setIsHovering(true)\r\n    }\r\n  }, [guid])\r\n  const onMouseEnter = (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    setInternalHovering(true)\r\n  }\r\n  const onMouseLeave = (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    setInternalHovering(false)\r\n    setIsHovering(false)\r\n  }\r\n  return (\r\n    <div onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\r\n      {children({ isHovering })}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Hover } from '../components/Hover'\r\n\r\nexport interface BoxContainerPropsT extends React.HTMLProps<HTMLDivElement> {\r\n  substyle?: React.CSSProperties\r\n  tag?: any\r\n  to?: string\r\n}\r\nexport const BoxContainer = (props: BoxContainerPropsT) => {\r\n  const {\r\n    style = {},\r\n    substyle = {},\r\n    children,\r\n    tag: Element = 'div',\r\n    ...rest\r\n  } = props\r\n  return (\r\n    <div\r\n      style={{\r\n        border: '1px solid #000',\r\n        display: 'flex',\r\n        boxSizing: 'border-box',\r\n        ...style,\r\n      }}\r\n    >\r\n      <Element\r\n        style={{\r\n          border: substyle.border || '1px solid #555',\r\n          background: 'linear-gradient(0deg, #222222 0%, #2a2a2a 100%)',\r\n          padding: 10,\r\n          color: '#ccc',\r\n          flex: 1,\r\n          boxShadow: 'inset 0px 0px 2px black',\r\n          ...substyle,\r\n        }}\r\n        {...rest}\r\n      >\r\n        {children}\r\n      </Element>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const SmallBox = (props: BoxContainerPropsT) => (\r\n  <BoxContainer\r\n    {...props}\r\n    style={{\r\n      height: 40,\r\n      width: 40,\r\n      ...props.style,\r\n    }}\r\n    substyle={{\r\n      display: 'flex',\r\n      padding: 0,\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      background: '#111',\r\n      ...props.substyle,\r\n    }}\r\n  >\r\n    {props.children}\r\n  </BoxContainer>\r\n)\r\n\r\nexport const BoxButton = (props: BoxContainerPropsT) => {\r\n  return (\r\n    <Hover delay={0}>\r\n      {({ isHovering }) => (\r\n        <BoxContainer\r\n          {...props}\r\n          tag='button'\r\n          style={{\r\n            margin: 0,\r\n            ...(props.style || {}),\r\n          }}\r\n          substyle={{\r\n            borderColor: isHovering && !props.disabled ? '#999' : '#555',\r\n            padding: '4px',\r\n            cursor: props.disabled ? 'default' : 'pointer',\r\n            background: props.disabled ? '#444' : '#111',\r\n            boxShadow: props.disabled ? 'none' : undefined,\r\n            ...(props.substyle || {}),\r\n          }}\r\n        />\r\n      )}\r\n    </Hover>\r\n  )\r\n}\r\n","import { styled } from 'styletron-react'\r\n\r\nexport interface FlexContainerPropsT {\r\n  $direction?: 'row' | 'column' | 'column-reverse'\r\n  $full?: boolean\r\n}\r\nexport const FlexContainer = styled('div', (props: FlexContainerPropsT) => ({\r\n  display: 'flex',\r\n  flexDirection: props.$direction || 'row',\r\n  flex: props.$full ? 1 : 'default',\r\n}))\r\nexport const FullContainer = styled('div', () => ({\r\n  flex: 1,\r\n}))\r\n","import { styled } from 'styletron-react'\r\n\r\nexport const Monospace = styled('span', () => ({\r\n  fontFamily: 'Inconsolata, monospace',\r\n  fontWeight: 600,\r\n}))\r\nexport const Monodiv = styled('div', () => ({\r\n  fontFamily: 'Inconsolata, monospace',\r\n  fontWeight: 600,\r\n}))\r\n","import React from 'react'\r\nimport { CharacterT, PartyT, SkillT } from '../../types'\r\n\r\nexport const Span = (color: string, text: JSX.Element | string) => (\r\n  <span style={{ color, fontWeight: 'bold' }}>{text}</span>\r\n)\r\nexport const SkillSpan = (skill: SkillT) => Span('plum', skill.name)\r\n\r\nexport const NameSpanBuilder = (party: PartyT, enemyParty: PartyT) => (\r\n  character: CharacterT,\r\n) => {\r\n  const isUserParty = character.partyId === party.id\r\n  const isEnemyParty = character.partyId === enemyParty.id\r\n  const color = isUserParty\r\n    ? 'lightgreen'\r\n    : isEnemyParty\r\n    ? 'lightsalmon'\r\n    : 'white'\r\n\r\n  return Span(color, character.name)\r\n}\r\n","import React, { createContext, useContext, useState, useEffect } from 'react'\r\nimport { useCombatContext } from '../CombatContext'\r\nimport { Monospace } from '../../elements/monospace'\r\nimport { NameSpanBuilder, SkillSpan, Span } from './util'\r\nimport { getDamageResistance } from '../../functions'\r\n\r\nexport interface CombatLogContextT {\r\n  combatLog: JSX.Element[]\r\n}\r\nconst defualtValue: CombatLogContextT = {\r\n  combatLog: [],\r\n}\r\nexport const CombatLogContext = createContext<CombatLogContextT>(defualtValue)\r\nexport const useCombatLogContext = () => useContext(CombatLogContext)\r\n\r\ntype DeadLogT = Record<string, boolean | undefined>\r\n\r\nexport interface CombatLogContextProviderPropsT {\r\n  children: JSX.Element\r\n}\r\nexport const CombatLogContextProvider = (\r\n  props: CombatLogContextProviderPropsT,\r\n) => {\r\n  const { children } = props\r\n  const { roundResults, enemyParty, party } = useCombatContext()\r\n  const [combatLog, setCombatLog] = useState<JSX.Element[]>([])\r\n  const [deadLog, setDeadLog] = useState<DeadLogT>({})\r\n  const NameSpan = NameSpanBuilder(party, enemyParty)\r\n  const log = (line: JSX.Element) =>\r\n    setCombatLog((log) => [\r\n      ...log,\r\n      <Monospace style={{ display: 'inline-block', fontWeight: 'normal' }}>\r\n        {line}\r\n      </Monospace>,\r\n    ])\r\n\r\n  useEffect(() => {\r\n    const characters = [...enemyParty.characters, ...party.characters]\r\n    characters.forEach((character) => {\r\n      if (character.dead && !deadLog[character.id]) {\r\n        setDeadLog((dLog) => ({ ...dLog, [character.id]: true }))\r\n        log(<span>{Span('lightcoral', `${character.name} died.`)}</span>)\r\n      }\r\n    })\r\n  }, [enemyParty, party])\r\n\r\n  useEffect(() => {\r\n    if (roundResults.length === 0) return\r\n    const latestRounds = roundResults[roundResults.length - 1]\r\n    const baseRound = latestRounds[0]\r\n    if (!baseRound) return\r\n    log(\r\n      <span>\r\n        {NameSpan(baseRound.source)} uses {SkillSpan(baseRound.skill)}.\r\n      </span>,\r\n    )\r\n    if (!baseRound.accuracySuccess) {\r\n      {\r\n        log(<span>{baseRound.source.name}'s attack missed.</span>)\r\n      }\r\n    }\r\n    if (baseRound.criticalSuccess) {\r\n      log(<span>{Span('gold', 'Critical Hit!')}</span>)\r\n    }\r\n    if (baseRound.perfect) {\r\n      log(<span>{Span('gold', 'Perfect!')}</span>)\r\n    }\r\n    latestRounds.forEach((round) => {\r\n      const targetParty = party.id === round.source.partyId ? enemyParty : party\r\n      if (round.accuracySuccess) {\r\n        if (round.dodgeSuccess) {\r\n          log(<span>{NameSpan(round.target)} dodged the attack.</span>)\r\n        } else if (round.totalDamage.damage > 0) {\r\n          log(\r\n            <span>\r\n              {SkillSpan(round.skill)} deals{' '}\r\n              {Span('white', `${round.totalDamage.damage} damage`)} to{' '}\r\n              {NameSpan(round.target)}.\r\n            </span>,\r\n          )\r\n        }\r\n        if (round.splashDamage.damage > 0) {\r\n          targetParty.characters\r\n            .filter((c) => c.id !== round.target.id)\r\n            .forEach((subTarget) => {\r\n              const splashDamageResistance = getDamageResistance(\r\n                subTarget,\r\n                round.splashDamage.type,\r\n              )\r\n              log(\r\n                <span>\r\n                  {SkillSpan(round.skill)} deals{' '}\r\n                  {Span(\r\n                    'white',\r\n                    `${\r\n                      round.splashDamage.damage - splashDamageResistance\r\n                    } splash damage`,\r\n                  )}{' '}\r\n                  to {NameSpan(subTarget)}.\r\n                </span>,\r\n              )\r\n            })\r\n        }\r\n      }\r\n    })\r\n  }, [roundResults.length])\r\n\r\n  return (\r\n    <CombatLogContext.Provider value={{ combatLog }}>\r\n      {children}\r\n    </CombatLogContext.Provider>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport BaseTooltip, { TooltipProps } from 'react-tooltip-lite'\r\nimport { Hover } from '../Hover'\r\n\r\ninterface PropsT extends TooltipProps {\r\n  children: JSX.Element\r\n}\r\nexport const Tooltip = (props: PropsT) => {\r\n  const { ...rest } = props\r\n  return (\r\n    <BaseTooltip\r\n      direction='up'\r\n      tagName='div'\r\n      padding='0'\r\n      arrow={false}\r\n      {...rest}\r\n    />\r\n  )\r\n}\r\n\r\nexport const HoverToolTip = (props: PropsT) => {\r\n  return (\r\n    <Hover>\r\n      {({ isHovering }) => <Tooltip {...props} isOpen={isHovering} />}\r\n    </Hover>\r\n  )\r\n}\r\n","import React, { CSSProperties } from 'react'\r\nimport Color from 'color'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\nimport { HoverToolTip } from '../Tooltip'\r\nimport { Monodiv } from '../../elements/monospace'\r\n\r\nexport interface GaugePropsT {\r\n  name?: string\r\n  color: string\r\n  height?: number\r\n  max: number\r\n  value: number\r\n  style?: CSSProperties\r\n  children?: React.ReactNode | React.ReactNode[]\r\n}\r\nexport const Gauge = (props: GaugePropsT) => {\r\n  const { name = '', value, max, color, height = 30, children } = props\r\n  const p = (value / max) * 100\r\n  const percentage = p > 100 ? 100 : p\r\n  return (\r\n    <HoverToolTip\r\n      direction='right'\r\n      content={<BoxContainer>{`${name} (${value} / ${max})`}</BoxContainer>}\r\n    >\r\n      <BoxContainer\r\n        style={{ borderLeft: 'none' }}\r\n        substyle={{\r\n          padding: 0,\r\n          background: '#555',\r\n          height: height - 2,\r\n          position: 'relative',\r\n          borderColor: '1px rgba(255,255,255,0.3)',\r\n        }}\r\n      >\r\n        <FlexContainer\r\n          style={{\r\n            position: 'absolute',\r\n            left: 0,\r\n            boxSizing: 'border-box',\r\n            height: height - 2,\r\n            maxWidth: `${percentage}%`,\r\n            minWidth: `${percentage}%`,\r\n            boxShadow: 'inset 0px 0px 1px rgba(0,0,0,0.5)',\r\n            textShadow: '1px 1px 1px black',\r\n            backgroundColor: color,\r\n            color: 'white',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            transition: 'all 0.5s',\r\n          }}\r\n        ></FlexContainer>\r\n        <FullContainer\r\n          style={{\r\n            position: 'absolute',\r\n            height,\r\n            lineHeight: `${height - 2}px`,\r\n            right: 4,\r\n            top: 0,\r\n            fontSize: 10,\r\n            fontWeight: 'bold',\r\n            overflow: 'hidden',\r\n            textShadow: '0px 0px 3px black',\r\n          }}\r\n        >\r\n          <Monodiv>{children}</Monodiv>\r\n        </FullContainer>\r\n      </BoxContainer>\r\n    </HoverToolTip>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { ProcessedCharacterT } from '../../types'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\nimport { Gauge } from '../Gauge'\r\nimport { noneg } from '../../util'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { Monodiv } from '../../elements/monospace'\r\nimport { styled } from 'styletron-react'\r\n\r\nconst ResourceE = styled(Monodiv, () => ({\r\n  height: 15,\r\n  fontSize: '12px',\r\n  fontWeight: 'bolder',\r\n  padding: '0px 4px',\r\n  lineHeight: '15px',\r\n  flex: 1,\r\n  textAlign: 'center',\r\n  background: '#111',\r\n}))\r\n\r\nexport interface PartyCharacterProps {\r\n  character: ProcessedCharacterT\r\n  activeCharacter: ProcessedCharacterT\r\n  hoverable?: boolean\r\n  selected?: boolean\r\n  isHovering?: boolean\r\n  onClick?: () => void\r\n}\r\nconst Wrapper = styled('div', (props: any) => {\r\n  const { $selected, $active, $hoverable, $isHovering } = props\r\n  const hoverable = $hoverable && !$selected\r\n  return {\r\n    margin: 10,\r\n    boxShadow: $isHovering\r\n      ? '0px 0px 20px black'\r\n      : $selected\r\n      ? '0px 0px 10px black'\r\n      : $active\r\n      ? '0px 0px 20px white'\r\n      : 'none',\r\n    ':hover': {\r\n      boxShadow: hoverable ? '0px 0px 20px black' : undefined,\r\n    },\r\n    transition: 'all 0.1s',\r\n  }\r\n})\r\nexport const PartyCharacter = (props: PartyCharacterProps) => {\r\n  const {\r\n    character,\r\n    activeCharacter,\r\n    hoverable,\r\n    selected,\r\n    isHovering,\r\n    onClick,\r\n  } = props\r\n  const health = character.health - character.stats.healthOffset\r\n  return (\r\n    <Wrapper\r\n      $hoverable={hoverable && !character.dead}\r\n      $active={character.id === activeCharacter.id}\r\n      $selected={selected}\r\n      $isHovering={isHovering}\r\n      style={{\r\n        opacity: character.dead ? 0.5 : 1,\r\n      }}\r\n    >\r\n      <BoxContainer\r\n        onClick={() => (onClick && !character.dead ? onClick() : null)}\r\n        style={{\r\n          borderWidth: 2,\r\n          cursor: onClick ? 'pointer' : 'default',\r\n        }}\r\n        substyle={{ padding: 0, width: 380 }}\r\n      >\r\n        <FlexContainer style={{ border: '2px solid black' }}>\r\n          <FlexContainer style={{ borderRight: '2px solid black' }}>\r\n            <img\r\n              alt='profile'\r\n              height='115'\r\n              width='115'\r\n              src={`https://picsum.photos/seed/${character.name}/115/115`}\r\n              style={{\r\n                height: 115,\r\n                width: 115,\r\n              }}\r\n            />\r\n          </FlexContainer>\r\n          <FlexContainer $full $direction='column'>\r\n            <FlexContainer\r\n              style={{\r\n                padding: '2px 4px',\r\n                paddingLeft: 8,\r\n                background: 'rgba(255,255,255,0.2)',\r\n                borderBottom: '1px solid rgba(255,255,255,0.4)',\r\n              }}\r\n            >\r\n              <span\r\n                style={{\r\n                  fontWeight: 'bolder',\r\n                  textShadow: '0px 0px 2px black',\r\n                }}\r\n              >\r\n                {character.name}\r\n              </span>\r\n            </FlexContainer>\r\n            <FlexContainer>\r\n              <span\r\n                style={{\r\n                  fontWeight: 'bolder',\r\n                  padding: '2px 8px',\r\n                  fontSize: 42,\r\n                  height: 42,\r\n                  lineHeight: '42px',\r\n                  color: '#b55553',\r\n                }}\r\n              >\r\n                {health > 0 ? health : 'Dead'}\r\n              </span>\r\n              <FlexContainer $direction='column' $full>\r\n                <span>Armor {character.stats.armor}</span>\r\n                <span>Resist {character.stats.resistance}</span>\r\n              </FlexContainer>\r\n              <FlexContainer $direction='column' $full>\r\n                <span>\r\n                  {character.status.map((s) => `${s.type} (${s.duration})`)}\r\n                </span>\r\n                <span>\r\n                  {character.tags.map((s) => `${s.type} (${s.duration})`)}\r\n                </span>\r\n              </FlexContainer>\r\n            </FlexContainer>\r\n            <FullContainer />\r\n            <Gauge\r\n              name='Health'\r\n              color='#8f4e4d'\r\n              max={character.health}\r\n              value={noneg(health)}\r\n              height={12}\r\n            >\r\n              {noneg(health)}/{character.health}\r\n            </Gauge>\r\n            <Gauge\r\n              name='XP'\r\n              color='#5e8575'\r\n              max={3300}\r\n              value={1256}\r\n              height={12}\r\n            >\r\n              1256/3300\r\n            </Gauge>\r\n            <FlexContainer>\r\n              <ResourceE>S-{character.stats.strength}</ResourceE>\r\n              <ResourceE>V-{character.stats.vigor}</ResourceE>\r\n              <ResourceE>I-{character.stats.intelligence}</ResourceE>\r\n              <ResourceE>P-{character.stats.perception}</ResourceE>\r\n              <ResourceE>T-{character.stats.talent}</ResourceE>\r\n              <ResourceE>A-{character.stats.agility}</ResourceE>\r\n              <ResourceE>L-{character.stats.luck}</ResourceE>\r\n            </FlexContainer>\r\n          </FlexContainer>\r\n        </FlexContainer>\r\n      </BoxContainer>\r\n    </Wrapper>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { styled, withStyle } from 'styletron-react'\r\n\r\nexport interface ButtonPropsT {\r\n  $direction?: 'up' | 'down'\r\n}\r\nexport const Button = styled('button', (props: ButtonPropsT) => {\r\n  return {\r\n    cursor: 'pointer',\r\n    background: '#222',\r\n    boxShadow: 'inset 0px 0px 3px black',\r\n    textShadow: '0px 1px 3px black',\r\n    border: '1px solid rgba(255,255,255,0.2)',\r\n    color: 'rgba(255,255,255,1)',\r\n    ':hover': {\r\n      border: '1px solid rgba(255,255,255,0.4)',\r\n    },\r\n    ':active': {\r\n      outline: 'none',\r\n      border: '1px solid rgba(255,255,255,0.7)',\r\n    },\r\n    ':focus': {\r\n      outline: 'none',\r\n    },\r\n    padding: '10px 30px',\r\n  }\r\n})\r\n\r\nexport const ConfirmButton = withStyle(Button, (props: ButtonPropsT) => {\r\n  const { $direction } = props\r\n  return {\r\n    background:\r\n      'linear-gradient(0deg, rgba(157,0,0,1) 0%, rgba(110,0,0,1) 100%)',\r\n    fontWeight: 'bold',\r\n    borderTop: $direction === 'down' ? 'none' : undefined,\r\n    borderBottom: $direction === 'up' ? 'none' : undefined,\r\n    padding: '10px 30px',\r\n    boxShadow: 'inset 0px 2px 8px black',\r\n    ':hover': {\r\n      borderTop: $direction === 'down' ? 'none' : undefined,\r\n      borderBottom: $direction === 'up' ? 'none' : undefined,\r\n    },\r\n  }\r\n})\r\n","import React, { useState } from 'react'\r\nimport { ProcessedPartyT } from '../../types'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { PartyCharacter } from '../PartyCharacter'\r\nimport { useCombatContext } from '../../contexts/CombatContext'\r\nimport { ConfirmButton } from '../../elements/button'\r\n\r\nexport interface CombatPartyPlayerPropsT {\r\n  party: ProcessedPartyT\r\n}\r\nexport const CombatPlayerParty = (props: CombatPartyPlayerPropsT) => {\r\n  const { party } = props\r\n  const {\r\n    activeCharacter,\r\n    selectedSkill,\r\n    selectedTargets,\r\n    onTargetsSelect,\r\n    next,\r\n  } = useCombatContext()\r\n\r\n  const [isHovering, setIsHovering] = useState<boolean>(false)\r\n  return (\r\n    <FlexContainer $direction='column'>\r\n      <FlexContainer\r\n        style={{\r\n          justifyContent: 'space-around',\r\n          alignItems: 'flex-end',\r\n          cursor: selectedSkill?.targetType === 'group' ? 'pointer' : 'default',\r\n        }}\r\n        onMouseEnter={() => setIsHovering(true)}\r\n        onMouseLeave={() => setIsHovering(false)}\r\n        onClick={() => {\r\n          if (selectedSkill && selectedSkill.targetType === 'group') {\r\n            onTargetsSelect(party)\r\n          }\r\n        }}\r\n      >\r\n        {party.characters.map((c) => (\r\n          <div>\r\n            {selectedSkill &&\r\n              ((selectedSkill.targetType === 'self' &&\r\n                c.id === activeCharacter.id) ||\r\n                selectedSkill.targetType === 'ally') &&\r\n              selectedTargets.length > 0 &&\r\n              selectedTargets[0].id === c.id && (\r\n                <FlexContainer style={{ justifyContent: 'center' }}>\r\n                  <div style={{ boxShadow: '0px 2px 5px black' }}>\r\n                    <ConfirmButton onClick={() => next()} $direction='up'>\r\n                      Confirm Target\r\n                    </ConfirmButton>\r\n                  </div>\r\n                </FlexContainer>\r\n              )}\r\n            <PartyCharacter\r\n              hoverable={\r\n                selectedSkill !== undefined &&\r\n                ((selectedSkill.targetType === 'self' &&\r\n                  c.id === activeCharacter.id) ||\r\n                  selectedSkill.targetType === 'ally')\r\n              }\r\n              isHovering={isHovering && selectedSkill?.targetType === 'party'}\r\n              selected={\r\n                selectedTargets.find((t) => t.id === c.id) !== undefined\r\n              }\r\n              onClick={() => {\r\n                if (\r\n                  selectedSkill &&\r\n                  ((selectedSkill.targetType === 'self' &&\r\n                    c.id === activeCharacter.id) ||\r\n                    selectedSkill.targetType === 'ally')\r\n                ) {\r\n                  onTargetsSelect(c)\r\n                }\r\n              }}\r\n              activeCharacter={activeCharacter}\r\n              character={c}\r\n            />\r\n          </div>\r\n        ))}\r\n      </FlexContainer>\r\n      {selectedSkill &&\r\n        selectedSkill.targetType === 'party' &&\r\n        selectedTargets.length > 0 && (\r\n          <FlexContainer style={{ justifyContent: 'center' }}>\r\n            <div style={{ boxShadow: '0px 2px 5px black' }}>\r\n              <ConfirmButton\r\n                onClick={() => next()}\r\n                onMouseEnter={() => setIsHovering(true)}\r\n                onMouseLeave={() => setIsHovering(false)}\r\n              >\r\n                Confirm Group Target\r\n              </ConfirmButton>\r\n            </div>\r\n          </FlexContainer>\r\n        )}\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import { CSSProperties } from 'react'\r\n\r\nexport interface ModalContextStateT {\r\n  isOpen: boolean\r\n  contents: JSX.Element | null\r\n  callback: ((payload?: any) => void) | null\r\n  payload: any | null\r\n  blocking: boolean\r\n  style: CSSProperties\r\n}\r\nexport const initialState: ModalContextStateT = {\r\n  isOpen: false,\r\n  contents: null,\r\n  callback: null,\r\n  payload: null,\r\n  blocking: false,\r\n  style: {},\r\n}\r\n\r\nexport const OPEN = 'modalContext/OPEN'\r\nexport const CLOSE = 'modalContext/CLOSE'\r\nexport const SET_CONTENTS = 'modalContext/SET_CONTENTS'\r\nexport const SET_CALLBACK = 'modalContext/SET_CALLBACK'\r\nexport const SET_PAYLOAD = 'modalContext/SET_PAYLOAD'\r\nexport const SET_BLOCKING = 'modalContext/SET_BLOCKING'\r\nexport const SET_STYLE = 'modalContext/SET_STYLE'\r\n\r\nexport const actions = {\r\n  open: (\r\n    contents?: JSX.Element,\r\n    style?: CSSProperties,\r\n    blocking?: boolean,\r\n    callback?: (payload?: any) => void,\r\n  ) => ({\r\n    type: OPEN,\r\n    contents,\r\n    style,\r\n    blocking,\r\n    callback,\r\n  }),\r\n  close: () => ({ type: CLOSE }),\r\n  setPayload: (payload: any) => ({ type: SET_PAYLOAD, payload }),\r\n  setContents: (contents: JSX.Element | null) => ({\r\n    type: SET_CONTENTS,\r\n    contents,\r\n  }),\r\n  setCallback: (callback: (() => void) | null) => ({\r\n    type: SET_CALLBACK,\r\n    callback,\r\n  }),\r\n  setBlocking: (blocking: boolean) => ({ type: SET_BLOCKING, blocking }),\r\n  setStyle: (style: CSSProperties) => ({ type: SET_STYLE, style }),\r\n}\r\n\r\nconst core: Record<\r\n  string,\r\n  (state: ModalContextStateT, action: any) => ModalContextStateT\r\n> = {\r\n  [OPEN]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    isOpen: true,\r\n    contents: action.contents ? action.contents : state.contents,\r\n    style: action.style ? action.style : state.style || {},\r\n    blocking: action.blocking || false,\r\n    callback: action.callback ? action.callback : state.callback,\r\n  }),\r\n  [CLOSE]: (state: ModalContextStateT) => ({\r\n    ...state,\r\n    isOpen: false,\r\n  }),\r\n  [SET_PAYLOAD]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    payload: action.payload,\r\n  }),\r\n  [SET_CONTENTS]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    callback: null,\r\n    payload: null,\r\n    contents: action.contents,\r\n    blocking: false,\r\n    style: {},\r\n  }),\r\n  [SET_CALLBACK]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    callback: action.callback,\r\n  }),\r\n  [SET_BLOCKING]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    blocking: action.blocking,\r\n  }),\r\n  [SET_STYLE]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    style: action.style,\r\n  }),\r\n}\r\n\r\nexport const reducer = (\r\n  state: ModalContextStateT = initialState,\r\n  action: any,\r\n) => {\r\n  const coreFunction = core[action.type]\r\n  return coreFunction ? coreFunction(state, action) : state\r\n}\r\n","import React, { useContext, useReducer, useMemo, CSSProperties } from 'react'\r\nimport Modal from 'react-modal'\r\nimport { actions, reducer, initialState, ModalContextStateT } from './reducer'\r\n\r\nconst overlayStyles = () => ({\r\n  zIndex: 700,\r\n})\r\nconst contentStyles = (styles: CSSProperties): CSSProperties => ({\r\n  width: '50vw',\r\n  maxHeight: 'calc(100vh - 128px)',\r\n  marginLeft: 'auto',\r\n  marginRight: 'auto',\r\n  ...styles,\r\n})\r\n\r\nexport interface ModalContextT {\r\n  open: (\r\n    contents?: JSX.Element,\r\n    style?: CSSProperties,\r\n    blocking?: boolean,\r\n    callback?: (payload?: any) => void,\r\n  ) => void\r\n  close: (payload?: any) => void\r\n  setPayload: (payload: any) => void\r\n  setBlocking: (blocking: boolean) => void\r\n  setContents: (contents: JSX.Element) => void\r\n  setCallback: (callback: (payload?: any) => void) => void\r\n  setStyle: (style: CSSProperties) => void\r\n}\r\nconst defaultContext: ModalContextT = {\r\n  open: () => null,\r\n  close: () => null,\r\n  setBlocking: () => null,\r\n  setPayload: () => null,\r\n  setContents: () => null,\r\n  setCallback: () => null,\r\n  setStyle: () => null,\r\n}\r\nexport const ModalContext = React.createContext<ModalContextT>(defaultContext)\r\nexport const useModalContext = () => useContext(ModalContext)\r\n\r\nconst getContextValue = (\r\n  state: ModalContextStateT,\r\n  dispatch: React.Dispatch<any>,\r\n) => ({\r\n  isOpen: state.isOpen,\r\n  open: (\r\n    contents?: JSX.Element,\r\n    style?: CSSProperties,\r\n    blocking?: boolean,\r\n    callback?: (payload?: any) => void,\r\n  ) => {\r\n    dispatch(actions.open(contents, style, blocking, callback))\r\n  },\r\n  close: (payload?: any) => {\r\n    if (state.callback) state.callback(payload || state.payload)\r\n    dispatch(actions.close())\r\n  },\r\n  setPayload: (payload: any) => dispatch(actions.setPayload(payload)),\r\n  setContents: (contents: JSX.Element) =>\r\n    dispatch(actions.setContents(contents)),\r\n  setCallback: (callback: (payload?: any) => void) =>\r\n    dispatch(actions.setCallback(callback)),\r\n  setBlocking: (blocking: boolean) => dispatch(actions.setBlocking(blocking)),\r\n  setStyle: (style: CSSProperties) => dispatch(actions.setStyle(style)),\r\n})\r\n\r\nexport interface ModalContextProviderPropsT {\r\n  children: JSX.Element\r\n}\r\nexport const ModalContextProvider = (props: ModalContextProviderPropsT) => {\r\n  const { children } = props\r\n  const reducerValue = useReducer(reducer, initialState)\r\n  const [state] = reducerValue\r\n  const context = useMemo(() => getContextValue(...reducerValue), [\r\n    reducerValue,\r\n  ])\r\n\r\n  return (\r\n    <ModalContext.Provider value={context}>\r\n      {children}\r\n      <Modal\r\n        isOpen={state.isOpen}\r\n        onRequestClose={() => {\r\n          if (!state.blocking) context.close()\r\n        }}\r\n        style={{\r\n          content: {\r\n            backgroundColor: '#111',\r\n            color: 'white',\r\n            width: 400,\r\n            margin: '0 auto',\r\n            bottom: 'unset',\r\n            borderColor: '#555',\r\n          },\r\n          overlay: {\r\n            backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n          },\r\n        }}\r\n      >\r\n        {state.contents || <div />}\r\n      </Modal>\r\n    </ModalContext.Provider>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useCombatContext } from '../../contexts/CombatContext'\r\nimport { useModalContext } from '../../contexts/ModalContext'\r\nimport { Span, NameSpanBuilder } from '../../contexts/CombatLogContext/util'\r\nimport { FlexContainer } from '../../elements/flex'\r\n\r\nexport const RoundResultRenderer = () => {\r\n  const { activeRound, commit } = useCombatContext()\r\n  const { open, close, setCallback } = useModalContext()\r\n\r\n  useEffect(() => {\r\n    if (activeRound) {\r\n      console.log(activeRound[0].skill)\r\n      open(<RoundResult close={() => close(true)} />, {}, true, () => {\r\n        commit()\r\n      })\r\n    }\r\n  }, [activeRound, open, close, commit])\r\n\r\n  return null\r\n}\r\n\r\nexport interface RoundResultPropsT {\r\n  close: () => void\r\n}\r\nexport interface CheckKVT {\r\n  label: string\r\n  result: boolean | undefined\r\n}\r\nexport const RoundResult = (props: RoundResultPropsT) => {\r\n  const { close } = props\r\n  const { activeRound, party, enemyParty } = useCombatContext()\r\n  const NameSpan = NameSpanBuilder(party, enemyParty)\r\n  const rounds = activeRound || []\r\n  const round = rounds[0]\r\n  const [roundResults, setRoundResults] = useState<CheckKVT[]>(\r\n    !round\r\n      ? []\r\n      : [\r\n          ...round.rollResults.map((result, i) => ({\r\n            label: round.skill.rolls[i].key || '<NULL>',\r\n            result: undefined,\r\n          })),\r\n          ...(round.skill.accuracy\r\n            ? [\r\n                {\r\n                  label: 'accuracy',\r\n                  result: undefined,\r\n                },\r\n              ]\r\n            : []),\r\n        ],\r\n  )\r\n\r\n  const [currentIndex, setCurrentIndex] = useState<number>(0)\r\n  const updateRoundResult = (value: CheckKVT, index: number) =>\r\n    setRoundResults((r) => r.map((r, i) => (i === index ? value : r)))\r\n\r\n  useEffect(() => {\r\n    if (!round) return\r\n    if (currentIndex < roundResults.length - (round.skill.accuracy ? 1 : 0)) {\r\n      setTimeout(() => {\r\n        updateRoundResult(\r\n          {\r\n            label: round.skill.rolls[currentIndex].key || '<NULL>',\r\n            result: round.rollResults[currentIndex].result,\r\n          },\r\n          currentIndex,\r\n        )\r\n        setCurrentIndex((i) => i + 1)\r\n      }, 200)\r\n    } else {\r\n      if (currentIndex === roundResults.length) {\r\n        setTimeout(() => {\r\n          close()\r\n        }, 600)\r\n      } else {\r\n        setTimeout(() => {\r\n          updateRoundResult(\r\n            {\r\n              label: 'accuracy',\r\n              result: round.accuracySuccess,\r\n            },\r\n            currentIndex,\r\n          )\r\n        }, 200)\r\n        setCurrentIndex((i) => i + 1)\r\n      }\r\n    }\r\n  }, [currentIndex])\r\n\r\n  if (!round) return null\r\n\r\n  const target = {\r\n    ...round.target,\r\n    name: rounds.length > 1 ? `${rounds.length} characters` : round.target.name,\r\n  }\r\n\r\n  return (\r\n    <FlexContainer $direction='column' style={{ textAlign: 'center' }}>\r\n      <h4 style={{ margin: '0 0 20px 0' }}>\r\n        {NameSpan(round.source)} uses {round.skill.name} on {NameSpan(target)}\r\n      </h4>\r\n      <FlexContainer style={{ justifyContent: 'center' }}>\r\n        {roundResults.map((result) => (\r\n          <FlexContainer $direction='column' style={{ marginRight: 10 }}>\r\n            <span>\r\n              {result.result === undefined\r\n                ? Span('rgba(255,255,255,0.4)', result.label)\r\n                : result.result === true\r\n                ? Span('lightgreen', result.label)\r\n                : Span('lightcoral', result.label)}\r\n            </span>\r\n          </FlexContainer>\r\n        ))}\r\n      </FlexContainer>\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { BoxContainer, BoxButton } from '../../elements/box'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { useCombatContext } from '../../contexts/CombatContext'\r\nimport {\r\n  getChecksProbability,\r\n  getSkillDamage,\r\n  getSkillDamageRange,\r\n} from '../../functions'\r\nimport { Button } from '../../elements/button'\r\n\r\nexport const CombatActions = () => {\r\n  const {\r\n    activeCharacter,\r\n    selectedSkill,\r\n    selectedTargets,\r\n    onSkillSelect,\r\n    next,\r\n  } = useCombatContext()\r\n\r\n  if (!activeCharacter) return null\r\n  const perfectChance = selectedSkill\r\n    ? getChecksProbability(activeCharacter, selectedSkill.rolls)\r\n    : 0\r\n  const rawAccuracyChance = selectedSkill\r\n    ? selectedSkill.accuracy\r\n      ? getChecksProbability(activeCharacter, [selectedSkill.accuracy])\r\n      : 1\r\n    : 0\r\n  const accuracyChance = 1 - (1 - perfectChance) * (1 - rawAccuracyChance)\r\n  const damage = selectedSkill\r\n    ? getSkillDamageRange(selectedSkill, activeCharacter, selectedTargets)\r\n    : '0'\r\n  return (\r\n    <BoxContainer substyle={{ color: 'rgba(255,255,255,0.8)', minWidth: 300 }}>\r\n      <h2 style={{ marginTop: 0, textAlign: 'center' }}>\r\n        {!selectedSkill\r\n          ? 'Choose a Skill'\r\n          : selectedTargets.length === 0\r\n          ? 'Choose a Target'\r\n          : 'Confirm Action'}\r\n      </h2>\r\n      <FlexContainer style={{ justifyContent: 'space-around' }}>\r\n        {activeCharacter.skills.map((skill) => (\r\n          <Button\r\n            onClick={() => onSkillSelect(skill)}\r\n            style={{\r\n              background: '#111',\r\n              borderColor:\r\n                selectedSkill && skill.id === selectedSkill.id\r\n                  ? 'white'\r\n                  : undefined,\r\n            }}\r\n          >\r\n            {skill.name}\r\n          </Button>\r\n        ))}\r\n      </FlexContainer>\r\n      {selectedSkill && (\r\n        <BoxContainer\r\n          style={{ marginTop: 10 }}\r\n          substyle={{ background: '#111' }}\r\n        >\r\n          <FlexContainer $direction='column' style={{ alignItems: 'center' }}>\r\n            <span>Target: {selectedSkill.targetType}</span>\r\n            <span>Perect: ({Math.floor(perfectChance * 100)}%)</span>\r\n            <span>Accuracy: ({Math.floor(accuracyChance * 100)}%)</span>\r\n            {damage !== '0' && <span>Base Damage: ({damage})</span>}\r\n          </FlexContainer>\r\n        </BoxContainer>\r\n      )}\r\n    </BoxContainer>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { ProcessedCharacterT } from '../../types'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\nimport { Gauge } from '../Gauge'\r\nimport { noneg } from '../../util'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { Monodiv } from '../../elements/monospace'\r\nimport { styled } from 'styletron-react'\r\n\r\nconst ResourceE = styled(Monodiv, () => ({\r\n  height: 15,\r\n  fontSize: '12px',\r\n  fontWeight: 'bolder',\r\n  padding: '0px 4px',\r\n  lineHeight: '15px',\r\n  flex: 1,\r\n  textAlign: 'center',\r\n  background: '#111',\r\n}))\r\n\r\nexport interface EnemyCharacterPropsT {\r\n  character: ProcessedCharacterT\r\n  activeCharacter: ProcessedCharacterT\r\n  hoverable?: boolean\r\n  selected?: boolean\r\n  isHovering?: boolean\r\n  onClick?: () => void\r\n}\r\nconst Wrapper = styled('div', (props: any) => {\r\n  const { $selected, $active, $hoverable, $isHovering } = props\r\n  const hoverable = $hoverable && !$selected\r\n  return {\r\n    margin: 10,\r\n    boxShadow: $isHovering\r\n      ? '0px 0px 20px black'\r\n      : $selected\r\n      ? '0px 0px 10px black'\r\n      : $active\r\n      ? '0px 0px 20px white'\r\n      : 'none',\r\n    ':hover': {\r\n      boxShadow: hoverable ? '0px 0px 20px black' : undefined,\r\n    },\r\n    transition: 'all 0.1s',\r\n  }\r\n})\r\nexport const EnemyCharacter = (props: EnemyCharacterPropsT) => {\r\n  const {\r\n    character,\r\n    activeCharacter,\r\n    hoverable,\r\n    selected,\r\n    isHovering,\r\n    onClick,\r\n  } = props\r\n  const health = character.health - character.stats.healthOffset\r\n  return (\r\n    <div\r\n      onClick={() => (onClick && !character.dead ? onClick() : null)}\r\n      style={{\r\n        borderWidth: 2,\r\n        width: 380,\r\n        cursor: onClick ? 'pointer' : 'default',\r\n        color: 'rgba(255,255,255,0.8)',\r\n        opacity: character.dead ? 0.5 : 1,\r\n      }}\r\n    >\r\n      <FlexContainer style={{ alignItems: 'center' }}>\r\n        <FlexContainer style={{ border: '1px solid black' }}>\r\n          <Wrapper\r\n            $hoverable={hoverable && !character.dead}\r\n            $active={character.id === activeCharacter.id}\r\n            $selected={selected}\r\n            $isHovering={isHovering}\r\n          >\r\n            <img\r\n              alt='profile'\r\n              height='94'\r\n              width='94'\r\n              src={`https://picsum.photos/seed/${character.name}/94/94`}\r\n              style={{\r\n                height: 94,\r\n                width: 94,\r\n              }}\r\n            />\r\n          </Wrapper>\r\n        </FlexContainer>\r\n        <FlexContainer $full $direction='column'>\r\n          <FlexContainer\r\n            style={{\r\n              padding: '2px 4px',\r\n            }}\r\n          >\r\n            <span\r\n              style={{\r\n                textAlign: 'right',\r\n                fontWeight: 'bold',\r\n                lineHeight: '12px',\r\n                textShadow: '1px 1px 10px black',\r\n                width: '100%',\r\n              }}\r\n            >\r\n              {character.name}\r\n            </span>\r\n          </FlexContainer>\r\n\r\n          <Gauge\r\n            name='Health'\r\n            color='#8f4e4d'\r\n            max={character.health}\r\n            value={noneg(health)}\r\n            height={20}\r\n          >\r\n            {noneg(health)}/{character.health}\r\n          </Gauge>\r\n        </FlexContainer>\r\n        <span\r\n          style={{\r\n            fontWeight: 'bolder',\r\n            fontSize: 52,\r\n            height: 52,\r\n            lineHeight: '52px',\r\n            textShadow: '1px 1px 10px black',\r\n            color: '#b55553',\r\n          }}\r\n        >\r\n          {health > 0 ? health : 0}\r\n        </span>\r\n      </FlexContainer>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { ProcessedPartyT } from '../../types'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { useCombatContext } from '../../contexts/CombatContext'\r\nimport { ConfirmButton } from '../../elements/button'\r\nimport { EnemyCharacter } from '../EnemyCharacter'\r\n\r\nexport interface CombatPartyPropsT {\r\n  party: ProcessedPartyT\r\n}\r\nexport const CombatParty = (props: CombatPartyPropsT) => {\r\n  const { party } = props\r\n  const {\r\n    activeCharacter,\r\n    selectedSkill,\r\n    selectedTargets,\r\n    onTargetsSelect,\r\n    next,\r\n  } = useCombatContext()\r\n\r\n  const [isHovering, setIsHovering] = useState<boolean>(false)\r\n  return (\r\n    <FlexContainer $direction='column'>\r\n      <FlexContainer\r\n        style={{\r\n          justifyContent: 'space-around',\r\n          cursor: selectedSkill?.targetType === 'group' ? 'pointer' : 'default',\r\n        }}\r\n        onMouseEnter={() => setIsHovering(true)}\r\n        onMouseLeave={() => setIsHovering(false)}\r\n        onClick={() => {\r\n          if (selectedSkill && selectedSkill.targetType === 'group') {\r\n            onTargetsSelect(party)\r\n          }\r\n        }}\r\n      >\r\n        {party.characters.map((c) => (\r\n          <div>\r\n            <EnemyCharacter\r\n              hoverable={\r\n                selectedSkill !== undefined &&\r\n                selectedSkill.targetType === 'single'\r\n              }\r\n              isHovering={isHovering && selectedSkill?.targetType === 'group'}\r\n              selected={\r\n                selectedTargets.find((t) => t.id === c.id) !== undefined\r\n              }\r\n              onClick={() => {\r\n                if (selectedSkill && selectedSkill.targetType === 'single') {\r\n                  onTargetsSelect(c)\r\n                }\r\n              }}\r\n              activeCharacter={activeCharacter}\r\n              character={c}\r\n            />\r\n            {selectedSkill &&\r\n              selectedSkill.targetType === 'single' &&\r\n              selectedTargets.length > 0 &&\r\n              selectedTargets[0].id === c.id && (\r\n                <FlexContainer style={{ justifyContent: 'center' }}>\r\n                  <div style={{ boxShadow: '0px 2px 5px black' }}>\r\n                    <ConfirmButton onClick={() => next()} $direction='down'>\r\n                      Confirm Target\r\n                    </ConfirmButton>\r\n                  </div>\r\n                </FlexContainer>\r\n              )}\r\n          </div>\r\n        ))}\r\n      </FlexContainer>\r\n      {selectedSkill &&\r\n        selectedSkill.targetType === 'group' &&\r\n        selectedTargets.length > 0 && (\r\n          <FlexContainer style={{ justifyContent: 'center' }}>\r\n            <div style={{ boxShadow: '0px 2px 5px black' }}>\r\n              <ConfirmButton\r\n                onClick={() => next()}\r\n                onMouseEnter={() => setIsHovering(true)}\r\n                onMouseLeave={() => setIsHovering(false)}\r\n              >\r\n                Confirm Group Target\r\n              </ConfirmButton>\r\n            </div>\r\n          </FlexContainer>\r\n        )}\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useCombatContext } from '../contexts/CombatContext'\r\nimport { BoxContainer, BoxButton } from '../elements/box'\r\nimport { FlexContainer, FullContainer } from '../elements/flex'\r\nimport { useCombatLogContext } from '../contexts/CombatLogContext'\r\nimport { CombatPlayerParty } from '../components/CombatPlayerParty'\r\nimport { RoundResultRenderer } from '../components/RoundResultRenderer'\r\nimport { CombatActions } from '../components/CombatActions'\r\nimport { CombatParty } from '../components/CombatParty'\r\nimport { useModalContext } from '../contexts/ModalContext'\r\nimport { start } from 'repl'\r\n\r\nexport const Combat = () => {\r\n  const {\r\n    party,\r\n    enemyParty,\r\n    activeCharacter,\r\n    queue,\r\n    isDone,\r\n    isRunning,\r\n    start,\r\n  } = useCombatContext()\r\n  const { open, close } = useModalContext()\r\n  const { combatLog } = useCombatLogContext()\r\n  useEffect(() => {\r\n    if (!isRunning) {\r\n      open(\r\n        <div style={{ textAlign: 'center' }}>\r\n          <h1>Combat Start!</h1>\r\n        </div>,\r\n      )\r\n      setTimeout(() => {\r\n        close()\r\n        start()\r\n      }, 500)\r\n    }\r\n  }, [])\r\n  useEffect(() => {\r\n    if (isDone) {\r\n      open(\r\n        <div style={{ textAlign: 'center' }}>\r\n          <h4>Refresh to do combat again</h4>\r\n        </div>,\r\n      )\r\n    }\r\n  }, [isDone])\r\n  if (!isRunning) return null\r\n  if (!activeCharacter) return <span>refresh to do combat again</span>\r\n\r\n  return (\r\n    <FlexContainer style={{ height: '100vh' }}>\r\n      <FlexContainer $full $direction='column'>\r\n        <BoxContainer>\r\n          {queue.map((c, i) => (\r\n            <span style={{ marginRight: 10 }}>\r\n              {i === 0 ? '' : `>`} {c.name}\r\n            </span>\r\n          ))}\r\n        </BoxContainer>\r\n        <FlexContainer\r\n          $direction='column'\r\n          $full\r\n          style={{ padding: '30px 10px' }}\r\n        >\r\n          <CombatParty party={enemyParty} />\r\n          <FlexContainer $full>\r\n            <FullContainer />\r\n            <FlexContainer $direction='column'>\r\n              <FullContainer />\r\n              <CombatActions />\r\n              <RoundResultRenderer />\r\n              <FullContainer />\r\n            </FlexContainer>\r\n            <FullContainer />\r\n          </FlexContainer>\r\n          <CombatPlayerParty party={party} />\r\n        </FlexContainer>\r\n      </FlexContainer>\r\n\r\n      <BoxContainer\r\n        substyle={{\r\n          minWidth: 300,\r\n          fontSize: 12,\r\n          overflowY: 'auto',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n        }}\r\n      >\r\n        {combatLog.map((line) => line)}\r\n      </BoxContainer>\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\nimport { CombatContextProvider } from './contexts/CombatContext'\nimport { PartyT } from './types'\nimport { makeParty } from './functions'\nimport { Combat } from './domain/Combat'\nimport { CombatLogContextProvider } from './contexts/CombatLogContext'\nimport { ModalContextProvider } from './contexts/ModalContext'\n\nexport const App = () => {\n  const [rawEnemyParty, setRawEnemyParty] = useState<PartyT>(makeParty(3))\n  return (\n    <CombatContextProvider\n      enemyParty={rawEnemyParty}\n      setEnemyParty={setRawEnemyParty}\n    >\n      <CombatLogContextProvider>\n        <ModalContextProvider>\n          <Combat />\n        </ModalContextProvider>\n      </CombatLogContextProvider>\n    </CombatContextProvider>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\nimport './index.css'\n\nimport { Provider as StyletronProvider, DebugEngine } from 'styletron-react'\nimport { Client as Styletron } from 'styletron-engine-atomic'\nimport { Provider as ReduxProvider } from 'react-redux'\nimport { makeStore } from './state'\nimport { PartyContextProvider } from './contexts/PartyContext'\n\nconst debug = process.env.NODE_ENV === 'production' ? void 0 : new DebugEngine()\nconst engine: Styletron = new Styletron()\nconst store = makeStore()\n\nReactDOM.render(\n  <React.StrictMode>\n    <ReduxProvider store={store}>\n      <StyletronProvider value={engine} debug={debug} debugAfterHydration>\n        <PartyContextProvider>\n          <App />\n        </PartyContextProvider>\n      </StyletronProvider>\n    </ReduxProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createStore, combineReducers, compose, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport party from './party'\r\n\r\nexport const makeStore = () =>\r\n  createStore(combineReducers({ party }), compose(applyMiddleware(thunk)))\r\n"],"sourceRoot":""}