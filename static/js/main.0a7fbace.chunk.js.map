{"version":3,"sources":["objects/Stats.ts","functions/Entity.ts","objects/Status.ts","objects/Traits.ts","functions/Stats.ts","functions/Traits.ts","functions/Roll.ts","functions/Party.ts","functions/Skill.ts","objects/skills/smash.ts","objects/skills/shockwave.ts","objects/weapons/blacksmiths_hammer.ts","objects/Weapon.ts","functions/Character.ts","functions/Weapon.ts","state/party/index.ts","state/util.ts","hooks/useActions.ts","contexts/PartyContext/index.tsx","util/getRandom.ts","util/noneg.ts","contexts/CombatContext/index.tsx","components/Hover/index.tsx","elements/box.tsx","elements/flex.ts","elements/monospace.tsx","contexts/CombatLogContext/util.tsx","contexts/CombatLogContext/index.tsx","components/Tooltip/index.tsx","components/Gauge/index.tsx","components/PartyCharacter/index.tsx","contexts/ModalContext/reducer.ts","contexts/ModalContext/index.tsx","components/RoundResultRenderer/index.tsx","components/CombatActions/index.tsx","domain/Combat.tsx","App.tsx","serviceWorker.ts","index.tsx","state/index.ts"],"names":["ZERO_STATS","vigor","strength","intelligence","perception","talent","agility","luck","armor","resistance","evasion","healthOffset","criticalChance","damageModifier","CLASS_STARTING_STATS","blacksmith","hunter","scholar","bard","makeEntity","name","id","v4","STATUS_EFFECTS","bleeding","type","canStack","duration","traits","commitChance","committedTraits","damage","stats","burning","frozen","poisoned","ZERO_TRAIT","combineStats","reduce","p","c","combineTraits","getTraitsFromObjects","parents","makeCheck","key","offset","resolveCheck","character","check","statValue","getCharacterStat","roll","DiceRoll","input","result","total","averageTotal","maxTotal","minTotal","output","getChecksProbability","checks","map","checkForProcessedParty","party","processed","Error","characters","forEach","checkForProcessedCharacter","makeParty","characterCount","Array","fill","_","i","makeCharacter","findCharacterInParty","find","updateCharacter","characterId","updater","processParty","processCharacter","partyId","getSkillResults","skill","source","targets","sourceResult","criticalHitResult","accuracyResult","accuracy","rollResults","rolls","passedCount","length","filter","r","perfect","results","every","didAllPass","accuracySuccess","rawDamage","weapon","criticalSuccess","splashDamage","perfectSplash","Math","floor","addedStatus","perfectStatus","getSourceSkillResult","target","dodgeResult","damageResistances","getDamageResistance","dodgeSuccess","blockedDamage","totalDamage","getTargetSkillResult","SMASH","SHOCKWAVE","BLACKSMITHS_HAMMER","rarity","hands","skills","CLASS_STARTING_WEAPONS","getStatusEffects","status","getSkills","getTraits","combinedTrait","processWeapon","statusEffects","startingHealth","class","health","level","dead","characterClass","damageType","actionCreators","payload","actions","updateParty","dispatch","upsertCharacter","deleteCharacter","makeReducer","core","initialState","state","action","coreFn","usePartyActions","deps","useDispatch","useMemo","bindActionCreators","useActions","defaultContextValue","rawParty","findCharacter","findRawCharacter","PartyContext","React","createContext","PartyContextProvider","props","children","useSelector","Provider","value","getRandom","items","random","noneg","defaultValue","enemyParty","activeCharacter","queue","selectedSkill","undefined","selectedTarget","roundResults","activeRound","isDone","onSkillSelect","onTargetsSelect","next","commit","CombatContext","useCombatContext","useContext","CombatContextProvider","rawEnemyParty","setEnemyParty","resultCommitter","localUpdate","sourceParty","targetParty","commitSkillResults","useState","setIsDone","sort","a","b","setQueue","setRoundResults","setActiveRound","setTargets","setSelectedTarget","setSelectedSkill","getTargetsOptions","roundTarget","useEffect","execEnemyTurn","q","active","rest","alert","push","parties","Hover","delay","internalHovering","setInternalHovering","isHovering","setIsHovering","guid","setGuid","useLayoutEffect","setTimeout","onMouseEnter","e","preventDefault","stopPropagation","onMouseLeave","BoxContainer","style","substyle","tag","Element","border","display","boxSizing","background","padding","color","flex","boxShadow","BoxButton","margin","borderColor","disabled","cursor","FlexContainer","styled","flexDirection","$direction","$full","FullContainer","Monospace","fontFamily","fontWeight","Monodiv","Span","text","CombatLogContext","combatLog","CombatLogContextProvider","setCombatLog","deadLog","setDeadLog","NameSpan","isUserParty","isEnemyParty","NameSpanBuilder","log","line","dLog","round","subTarget","Tooltip","direction","tagName","arrow","HoverToolTip","isOpen","Gauge","max","height","percentage","content","position","left","maxWidth","minWidth","textShadow","backgroundColor","alignItems","justifyContent","transition","lineHeight","right","top","fontSize","overflow","ResourceE","textAlign","Wrapper","$selected","$active","$hoverable","PartyCharacter","hoverable","selected","onClick","borderWidth","width","borderRight","alt","src","paddingLeft","borderBottom","contents","callback","blocking","OPEN","CLOSE","reducer","coreFunction","ModalContext","open","close","setBlocking","setPayload","setContents","setCallback","setStyle","getContextValue","ModalContextProvider","reducerValue","useReducer","context","onRequestClose","bottom","overlay","RoundResultRenderer","rounds","RoundResult","accuracyReuslt","setAccuracyResult","label","marginRight","CombatActions","perfectChance","accuracyChance","getSkillDamage","marginBottom","marginTop","Combat","overflowY","App","setRawEnemyParty","Boolean","window","location","hostname","match","engine","Styletron","store","createStore","combineReducers","compose","applyMiddleware","thunk","ReactDOM","render","StrictMode","debug","debugAfterHydration","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0a7fbace.chunk.js","sourcesContent":["import { StatsT, CharacterClassT } from '../types'\r\n\r\nexport const ZERO_STATS: StatsT = {\r\n  vigor: 0,\r\n  strength: 0,\r\n  intelligence: 0,\r\n  perception: 0,\r\n  talent: 0,\r\n\r\n  agility: 0,\r\n  luck: 0,\r\n  armor: 0,\r\n  resistance: 0,\r\n  evasion: 0,\r\n\r\n  healthOffset: 0,\r\n  criticalChance: 0,\r\n  damageModifier: 0,\r\n}\r\n\r\nexport const CLASS_STARTING_STATS: Record<CharacterClassT, StatsT> = {\r\n  blacksmith: {\r\n    strength: 76,\r\n    vigor: 80,\r\n    intelligence: 40,\r\n    perception: 52,\r\n    talent: 72,\r\n    agility: 56,\r\n    luck: 50,\r\n    armor: 2,\r\n    resistance: 0,\r\n    evasion: 7,\r\n    healthOffset: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n  },\r\n  hunter: {\r\n    strength: 52,\r\n    vigor: 66,\r\n    intelligence: 46,\r\n    perception: 78,\r\n    talent: 64,\r\n    agility: 78,\r\n    luck: 50,\r\n    armor: 1,\r\n    resistance: 0,\r\n    evasion: 20,\r\n    healthOffset: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n  },\r\n  scholar: {\r\n    strength: 42,\r\n    vigor: 60,\r\n    intelligence: 78,\r\n    perception: 66,\r\n    talent: 70,\r\n    agility: 70,\r\n    luck: 50,\r\n    armor: 0,\r\n    resistance: 1,\r\n    evasion: 13,\r\n    healthOffset: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n  },\r\n  bard: {\r\n    strength: 44,\r\n    vigor: 50,\r\n    intelligence: 70,\r\n    perception: 68,\r\n    talent: 78,\r\n    agility: 68,\r\n    luck: 50,\r\n    armor: 0,\r\n    resistance: 1,\r\n    evasion: 11,\r\n    healthOffset: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n  },\r\n}\r\n","import { v4 } from 'uuid'\r\n\r\nexport const makeEntity = (name: string = '') => ({\r\n  id: v4(),\r\n  name,\r\n})\r\n","import { StatusTypeT, StatusT } from '../types'\r\nimport { makeEntity } from '../functions/Entity'\r\nimport { ZERO_STATS } from './Stats'\r\n\r\nconst STATUS_DURATION = 5\r\nexport const STATUS_EFFECTS: Record<StatusTypeT, StatusT> = {\r\n  bleeding: {\r\n    ...makeEntity('Bleeding'),\r\n    type: 'bleeding',\r\n    canStack: false,\r\n    duration: STATUS_DURATION,\r\n    traits: [],\r\n    commitChance: 50,\r\n    committedTraits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          healthOffset: -10,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  burning: {\r\n    ...makeEntity('Burning'),\r\n    type: 'burning',\r\n    canStack: false,\r\n    duration: STATUS_DURATION,\r\n    traits: [],\r\n    commitChance: 100,\r\n    committedTraits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          healthOffset: -10,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  frozen: {\r\n    ...makeEntity('Frozen'),\r\n    type: 'frozen',\r\n    canStack: false,\r\n    duration: STATUS_DURATION,\r\n    traits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          damageModifier: 0.25,\r\n        },\r\n      },\r\n    ],\r\n    commitChance: 0,\r\n    committedTraits: [],\r\n  },\r\n  poisoned: {\r\n    ...makeEntity('Poisoned'),\r\n    type: 'poisoned',\r\n    canStack: true,\r\n    duration: STATUS_DURATION,\r\n    traits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          strength: -5,\r\n          intelligence: -5,\r\n          perception: -5,\r\n          talent: -5,\r\n        },\r\n      },\r\n    ],\r\n    commitChance: 100,\r\n    committedTraits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          healthOffset: -5,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n}\r\n","import { TraitT } from '../types'\r\nimport { ZERO_STATS } from './Stats'\r\n\r\nexport const ZERO_TRAIT: TraitT = {\r\n  damage: 0,\r\n  duration: -1,\r\n  stats: ZERO_STATS,\r\n}\r\n","import { StatsT } from '../types'\r\nimport { ZERO_STATS } from '../objects'\r\n\r\nexport const combineStats = (...stats: StatsT[]): StatsT => {\r\n  return stats.reduce(\r\n    (p, c) => ({\r\n      vigor: p.strength + c.strength,\r\n      strength: p.strength + c.strength,\r\n      intelligence: p.intelligence + c.intelligence,\r\n      perception: p.perception + c.perception,\r\n      talent: p.talent + c.talent,\r\n      agility: p.agility + c.agility,\r\n      luck: p.luck + c.luck,\r\n      armor: p.armor + c.armor,\r\n      resistance: p.resistance + c.resistance,\r\n      evasion: p.evasion + c.evasion,\r\n      criticalChance: p.criticalChance + c.criticalChance,\r\n      damageModifier: p.damageModifier + c.damageModifier,\r\n      healthOffset: p.healthOffset + c.healthOffset,\r\n    }),\r\n    ZERO_STATS,\r\n  )\r\n}\r\n","import { TraitT, HasTraitsT, HasCommittedTraits } from '../types'\r\nimport { combineStats } from './Stats'\r\nimport { ZERO_TRAIT } from '../objects'\r\n\r\nexport const combineTraits = (...traits: TraitT[]): TraitT => {\r\n  return traits.reduce(\r\n    (p, c) => ({\r\n      damage: p.damage + c.damage,\r\n      stats: combineStats(p.stats, c.stats),\r\n      duration: -1,\r\n    }),\r\n    ZERO_TRAIT,\r\n  )\r\n}\r\n\r\nexport const getTraitsFromObjects = (parents: HasTraitsT[]) => {\r\n  return parents.reduce((p, c) => {\r\n    return [...p, ...c.traits]\r\n  }, [] as TraitT[])\r\n}\r\nexport const getCommittedTraitsFromObjects = (\r\n  parents: HasCommittedTraits[],\r\n) => {\r\n  return parents.reduce((p, c) => {\r\n    return [...p, ...c.committedTraits]\r\n  }, [] as TraitT[])\r\n}\r\n","import { DiceRoll } from 'rpg-dice-roller'\r\nimport { ProcessedCharacterT, CheckResultT, CheckT, StatsT } from '../types'\r\nimport { getCharacterStat } from './Character'\r\n\r\nexport const makeCheck = (key: keyof StatsT, offset?: number): CheckT => ({\r\n  key,\r\n  offset,\r\n})\r\n\r\nexport const resolveCheck = (\r\n  character: ProcessedCharacterT,\r\n  check: CheckT,\r\n): CheckResultT => {\r\n  const statValue = getCharacterStat(character, check)\r\n  const roll = new DiceRoll('1d100')\r\n  return {\r\n    input: check,\r\n    result: roll.total <= statValue,\r\n    total: roll.total,\r\n    averageTotal: roll.averageTotal,\r\n    maxTotal: roll.maxTotal,\r\n    minTotal: roll.minTotal,\r\n    output: roll.output,\r\n  }\r\n}\r\n\r\nexport const getChecksProbability = (\r\n  character: ProcessedCharacterT,\r\n  checks: CheckT[],\r\n): number => {\r\n  const statValues = checks.map((check) => getCharacterStat(character, check))\r\n  const result = statValues.reduce((p, c) => {\r\n    return p * (c / 100)\r\n  }, 1)\r\n  return result\r\n}\r\n\r\nexport const getPassedCount = (results: CheckResultT[]): number =>\r\n  results.filter((r) => r.result).length\r\n\r\nexport const didAllPass = (results: CheckResultT[]): boolean =>\r\n  results.every((r) => r.result)\r\n","import { CharacterT, PartyT, ProcessedPartyT } from '../types'\r\nimport {\r\n  checkForProcessedCharacter,\r\n  processCharacter,\r\n  makeCharacter,\r\n} from './Character'\r\nimport { makeEntity } from './Entity'\r\n\r\nexport const checkForProcessedParty = (party: PartyT) => {\r\n  if ((party as ProcessedPartyT).processed) {\r\n    throw new Error('No Processed Parties Allowed')\r\n  }\r\n  party.characters.forEach((character) => {\r\n    checkForProcessedCharacter(character)\r\n  })\r\n}\r\n\r\nexport const makeParty = (characterCount: number = 0): PartyT => {\r\n  return {\r\n    ...makeEntity(),\r\n    characters: Array(characterCount)\r\n      .fill(null)\r\n      .map((_, i) => ({\r\n        ...makeCharacter('blacksmith'),\r\n        name: `Character ${i}`,\r\n      })),\r\n  }\r\n}\r\n\r\nexport const findCharacterInParty = <\r\n  T extends PartyT = PartyT,\r\n  R extends CharacterT = CharacterT\r\n>(\r\n  party: T,\r\n  id: string,\r\n): R | undefined => {\r\n  return (party.characters as R[]).find((c) => c.id === id)\r\n}\r\n\r\nexport const updateCharacter = (\r\n  party: PartyT,\r\n  characterId: string,\r\n  updater: (character: CharacterT) => CharacterT,\r\n): PartyT => {\r\n  checkForProcessedParty(party)\r\n  return {\r\n    ...party,\r\n    characters: party.characters.map((c) =>\r\n      c.id === characterId ? updater(c) : c,\r\n    ),\r\n  }\r\n}\r\n\r\nexport const processParty = (party: PartyT): ProcessedPartyT => {\r\n  return {\r\n    ...party,\r\n    processed: true,\r\n    characters: party.characters.map((c) => ({\r\n      ...processCharacter(c),\r\n      partyId: party.id,\r\n    })),\r\n  }\r\n}\r\n","import {\r\n  ProcessedCharacterT,\r\n  SourceSkillResultT,\r\n  HasSkillsT,\r\n  SkillT,\r\n  DamageT,\r\n  TargetSkillResultT,\r\n  CharacterT,\r\n  PartyT,\r\n} from '../types'\r\nimport { resolveCheck, getPassedCount, didAllPass } from './Roll'\r\nimport { getDamageResistance, addMultipleStatus } from './Character'\r\nimport { updateCharacter } from './Party'\r\n\r\nexport const getSkillsFromObjects = (parents: HasSkillsT[]) => {\r\n  return parents.reduce((p, c) => {\r\n    return [...p, ...c.skills]\r\n  }, [] as SkillT[])\r\n}\r\n\r\nexport const getSourceSkillResult = (\r\n  source: ProcessedCharacterT,\r\n  skill: SkillT,\r\n): SourceSkillResultT => {\r\n  const criticalHitResult = resolveCheck(source, {\r\n    offset: source.stats.criticalChance,\r\n  })\r\n  const accuracyResult = resolveCheck(source, skill.accuracy)\r\n  const rollResults = skill.rolls.map((check) => resolveCheck(source, check))\r\n  const passedCount = criticalHitResult.result\r\n    ? skill.rolls.length\r\n    : getPassedCount(rollResults)\r\n  const perfect = criticalHitResult.result ? true : didAllPass(rollResults)\r\n  const accuracySuccess =\r\n    criticalHitResult.result || perfect || accuracyResult.result\r\n  const rawDamage: DamageT = {\r\n    damage: accuracySuccess\r\n      ? source.weapon.damage.damage *\r\n        (1 + skill.damageModifier + source.stats.damageModifier)\r\n      : 0,\r\n    type: source.weapon.damage.type,\r\n  }\r\n  return {\r\n    rollResults,\r\n    skill,\r\n    source,\r\n    accuracySuccess,\r\n    criticalSuccess: criticalHitResult.result,\r\n    passedCount,\r\n    perfect,\r\n    rawDamage,\r\n    splashDamage:\r\n      skill.perfectSplash && perfect\r\n        ? { type: rawDamage.type, damage: Math.floor(rawDamage.damage / 2) }\r\n        : { type: rawDamage.type, damage: 0 },\r\n    addedStatus: perfect ? skill.perfectStatus : [],\r\n  }\r\n}\r\n\r\nexport const getTargetSkillResult = (\r\n  target: ProcessedCharacterT,\r\n  sourceResult: SourceSkillResultT,\r\n): TargetSkillResultT => {\r\n  if (sourceResult.accuracySuccess) {\r\n    const dodgeResult = resolveCheck(target, { key: 'evasion' })\r\n    const damageResistances = sourceResult.criticalSuccess\r\n      ? 0\r\n      : getDamageResistance(target, sourceResult.rawDamage.type)\r\n    return {\r\n      ...sourceResult,\r\n      target,\r\n      dodgeSuccess: sourceResult.criticalSuccess ? false : dodgeResult.result,\r\n      blockedDamage: {\r\n        type: sourceResult.rawDamage.type,\r\n        damage: damageResistances,\r\n      },\r\n      totalDamage: {\r\n        type: sourceResult.rawDamage.type,\r\n        damage: sourceResult.rawDamage.damage - damageResistances,\r\n      },\r\n    }\r\n  } else {\r\n    return {\r\n      ...sourceResult,\r\n      target,\r\n      dodgeSuccess: false,\r\n      blockedDamage: sourceResult.rawDamage,\r\n      totalDamage: sourceResult.rawDamage,\r\n    }\r\n  }\r\n}\r\n\r\nexport const getSkillDamage = (\r\n  skill: SkillT,\r\n  source: ProcessedCharacterT,\r\n  target: ProcessedCharacterT,\r\n): DamageT => {\r\n  const rawDamage: DamageT = {\r\n    type: source.weapon.damage.type,\r\n    damage:\r\n      source.weapon.damage.damage *\r\n      (1 + skill.damageModifier + source.stats.damageModifier),\r\n  }\r\n  const damageResistances = getDamageResistance(target, rawDamage.type)\r\n  return {\r\n    type: rawDamage.type,\r\n    damage: rawDamage.damage - damageResistances,\r\n  }\r\n}\r\n\r\nexport const getSkillResults = (\r\n  skill: SkillT,\r\n  source: ProcessedCharacterT,\r\n  targets: ProcessedCharacterT[],\r\n): TargetSkillResultT[] => {\r\n  const sourceResult = getSourceSkillResult(source, skill)\r\n  return targets.map((target) => getTargetSkillResult(target, sourceResult))\r\n}\r\n\r\nexport const commitSkillResults = (party: PartyT, enemyParty: PartyT) => (\r\n  results: TargetSkillResultT[],\r\n) => {\r\n  const localUpdate = (\r\n    p: PartyT,\r\n    id: string,\r\n    updater: (c: CharacterT) => CharacterT,\r\n  ) => {\r\n    return updateCharacter(p, id, updater)\r\n  }\r\n  results.forEach((result) => {\r\n    const { source, target } = result\r\n    let sourceParty = party.id === source.partyId ? party : enemyParty\r\n    let targetParty = party.id === source.partyId ? enemyParty : party\r\n    targetParty = localUpdate(targetParty, result.target.id, (c) => {\r\n      return {\r\n        ...c,\r\n        stats: {\r\n          ...c.stats,\r\n          healthOffset: c.stats.healthOffset + result.totalDamage.damage,\r\n        },\r\n      }\r\n    })\r\n\r\n    if (result.splashDamage.damage > 0) {\r\n      targetParty.characters\r\n        .filter((c) => c.id !== result.target.id)\r\n        .forEach((character) => {\r\n          targetParty = localUpdate(targetParty, character.id, (c) => ({\r\n            ...c,\r\n            stats: {\r\n              ...c.stats,\r\n              healthOffset: c.stats.healthOffset + result.splashDamage.damage,\r\n            },\r\n          }))\r\n        })\r\n    }\r\n    if (sourceParty.id === party.id) {\r\n      party = sourceParty\r\n      enemyParty = targetParty\r\n    } else {\r\n      party = targetParty\r\n      enemyParty = sourceParty\r\n    }\r\n  })\r\n  return { party, enemyParty }\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const SMASH: SkillT = {\r\n  ...makeEntity('Smash'),\r\n  damageModifier: 0,\r\n  target: 'single',\r\n  rolls: [makeCheck('strength'), makeCheck('strength'), makeCheck('strength')],\r\n  accuracy: makeCheck('strength'),\r\n  perfectSplash: false,\r\n  perfectStatus: [],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const SHOCKWAVE: SkillT = {\r\n  ...makeEntity('Shockwave'),\r\n  damageModifier: 0,\r\n  target: 'single',\r\n  rolls: [\r\n    makeCheck('strength'),\r\n    makeCheck('strength'),\r\n    makeCheck('strength'),\r\n    makeCheck('strength'),\r\n  ],\r\n  accuracy: makeCheck('strength', -10),\r\n  perfectSplash: true,\r\n  perfectStatus: [],\r\n}\r\n","import { WeaponT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { SMASH } from '../skills/smash'\r\nimport { SHOCKWAVE } from '../skills/shockwave'\r\n\r\nexport const BLACKSMITHS_HAMMER: WeaponT = {\r\n  ...makeEntity(`Blacksmith's Hammer`),\r\n  type: 'hammer',\r\n  rarity: 'common',\r\n  hands: 1,\r\n  damage: { type: 'physical', damage: 10 },\r\n  traits: [],\r\n  skills: [SMASH, SHOCKWAVE],\r\n}\r\n","import { CharacterClassT, WeaponT } from '../types'\r\nimport { BLACKSMITHS_HAMMER } from './weapons/blacksmiths_hammer'\r\n\r\nexport const CLASS_STARTING_WEAPONS: Record<CharacterClassT, WeaponT> = {\r\n  blacksmith: BLACKSMITHS_HAMMER,\r\n  hunter: BLACKSMITHS_HAMMER,\r\n  scholar: BLACKSMITHS_HAMMER,\r\n  bard: BLACKSMITHS_HAMMER,\r\n}\r\n","import {\r\n  CharacterT,\r\n  ProcessedCharacterT,\r\n  StatsT,\r\n  TraitT,\r\n  DamageTypeT,\r\n  StatusTypeT,\r\n  CheckT,\r\n  CharacterClassT,\r\n} from '../types'\r\nimport { STATUS_EFFECTS, CLASS_STARTING_STATS } from '../objects'\r\nimport {\r\n  combineTraits,\r\n  getTraitsFromObjects,\r\n  getCommittedTraitsFromObjects,\r\n} from './Traits'\r\nimport { processWeapon } from './Weapon'\r\nimport { getSkillsFromObjects } from './Skill'\r\nimport { makeEntity } from './Entity'\r\nimport { combineStats } from './Stats'\r\nimport { CLASS_STARTING_WEAPONS } from '../objects/Weapon'\r\n\r\nexport const checkForProcessedCharacter = (character: CharacterT) => {\r\n  if ((character as ProcessedCharacterT).processed) {\r\n    throw new Error('No Processed Characters Allowed')\r\n  }\r\n}\r\n\r\nexport const getStatusEffects = (character: CharacterT) => {\r\n  return character.status.map((status) => STATUS_EFFECTS[status.type])\r\n}\r\n\r\nexport const getTraits = (character: CharacterT): TraitT[] => {\r\n  checkForProcessedCharacter(character)\r\n  return [\r\n    ...character.traits,\r\n    ...character.weapon.traits,\r\n    ...getTraitsFromObjects(character.armor),\r\n    ...getTraitsFromObjects(getStatusEffects(character)),\r\n  ]\r\n}\r\n\r\nexport const getSkills = (character: CharacterT) => {\r\n  checkForProcessedCharacter(character)\r\n  return [...character.weapon.skills, ...getSkillsFromObjects(character.armor)]\r\n}\r\n\r\nexport const processCharacter = (\r\n  character: CharacterT,\r\n): ProcessedCharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  const traits = getTraits(character)\r\n  const combinedTrait = combineTraits(...traits)\r\n  const stats: StatsT = combineStats(character.stats, combinedTrait.stats)\r\n  const weapon = processWeapon(character.weapon)\r\n  const statusEffects = getStatusEffects(character)\r\n  const skills = getSkills(character)\r\n  const startingHealth =\r\n    25 + Math.floor(0.1 * CLASS_STARTING_STATS[character.class].vigor)\r\n  const health = Math.floor(\r\n    startingHealth + character.level + 0.1 * character.level * stats.vigor,\r\n  )\r\n  return {\r\n    ...character,\r\n    health,\r\n    stats,\r\n    weapon,\r\n    statusEffects,\r\n    skills,\r\n    dead: stats.healthOffset >= health,\r\n    processed: true,\r\n  }\r\n}\r\n\r\nexport const makeCharacter = (\r\n  characterClass: CharacterClassT,\r\n  partyId: string = '',\r\n): CharacterT => {\r\n  return {\r\n    ...makeEntity(),\r\n    partyId,\r\n    level: 1,\r\n    class: characterClass,\r\n    stats: CLASS_STARTING_STATS[characterClass],\r\n    traits: [],\r\n    weapon: CLASS_STARTING_WEAPONS[characterClass],\r\n    armor: [],\r\n    status: [],\r\n  }\r\n}\r\n\r\nexport const commitTrait = (\r\n  character: CharacterT,\r\n  trait: TraitT,\r\n): CharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  return {\r\n    ...character,\r\n    stats: combineStats(character.stats, trait.stats),\r\n  }\r\n}\r\nexport const commitStatusEffects = (character: CharacterT): CharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  const statusEffects = getStatusEffects(character)\r\n  const traits = getCommittedTraitsFromObjects(statusEffects)\r\n  return traits.reduce(\r\n    (char, trait) => {\r\n      return commitTrait(char, trait)\r\n    },\r\n    { ...character },\r\n  )\r\n}\r\nexport const decrementStatusDurations = (character: CharacterT): CharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  return {\r\n    ...character,\r\n    status: character.status\r\n      .map((status) => ({ ...status, duration: status.duration - 1 }))\r\n      .filter((status) => status.duration !== 0),\r\n  }\r\n}\r\nexport const addStatus = (character: CharacterT, statusType: StatusTypeT) => {\r\n  const statusEffect = STATUS_EFFECTS[statusType]\r\n  const existingStatus = character.status.find((s) => s.type === statusType)\r\n  if (existingStatus && !statusEffect.canStack) {\r\n    return character\r\n  }\r\n  return {\r\n    ...character,\r\n    status: [\r\n      ...character.status,\r\n      { type: statusType, duration: statusEffect.duration },\r\n    ],\r\n  }\r\n}\r\nexport const addMultipleStatus = (\r\n  character: CharacterT,\r\n  statusTypes: StatusTypeT[],\r\n) => {\r\n  return statusTypes.reduce(\r\n    (char, statusType) => {\r\n      return addStatus(char, statusType)\r\n    },\r\n    { ...character },\r\n  )\r\n}\r\n\r\nexport const getCharacterStat = (character: CharacterT, statValue: CheckT) => {\r\n  const resolvedStatValue = statValue.key ? character.stats[statValue.key] : 0\r\n  return resolvedStatValue + (statValue.offset || 0)\r\n}\r\n\r\nexport const getDamageResistance = (\r\n  character: ProcessedCharacterT,\r\n  damageType: DamageTypeT,\r\n) => {\r\n  if (damageType === 'physical') return character.stats.armor\r\n  if (damageType === 'magic') return character.stats.resistance\r\n  return 0\r\n}\r\n","import { WeaponT, ProcessedWeaponT } from '../types'\r\n\r\nexport const processWeapon = (weapon: WeaponT): ProcessedWeaponT => {\r\n  const damage = weapon.traits.reduce((p, c) => {\r\n    return {\r\n      ...p,\r\n      damage: p.damage + c.damage,\r\n    }\r\n  }, weapon.damage)\r\n  return {\r\n    ...weapon,\r\n    damage,\r\n    processed: true,\r\n  }\r\n}\r\n","import { v4 } from 'uuid'\r\nimport { useSelector } from 'react-redux'\r\nimport { StateCoreT, StateActionT, StateT } from '../types'\r\nimport { PartyT, CharacterT } from '../../types'\r\nimport { Dispatch } from 'redux'\r\nimport { makeReducer } from '../util'\r\nimport { useActions } from '../../hooks/useActions'\r\nimport {\r\n  updateCharacter,\r\n  makeCharacter,\r\n  checkForProcessedParty,\r\n} from '../../functions'\r\n\r\nexport const UPDATE_PARTY = '@actions/parties/set-party'\r\nexport const UPSERT_CHARACTER = '@actions/parties/upsert-character'\r\nexport const DELETE_CHARACTER = '@actions/parties/delete-character'\r\nexport const UPSERT_ITEM = '@actions/parties/upsert-item'\r\nexport const DELETE_ITEM = '@actions/parties/delete-item'\r\nexport const UPSERT_MOD = '@actions/parties/upsert-mod'\r\nexport const DELETE_MOD = '@actions/parties/delete-mod'\r\n\r\nexport const actionCreators = {\r\n  updateParty: (party: PartyT): StateActionT => {\r\n    return {\r\n      type: UPDATE_PARTY,\r\n      payload: {\r\n        party,\r\n      },\r\n    }\r\n  },\r\n  upsertCharacter: (character: CharacterT): StateActionT => {\r\n    return {\r\n      type: UPSERT_CHARACTER,\r\n      payload: {\r\n        character,\r\n      },\r\n    }\r\n  },\r\n  deleteCharacter: (characterId: string): StateActionT => {\r\n    return {\r\n      type: DELETE_CHARACTER,\r\n      payload: {\r\n        characterId,\r\n      },\r\n    }\r\n  },\r\n}\r\n\r\nexport const actions = {\r\n  updateParty: (party: PartyT) => (dispatch: Dispatch) => {\r\n    checkForProcessedParty(party)\r\n    dispatch(actionCreators.updateParty(party))\r\n  },\r\n  upsertCharacter: (character: CharacterT) => (dispatch: Dispatch) => {\r\n    dispatch(actionCreators.upsertCharacter(character))\r\n  },\r\n  deleteCharacter: (characterId: string) => (dispatch: Dispatch) => {\r\n    dispatch(actionCreators.deleteCharacter(characterId))\r\n  },\r\n}\r\n\r\nexport const core: StateCoreT<PartyT> = {\r\n  [UPDATE_PARTY]: (state, action) => {\r\n    return {\r\n      ...action.payload.party,\r\n    }\r\n  },\r\n  [UPSERT_CHARACTER]: (state, action) => {\r\n    return updateCharacter(\r\n      state,\r\n      action.payload.character.id,\r\n      (c) => action.payload.character,\r\n    )\r\n  },\r\n  [DELETE_CHARACTER]: (state, action) => {\r\n    return {\r\n      ...state,\r\n      characters: state.characters.filter(\r\n        (c) => c.id !== action.payload.characterId,\r\n      ),\r\n    }\r\n  },\r\n}\r\n\r\nexport const PLAYER_PARTY_ID = v4()\r\nexport const INITIAL_STATE: PartyT = {\r\n  id: PLAYER_PARTY_ID,\r\n  name: 'PlayerParty',\r\n  characters: [\r\n    { ...makeCharacter('blacksmith'), name: 'max m' },\r\n    { ...makeCharacter('blacksmith'), name: 'katie c' },\r\n    { ...makeCharacter('blacksmith'), name: 'milo w' },\r\n  ],\r\n}\r\nexport default makeReducer(core, INITIAL_STATE)\r\nexport const useParty = () => useSelector((state: StateT) => state.party)\r\nexport const usePartyActions = () =>\r\n  useActions(actions) as {\r\n    updateParty: (party: PartyT) => void\r\n    upsertCharacter: (character: CharacterT) => void\r\n    deleteCharacter: (characterId: string) => void\r\n  }\r\n","import { StateCoreT, StateReducerT } from './types'\r\n\r\nexport const makeReducer = (\r\n  core: StateCoreT,\r\n  initialState: any,\r\n): StateReducerT => {\r\n  return (state = initialState, action) => {\r\n    const coreFn = core[action.type]\r\n    if (coreFn) return coreFn(state, action)\r\n    return state\r\n  }\r\n}\r\n","import { useMemo } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\n\r\nexport const useActions = (actions: any, deps?: any[]) => {\r\n  const dispatch = useDispatch()\r\n  return useMemo(\r\n    () => bindActionCreators(actions, dispatch),\r\n    deps ? [dispatch, ...deps] : [dispatch],\r\n  )\r\n}\r\n","import React, { useMemo, useContext } from 'react'\r\nimport {\r\n  PartyT,\r\n  ProcessedPartyT,\r\n  CharacterT,\r\n  ProcessedCharacterT,\r\n} from '../../types'\r\nimport { usePartyActions, useParty } from '../../state/party'\r\nimport { findCharacterInParty, processParty, makeParty } from '../../functions'\r\n\r\nexport interface PartyContextT {\r\n  party: ProcessedPartyT\r\n  rawParty: PartyT\r\n  updateParty: (party: PartyT) => void\r\n  upsertCharacter: (character: CharacterT) => void\r\n  deleteCharacter: (characterId: string) => void\r\n  findCharacter: (characterId: string) => ProcessedCharacterT | undefined\r\n  findRawCharacter: (characterId: string) => CharacterT | undefined\r\n}\r\nconst defaultContextValue: PartyContextT = {\r\n  rawParty: makeParty(),\r\n  party: processParty(makeParty()),\r\n  updateParty: (party) => {},\r\n  upsertCharacter: (character) => {},\r\n  deleteCharacter: (characterId) => {},\r\n  findCharacter: (characterId) => undefined,\r\n  findRawCharacter: (characterId) => undefined,\r\n}\r\nexport const PartyContext = React.createContext<PartyContextT>(\r\n  defaultContextValue,\r\n)\r\n\r\nexport interface PartyContextProviderPropsT {\r\n  children: React.ReactNode | React.ReactNode[]\r\n}\r\nexport const PartyContextProvider = (props: PartyContextProviderPropsT) => {\r\n  const { children } = props\r\n  const actions = usePartyActions()\r\n  const rawParty = useParty()\r\n  const party = useMemo(() => processParty(rawParty), [rawParty])\r\n\r\n  const updateParty = (party: PartyT) => {\r\n    actions.updateParty(party)\r\n  }\r\n  const upsertCharacter = (character: CharacterT) => {\r\n    if (!character) return\r\n    if ((character as ProcessedCharacterT).processed) {\r\n      throw new Error('No processed Characters Allowed')\r\n    }\r\n    actions.upsertCharacter(character)\r\n  }\r\n  const deleteCharacter = (characterId: string) => {\r\n    actions.deleteCharacter(characterId)\r\n  }\r\n  const findCharacter = (characterId: string) => {\r\n    return findCharacterInParty<ProcessedPartyT, ProcessedCharacterT>(\r\n      party,\r\n      characterId,\r\n    )\r\n  }\r\n  const findRawCharacter = (characterId: string) => {\r\n    return findCharacterInParty(rawParty, characterId)\r\n  }\r\n\r\n  return (\r\n    <PartyContext.Provider\r\n      value={{\r\n        party,\r\n        rawParty,\r\n        updateParty,\r\n        upsertCharacter,\r\n        deleteCharacter,\r\n        findCharacter,\r\n        findRawCharacter,\r\n      }}\r\n    >\r\n      {children}\r\n    </PartyContext.Provider>\r\n  )\r\n}\r\n\r\nexport const usePartyContext = () => useContext(PartyContext)\r\n","export const getRandom = <T>(items: T[]) =>\r\n  items[Math.floor(Math.random() * items.length)]\r\n","export const noneg = (value: number) => (value > 0 ? value : 0)\r\n","import React, {\r\n  createContext,\r\n  useContext,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n} from 'react'\r\nimport {\r\n  ProcessedPartyT,\r\n  PartyT,\r\n  SkillT,\r\n  ProcessedCharacterT,\r\n  TargetSkillResultT,\r\n} from '../../types'\r\nimport {\r\n  makeParty,\r\n  processParty,\r\n  getSkillResults,\r\n  commitSkillResults,\r\n  processCharacter,\r\n  makeCharacter,\r\n} from '../../functions'\r\nimport { usePartyContext } from '../PartyContext'\r\nimport { getRandom } from '../../util'\r\n\r\nexport interface CombatContextT {\r\n  party: ProcessedPartyT\r\n  enemyParty: ProcessedPartyT\r\n  activeCharacter: ProcessedCharacterT\r\n  queue: ProcessedCharacterT[]\r\n  selectedSkill: SkillT | undefined\r\n  targets: ProcessedCharacterT[]\r\n  selectedTarget: ProcessedCharacterT | undefined\r\n  roundResults: TargetSkillResultT[][]\r\n  activeRound: TargetSkillResultT[] | undefined\r\n  isDone: boolean\r\n  onSkillSelect: (skill: SkillT) => void\r\n  onTargetsSelect: (target: ProcessedCharacterT) => void\r\n  next: () => void\r\n  commit: () => void\r\n}\r\nconst defaultValue: CombatContextT = {\r\n  party: processParty(makeParty()),\r\n  enemyParty: processParty(makeParty()),\r\n  activeCharacter: processCharacter(makeCharacter('blacksmith')),\r\n  queue: [],\r\n  selectedSkill: undefined,\r\n  targets: [],\r\n  selectedTarget: undefined,\r\n  roundResults: [],\r\n  activeRound: undefined,\r\n  isDone: false,\r\n  onSkillSelect: (skill: SkillT) => {},\r\n  onTargetsSelect: (target: ProcessedCharacterT) => {},\r\n  next: () => {},\r\n  commit: () => {},\r\n}\r\nexport const CombatContext = createContext<CombatContextT>(defaultValue)\r\nexport const useCombatContext = () => useContext(CombatContext)\r\n\r\nexport interface CombatContextProviderPropsT {\r\n  children: JSX.Element\r\n  rawEnemyParty: PartyT\r\n  enemyParty: ProcessedPartyT\r\n  setEnemyParty: (party: PartyT) => void\r\n}\r\nexport const CombatContextProvider = (props: CombatContextProviderPropsT) => {\r\n  const { children, enemyParty, rawEnemyParty, setEnemyParty } = props\r\n  const { party, rawParty, updateParty } = usePartyContext()\r\n  const resultCommitter = useMemo(\r\n    () => commitSkillResults(rawParty, rawEnemyParty),\r\n    [rawParty, rawEnemyParty],\r\n  )\r\n  const [isDone, setIsDone] = useState<boolean>(false)\r\n  const characters = useMemo(\r\n    () =>\r\n      [...party.characters, ...enemyParty.characters].filter((c) => !c.dead),\r\n    [party, enemyParty],\r\n  )\r\n  const [queue, setQueue] = useState<string[]>(\r\n    characters\r\n      .sort((a, b) => a.stats.agility - b.stats.agility)\r\n      .map((c) => c.id),\r\n  )\r\n  const [roundResults, setRoundResults] = useState<TargetSkillResultT[][]>([])\r\n  const [activeRound, setActiveRound] = useState<\r\n    TargetSkillResultT[] | undefined\r\n  >()\r\n  const [targets, setTargets] = useState<ProcessedCharacterT[]>([])\r\n  const [selectedTarget, setSelectedTarget] = useState<\r\n    ProcessedCharacterT | undefined\r\n  >()\r\n  const [selectedSkill, setSelectedSkill] = useState<SkillT | undefined>()\r\n  const activeCharacter = useMemo(\r\n    () => characters.find((c) => c.id === queue[0]) as ProcessedCharacterT,\r\n    [queue, characters],\r\n  )\r\n\r\n  const getTargetsOptions = (\r\n    partyId: string,\r\n    skill: SkillT,\r\n  ): ProcessedCharacterT[] => {\r\n    const sourceParty = party.id === partyId ? party : enemyParty\r\n    const targetParty = party.id === partyId ? enemyParty : party\r\n    switch (skill.target) {\r\n      case 'single':\r\n        return targetParty.characters.filter((c) => !c.dead)\r\n      case 'ally':\r\n        return sourceParty.characters.filter((c) => !c.dead)\r\n      case 'group':\r\n        return []\r\n      case 'party':\r\n        return []\r\n      case 'self':\r\n        return []\r\n      default:\r\n        return []\r\n    }\r\n  }\r\n\r\n  const next = (target?: ProcessedCharacterT) => {\r\n    const roundTarget = target || selectedTarget\r\n    if (!selectedSkill || !roundTarget) return\r\n    const source = activeCharacter\r\n    const results = getSkillResults(selectedSkill, source, [roundTarget])\r\n    setActiveRound(results)\r\n  }\r\n\r\n  const onSkillSelect = (skill: SkillT) => {\r\n    setSelectedSkill(skill)\r\n    setTargets(getTargetsOptions(party.id, skill))\r\n  }\r\n\r\n  const onTargetsSelect = (target: ProcessedCharacterT, push?: boolean) => {\r\n    setSelectedTarget(target)\r\n    if (push) next(target)\r\n  }\r\n\r\n  const commit = () => {\r\n    if (!activeRound) return\r\n    const parties = resultCommitter(activeRound)\r\n    setEnemyParty(parties.enemyParty)\r\n    updateParty(parties.party)\r\n    setSelectedSkill(undefined)\r\n    setSelectedTarget(undefined)\r\n    setTargets([])\r\n    setRoundResults((r) => [...r, activeRound])\r\n    setActiveRound(undefined)\r\n    setQueue((q) => {\r\n      const [active, ...rest] = q\r\n      return [...rest, active].filter(\r\n        (id) => characters.find((c) => c.id === id) !== undefined,\r\n      )\r\n    })\r\n  }\r\n\r\n  const execEnemyTurn = (skill: SkillT, targets: ProcessedCharacterT[]) => {\r\n    const source = activeCharacter\r\n    const results = getSkillResults(skill, source, targets)\r\n    setActiveRound(results)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!activeCharacter) {\r\n      if (queue.length > 0) {\r\n        setQueue((q) => {\r\n          const [active, ...rest] = q\r\n          return [...rest, active].filter(\r\n            (id) => characters.find((c) => c.id === id) !== undefined,\r\n          )\r\n        })\r\n      }\r\n    } else {\r\n      if (activeCharacter.partyId === enemyParty.id) {\r\n        const skill = getRandom(activeCharacter.skills)\r\n        const targets = [\r\n          getRandom(getTargetsOptions(activeCharacter.partyId, skill)),\r\n        ]\r\n        execEnemyTurn(skill, targets)\r\n      }\r\n    }\r\n  }, [(activeCharacter || {}).id])\r\n\r\n  useEffect(() => {\r\n    if (isDone) return\r\n    if (enemyParty.characters.every((c) => c.dead)) {\r\n      alert('you win')\r\n      setIsDone(true)\r\n      return\r\n    }\r\n    if (party.characters.every((c) => c.dead)) {\r\n      setIsDone(true)\r\n      alert('you lose')\r\n      return\r\n    }\r\n  }, [party, enemyParty])\r\n\r\n  return (\r\n    <CombatContext.Provider\r\n      value={{\r\n        party,\r\n        enemyParty,\r\n        queue: queue\r\n          .map(\r\n            (id) => characters.find((c) => c.id === id) as ProcessedCharacterT,\r\n          )\r\n          .filter((c) => c !== undefined),\r\n        activeCharacter,\r\n        activeRound,\r\n        selectedSkill,\r\n        targets,\r\n        selectedTarget,\r\n        roundResults,\r\n        isDone,\r\n        onSkillSelect,\r\n        onTargetsSelect,\r\n        next,\r\n        commit,\r\n      }}\r\n    >\r\n      {children}\r\n    </CombatContext.Provider>\r\n  )\r\n}\r\n","import React, { useState, useLayoutEffect } from 'react'\r\nimport { v4 } from 'uuid'\r\n\r\nexport interface HoverChildrenT {\r\n  isHovering: boolean\r\n}\r\nexport interface HoverPropsT {\r\n  delay?: number\r\n  children: (props: HoverChildrenT) => JSX.Element\r\n}\r\nexport const Hover = (props: HoverPropsT) => {\r\n  const { delay = 500, children } = props\r\n  const [internalHovering, setInternalHovering] = useState<boolean>(false)\r\n  const [isHovering, setIsHovering] = useState<boolean>(false)\r\n  const [guid, setGuid] = useState<string>(v4())\r\n  useLayoutEffect(() => {\r\n    const action = async () => {\r\n      if (internalHovering) {\r\n        setTimeout(() => {\r\n          setGuid(v4())\r\n        }, delay)\r\n      }\r\n    }\r\n    action()\r\n  }, [internalHovering])\r\n  useLayoutEffect(() => {\r\n    if (internalHovering) {\r\n      setIsHovering(true)\r\n    }\r\n  }, [guid])\r\n  const onMouseEnter = (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    setInternalHovering(true)\r\n  }\r\n  const onMouseLeave = (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    setInternalHovering(false)\r\n    setIsHovering(false)\r\n  }\r\n  return (\r\n    <div onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\r\n      {children({ isHovering })}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Hover } from '../components/Hover'\r\n\r\nexport interface BoxContainerPropsT extends React.HTMLProps<HTMLDivElement> {\r\n  substyle?: React.CSSProperties\r\n  tag?: any\r\n  to?: string\r\n}\r\nexport const BoxContainer = (props: BoxContainerPropsT) => {\r\n  const {\r\n    style = {},\r\n    substyle = {},\r\n    children,\r\n    tag: Element = 'div',\r\n    ...rest\r\n  } = props\r\n  return (\r\n    <div\r\n      style={{\r\n        border: '1px solid #000',\r\n        display: 'flex',\r\n        boxSizing: 'border-box',\r\n        ...style,\r\n      }}\r\n    >\r\n      <Element\r\n        style={{\r\n          border: substyle.border || '1px solid #555',\r\n          background: 'linear-gradient(0deg, #222222 0%, #2a2a2a 100%)',\r\n          padding: 10,\r\n          color: '#ccc',\r\n          flex: 1,\r\n          boxShadow: 'inset 0px 0px 2px black',\r\n          ...substyle,\r\n        }}\r\n        {...rest}\r\n      >\r\n        {children}\r\n      </Element>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const SmallBox = (props: BoxContainerPropsT) => (\r\n  <BoxContainer\r\n    {...props}\r\n    style={{\r\n      height: 40,\r\n      width: 40,\r\n      ...props.style,\r\n    }}\r\n    substyle={{\r\n      display: 'flex',\r\n      padding: 0,\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      background: '#111',\r\n      ...props.substyle,\r\n    }}\r\n  >\r\n    {props.children}\r\n  </BoxContainer>\r\n)\r\n\r\nexport const BoxButton = (props: BoxContainerPropsT) => {\r\n  return (\r\n    <Hover delay={0}>\r\n      {({ isHovering }) => (\r\n        <BoxContainer\r\n          {...props}\r\n          tag='button'\r\n          style={{\r\n            margin: 0,\r\n            ...(props.style || {}),\r\n          }}\r\n          substyle={{\r\n            borderColor: isHovering && !props.disabled ? '#999' : '#555',\r\n            padding: '4px',\r\n            cursor: props.disabled ? 'default' : 'pointer',\r\n            background: props.disabled ? '#444' : '#111',\r\n            boxShadow: props.disabled ? 'none' : undefined,\r\n            ...(props.substyle || {}),\r\n          }}\r\n        />\r\n      )}\r\n    </Hover>\r\n  )\r\n}\r\n","import { styled } from 'styletron-react'\r\n\r\nexport interface FlexContainerPropsT {\r\n  $direction?: 'row' | 'column' | 'column-reverse'\r\n  $full?: boolean\r\n}\r\nexport const FlexContainer = styled('div', (props: FlexContainerPropsT) => ({\r\n  display: 'flex',\r\n  flexDirection: props.$direction || 'row',\r\n  flex: props.$full ? 1 : 'default',\r\n}))\r\nexport const FullContainer = styled('div', () => ({\r\n  flex: 1,\r\n}))\r\n","import { styled } from 'styletron-react'\r\n\r\nexport const Monospace = styled('span', () => ({\r\n  fontFamily: 'Inconsolata, monospace',\r\n  fontWeight: 600,\r\n}))\r\nexport const Monodiv = styled('div', () => ({\r\n  fontFamily: 'Inconsolata, monospace',\r\n  fontWeight: 600,\r\n}))\r\n","import React from 'react'\r\nimport { CharacterT, PartyT, SkillT } from '../../types'\r\n\r\nexport const Span = (color: string, text: JSX.Element | string) => (\r\n  <span style={{ color, fontWeight: 'bold' }}>{text}</span>\r\n)\r\nexport const SkillSpan = (skill: SkillT) => Span('plum', skill.name)\r\n\r\nexport const NameSpanBuilder = (party: PartyT, enemyParty: PartyT) => (\r\n  character: CharacterT,\r\n) => {\r\n  const isUserParty = character.partyId === party.id\r\n  const isEnemyParty = character.partyId === enemyParty.id\r\n  const color = isUserParty\r\n    ? 'lightgreen'\r\n    : isEnemyParty\r\n    ? 'lightsalmon'\r\n    : 'white'\r\n\r\n  return Span(color, character.name)\r\n}\r\n","import React, { createContext, useContext, useState, useEffect } from 'react'\r\nimport { useCombatContext } from '../CombatContext'\r\nimport { Monospace } from '../../elements/monospace'\r\nimport { NameSpanBuilder, SkillSpan, Span } from './util'\r\n\r\nexport interface CombatLogContextT {\r\n  combatLog: JSX.Element[]\r\n}\r\nconst defualtValue: CombatLogContextT = {\r\n  combatLog: [],\r\n}\r\nexport const CombatLogContext = createContext<CombatLogContextT>(defualtValue)\r\nexport const useCombatLogContext = () => useContext(CombatLogContext)\r\n\r\ntype DeadLogT = Record<string, boolean | undefined>\r\n\r\nexport interface CombatLogContextProviderPropsT {\r\n  children: JSX.Element\r\n}\r\nexport const CombatLogContextProvider = (\r\n  props: CombatLogContextProviderPropsT,\r\n) => {\r\n  const { children } = props\r\n  const { roundResults, enemyParty, party } = useCombatContext()\r\n  const [combatLog, setCombatLog] = useState<JSX.Element[]>([])\r\n  const [deadLog, setDeadLog] = useState<DeadLogT>({})\r\n  const NameSpan = NameSpanBuilder(party, enemyParty)\r\n  const log = (line: JSX.Element) =>\r\n    setCombatLog((log) => [\r\n      ...log,\r\n      <Monospace style={{ display: 'inline-block', fontWeight: 'normal' }}>\r\n        {line}\r\n      </Monospace>,\r\n    ])\r\n\r\n  useEffect(() => {\r\n    const characters = [...enemyParty.characters, ...party.characters]\r\n    characters.forEach((character) => {\r\n      if (character.dead && !deadLog[character.id]) {\r\n        setDeadLog((dLog) => ({ ...dLog, [character.id]: true }))\r\n        log(<span>{Span('lightcoral', `${character.name} died.`)}</span>)\r\n      }\r\n    })\r\n  }, [enemyParty, party])\r\n\r\n  useEffect(() => {\r\n    if (roundResults.length === 0) return\r\n    const latestRounds = roundResults[roundResults.length - 1]\r\n    latestRounds.forEach((round) => {\r\n      const targetParty = party.id === round.source.partyId ? enemyParty : party\r\n      log(\r\n        <span>\r\n          {NameSpan(round.source)} uses {SkillSpan(round.skill)}.\r\n        </span>,\r\n      )\r\n      if (round.accuracySuccess) {\r\n        if (round.dodgeSuccess) {\r\n          log(<span>{NameSpan(round.target)} dodged the attack.</span>)\r\n        } else {\r\n          log(\r\n            <span>\r\n              {round.skill.name} deals{' '}\r\n              {Span('white', `${round.totalDamage.damage} damage`)} to{' '}\r\n              {NameSpan(round.target)}.\r\n            </span>,\r\n          )\r\n          if (round.perfect) {\r\n            log(<span>{Span('gold', 'Perfect!')}</span>)\r\n          }\r\n        }\r\n        if (round.splashDamage.damage > 0) {\r\n          targetParty.characters\r\n            .filter((c) => c.id !== round.target.id)\r\n            .forEach((subTarget) => {\r\n              log(\r\n                <span>\r\n                  {round.skill.name} deals{' '}\r\n                  {Span('white', `${round.splashDamage.damage} damage`)} to{' '}\r\n                  {NameSpan(subTarget)}.\r\n                </span>,\r\n              )\r\n            })\r\n        }\r\n      } else {\r\n        log(<span>{round.source.name}'s attack missed.</span>)\r\n      }\r\n    })\r\n  }, [roundResults.length])\r\n\r\n  return (\r\n    <CombatLogContext.Provider value={{ combatLog }}>\r\n      {children}\r\n    </CombatLogContext.Provider>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport BaseTooltip, { TooltipProps } from 'react-tooltip-lite'\r\nimport { Hover } from '../Hover'\r\n\r\ninterface PropsT extends TooltipProps {\r\n  children: JSX.Element\r\n}\r\nexport const Tooltip = (props: PropsT) => {\r\n  const { ...rest } = props\r\n  return (\r\n    <BaseTooltip\r\n      direction='up'\r\n      tagName='div'\r\n      padding='0'\r\n      arrow={false}\r\n      {...rest}\r\n    />\r\n  )\r\n}\r\n\r\nexport const HoverToolTip = (props: PropsT) => {\r\n  return (\r\n    <Hover>\r\n      {({ isHovering }) => <Tooltip {...props} isOpen={isHovering} />}\r\n    </Hover>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Color from 'color'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\nimport { HoverToolTip } from '../Tooltip'\r\nimport { Monodiv } from '../../elements/monospace'\r\n\r\nexport interface GaugePropsT {\r\n  name?: string\r\n  color: string\r\n  height?: number\r\n  max: number\r\n  value: number\r\n  children?: React.ReactNode | React.ReactNode[]\r\n}\r\nexport const Gauge = (props: GaugePropsT) => {\r\n  const { name = '', value, max, color, height = 30, children } = props\r\n  const p = (value / max) * 100\r\n  const percentage = p > 100 ? 100 : p\r\n  return (\r\n    <HoverToolTip\r\n      direction='right'\r\n      content={<BoxContainer>{`${name} (${value} / ${max})`}</BoxContainer>}\r\n    >\r\n      <BoxContainer\r\n        substyle={{\r\n          padding: 0,\r\n          background: '#555',\r\n          height: height - 2,\r\n          position: 'relative',\r\n        }}\r\n      >\r\n        <FlexContainer\r\n          style={{\r\n            position: 'absolute',\r\n            left: 0,\r\n            boxSizing: 'border-box',\r\n            height: height - 2,\r\n            maxWidth: `${percentage}%`,\r\n            minWidth: `${percentage}%`,\r\n            boxShadow: 'inset 0px 0px 1px rgba(0,0,0,0.5)',\r\n            textShadow: '1px 1px 1px black',\r\n            backgroundColor: color,\r\n            color: 'white',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            transition: 'all 0.5s',\r\n          }}\r\n        ></FlexContainer>\r\n        <FullContainer\r\n          style={{\r\n            position: 'absolute',\r\n            height,\r\n            lineHeight: `${height - 2}px`,\r\n            right: 4,\r\n            top: 0,\r\n            fontSize: 10,\r\n            fontWeight: 'bold',\r\n            overflow: 'hidden',\r\n            textShadow: '0px 0px 3px black',\r\n          }}\r\n        >\r\n          <Monodiv>{children}</Monodiv>\r\n        </FullContainer>\r\n      </BoxContainer>\r\n    </HoverToolTip>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { ProcessedCharacterT } from '../../types'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\nimport { Gauge } from '../Gauge'\r\nimport { noneg } from '../../util'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { Monodiv } from '../../elements/monospace'\r\nimport { styled } from 'styletron-react'\r\n\r\nconst ResourceE = styled(Monodiv, () => ({\r\n  height: 15,\r\n  fontSize: '12px',\r\n  fontWeight: 'bolder',\r\n  padding: '0px 4px',\r\n  lineHeight: '15px',\r\n  flex: 1,\r\n  textAlign: 'center',\r\n  background: '#111',\r\n}))\r\n\r\nexport interface PartyCharacterProps {\r\n  character: ProcessedCharacterT\r\n  activeCharacter: ProcessedCharacterT\r\n  hoverable?: boolean\r\n  selected?: boolean\r\n  onClick?: () => void\r\n}\r\nconst Wrapper = styled('div', (props: any) => {\r\n  const { $selected, $active, $hoverable } = props\r\n  const hoverable = $hoverable && !$selected\r\n  return {\r\n    ':hover': {\r\n      boxShadow: hoverable ? '0px 0px 10px yellow' : undefined,\r\n    },\r\n    margin: 10,\r\n    boxShadow: $selected\r\n      ? '0px 0px 20px yellow'\r\n      : $active\r\n      ? '0px 0px 20px white'\r\n      : 'none',\r\n  }\r\n})\r\nexport const PartyCharacter = (props: PartyCharacterProps) => {\r\n  const { character, activeCharacter, hoverable, selected, onClick } = props\r\n  const health = character.health - character.stats.healthOffset\r\n  return (\r\n    <Wrapper\r\n      $hoverable={hoverable}\r\n      $active={character.id === activeCharacter.id}\r\n      $selected={selected}\r\n    >\r\n      <BoxContainer\r\n        onClick={() => (onClick ? onClick() : null)}\r\n        style={{\r\n          borderWidth: 2,\r\n          cursor: onClick ? 'pointer' : 'default',\r\n        }}\r\n        substyle={{ padding: 0, width: 380 }}\r\n      >\r\n        <FlexContainer style={{ border: '2px solid black' }}>\r\n          <FlexContainer style={{ borderRight: '2px solid black' }}>\r\n            <img\r\n              alt='profile'\r\n              src={`https://picsum.photos/seed/${character.name}/60/60`}\r\n              style={{\r\n                height: 115,\r\n                width: 115,\r\n              }}\r\n            />\r\n          </FlexContainer>\r\n          <FlexContainer $full $direction='column'>\r\n            <FlexContainer\r\n              style={{\r\n                padding: '2px 4px',\r\n                paddingLeft: 8,\r\n                background: 'rgba(255,255,255,0.2)',\r\n                borderBottom: '1px solid rgba(255,255,255,0.4)',\r\n              }}\r\n            >\r\n              <span\r\n                style={{\r\n                  fontWeight: 'bolder',\r\n                  textShadow: '0px 0px 2px black',\r\n                }}\r\n              >\r\n                {character.name}\r\n              </span>\r\n            </FlexContainer>\r\n            <FlexContainer>\r\n              <span\r\n                style={{\r\n                  fontWeight: 'bolder',\r\n                  padding: '2px 8px',\r\n                  fontSize: 42,\r\n                  height: 42,\r\n                  lineHeight: '42px',\r\n                }}\r\n              >\r\n                {health > 0 ? health : 'Dead'}\r\n              </span>\r\n            </FlexContainer>\r\n            <FullContainer />\r\n            <Gauge\r\n              name='Health'\r\n              color='#8f4e4d'\r\n              max={character.health}\r\n              value={noneg(health)}\r\n              height={12}\r\n            >\r\n              {noneg(health)}/{character.health}\r\n            </Gauge>\r\n            <Gauge\r\n              name='XP'\r\n              color='#5e8575'\r\n              max={3300}\r\n              value={1256}\r\n              height={12}\r\n            >\r\n              1256/3300\r\n            </Gauge>\r\n            <FlexContainer>\r\n              <ResourceE>S-{character.stats.strength}</ResourceE>\r\n              <ResourceE>V-{character.stats.vigor}</ResourceE>\r\n              <ResourceE>I-{character.stats.intelligence}</ResourceE>\r\n              <ResourceE>P-{character.stats.perception}</ResourceE>\r\n              <ResourceE>T-{character.stats.talent}</ResourceE>\r\n              <ResourceE>A-{character.stats.agility}</ResourceE>\r\n              <ResourceE>L-{character.stats.luck}</ResourceE>\r\n            </FlexContainer>\r\n          </FlexContainer>\r\n        </FlexContainer>\r\n      </BoxContainer>\r\n    </Wrapper>\r\n  )\r\n}\r\n","import { CSSProperties } from 'react'\r\n\r\nexport interface ModalContextStateT {\r\n  isOpen: boolean\r\n  contents: JSX.Element | null\r\n  callback: ((payload?: any) => void) | null\r\n  payload: any | null\r\n  blocking: boolean\r\n  style: CSSProperties\r\n}\r\nexport const initialState: ModalContextStateT = {\r\n  isOpen: false,\r\n  contents: null,\r\n  callback: null,\r\n  payload: null,\r\n  blocking: false,\r\n  style: {},\r\n}\r\n\r\nexport const OPEN = 'modalContext/OPEN'\r\nexport const CLOSE = 'modalContext/CLOSE'\r\nexport const SET_CONTENTS = 'modalContext/SET_CONTENTS'\r\nexport const SET_CALLBACK = 'modalContext/SET_CALLBACK'\r\nexport const SET_PAYLOAD = 'modalContext/SET_PAYLOAD'\r\nexport const SET_BLOCKING = 'modalContext/SET_BLOCKING'\r\nexport const SET_STYLE = 'modalContext/SET_STYLE'\r\n\r\nexport const actions = {\r\n  open: (\r\n    contents?: JSX.Element,\r\n    style?: CSSProperties,\r\n    blocking?: boolean,\r\n    callback?: (payload?: any) => void,\r\n  ) => ({\r\n    type: OPEN,\r\n    contents,\r\n    style,\r\n    blocking,\r\n    callback,\r\n  }),\r\n  close: () => ({ type: CLOSE }),\r\n  setPayload: (payload: any) => ({ type: SET_PAYLOAD, payload }),\r\n  setContents: (contents: JSX.Element | null) => ({\r\n    type: SET_CONTENTS,\r\n    contents,\r\n  }),\r\n  setCallback: (callback: (() => void) | null) => ({\r\n    type: SET_CALLBACK,\r\n    callback,\r\n  }),\r\n  setBlocking: (blocking: boolean) => ({ type: SET_BLOCKING, blocking }),\r\n  setStyle: (style: CSSProperties) => ({ type: SET_STYLE, style }),\r\n}\r\n\r\nconst core: Record<\r\n  string,\r\n  (state: ModalContextStateT, action: any) => ModalContextStateT\r\n> = {\r\n  [OPEN]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    isOpen: true,\r\n    contents: action.contents ? action.contents : state.contents,\r\n    style: action.style ? action.style : state.style || {},\r\n    blocking: action.blocking || false,\r\n    callback: action.callback ? action.callback : state.callback,\r\n  }),\r\n  [CLOSE]: (state: ModalContextStateT) => ({\r\n    ...state,\r\n    isOpen: false,\r\n  }),\r\n  [SET_PAYLOAD]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    payload: action.payload,\r\n  }),\r\n  [SET_CONTENTS]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    callback: null,\r\n    payload: null,\r\n    contents: action.contents,\r\n    blocking: false,\r\n    style: {},\r\n  }),\r\n  [SET_CALLBACK]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    callback: action.callback,\r\n  }),\r\n  [SET_BLOCKING]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    blocking: action.blocking,\r\n  }),\r\n  [SET_STYLE]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    style: action.style,\r\n  }),\r\n}\r\n\r\nexport const reducer = (\r\n  state: ModalContextStateT = initialState,\r\n  action: any,\r\n) => {\r\n  const coreFunction = core[action.type]\r\n  return coreFunction ? coreFunction(state, action) : state\r\n}\r\n","import React, { useContext, useReducer, useMemo, CSSProperties } from 'react'\r\nimport Modal from 'react-modal'\r\nimport { actions, reducer, initialState, ModalContextStateT } from './reducer'\r\n\r\nconst overlayStyles = () => ({\r\n  zIndex: 700,\r\n})\r\nconst contentStyles = (styles: CSSProperties): CSSProperties => ({\r\n  width: '50vw',\r\n  maxHeight: 'calc(100vh - 128px)',\r\n  marginLeft: 'auto',\r\n  marginRight: 'auto',\r\n  ...styles,\r\n})\r\n\r\nexport interface ModalContextT {\r\n  open: (\r\n    contents?: JSX.Element,\r\n    style?: CSSProperties,\r\n    blocking?: boolean,\r\n    callback?: (payload?: any) => void,\r\n  ) => void\r\n  close: (payload?: any) => void\r\n  setPayload: (payload: any) => void\r\n  setBlocking: (blocking: boolean) => void\r\n  setContents: (contents: JSX.Element) => void\r\n  setCallback: (callback: (payload?: any) => void) => void\r\n  setStyle: (style: CSSProperties) => void\r\n}\r\nconst defaultContext: ModalContextT = {\r\n  open: () => null,\r\n  close: () => null,\r\n  setBlocking: () => null,\r\n  setPayload: () => null,\r\n  setContents: () => null,\r\n  setCallback: () => null,\r\n  setStyle: () => null,\r\n}\r\nexport const ModalContext = React.createContext<ModalContextT>(defaultContext)\r\nexport const useModalContext = () => useContext(ModalContext)\r\n\r\nconst getContextValue = (\r\n  state: ModalContextStateT,\r\n  dispatch: React.Dispatch<any>,\r\n) => ({\r\n  isOpen: state.isOpen,\r\n  open: (\r\n    contents?: JSX.Element,\r\n    style?: CSSProperties,\r\n    blocking?: boolean,\r\n    callback?: (payload?: any) => void,\r\n  ) => {\r\n    dispatch(actions.open(contents, style, blocking, callback))\r\n  },\r\n  close: (payload?: any) => {\r\n    if (state.callback) state.callback(payload || state.payload)\r\n    dispatch(actions.close())\r\n  },\r\n  setPayload: (payload: any) => dispatch(actions.setPayload(payload)),\r\n  setContents: (contents: JSX.Element) =>\r\n    dispatch(actions.setContents(contents)),\r\n  setCallback: (callback: (payload?: any) => void) =>\r\n    dispatch(actions.setCallback(callback)),\r\n  setBlocking: (blocking: boolean) => dispatch(actions.setBlocking(blocking)),\r\n  setStyle: (style: CSSProperties) => dispatch(actions.setStyle(style)),\r\n})\r\n\r\nexport interface ModalContextProviderPropsT {\r\n  children: JSX.Element\r\n}\r\nexport const ModalContextProvider = (props: ModalContextProviderPropsT) => {\r\n  const { children } = props\r\n  const reducerValue = useReducer(reducer, initialState)\r\n  const [state] = reducerValue\r\n  const context = useMemo(() => getContextValue(...reducerValue), [\r\n    reducerValue,\r\n  ])\r\n\r\n  return (\r\n    <ModalContext.Provider value={context}>\r\n      {children}\r\n      <Modal\r\n        isOpen={state.isOpen}\r\n        onRequestClose={() => {\r\n          if (!state.blocking) context.close()\r\n        }}\r\n        style={{\r\n          content: {\r\n            backgroundColor: '#111',\r\n            color: 'white',\r\n            width: 400,\r\n            margin: '0 auto',\r\n            bottom: 'unset',\r\n            borderColor: '#555',\r\n          },\r\n          overlay: {\r\n            backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n          },\r\n        }}\r\n      >\r\n        {state.contents || <div />}\r\n      </Modal>\r\n    </ModalContext.Provider>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useCombatContext } from '../../contexts/CombatContext'\r\nimport { useModalContext } from '../../contexts/ModalContext'\r\nimport { TargetSkillResultT } from '../../types'\r\nimport { Span } from '../../contexts/CombatLogContext/util'\r\nimport { FlexContainer } from '../../elements/flex'\r\n\r\nexport const RoundResultRenderer = () => {\r\n  const { activeRound, commit } = useCombatContext()\r\n  const { open, close, setCallback } = useModalContext()\r\n\r\n  useEffect(() => {\r\n    if (activeRound) {\r\n      open(\r\n        <RoundResult rounds={activeRound} close={() => close(true)} />,\r\n        {},\r\n        true,\r\n        () => {\r\n          commit()\r\n        },\r\n      )\r\n    }\r\n  }, [activeRound, open, close, commit])\r\n\r\n  return null\r\n}\r\n\r\nexport interface RoundResultPropsT {\r\n  rounds: TargetSkillResultT[]\r\n  close: () => void\r\n}\r\nexport interface CheckKVT {\r\n  label: string\r\n  result: boolean\r\n}\r\nexport const RoundResult = (props: RoundResultPropsT) => {\r\n  const { rounds, close } = props\r\n  const [roundResults, setRoundResults] = useState<CheckKVT[]>([])\r\n  const [accuracyReuslt, setAccuracyResult] = useState<CheckKVT | undefined>()\r\n  const round = rounds[0]\r\n\r\n  useEffect(() => {\r\n    if (!round) return\r\n    if (!(round.rollResults.length === roundResults.length)) {\r\n      setTimeout(() => {\r\n        setRoundResults((r) => [\r\n          ...r,\r\n          {\r\n            label: round.skill.rolls[roundResults.length].key || '<null>',\r\n            result: round.rollResults[roundResults.length].result,\r\n          },\r\n        ])\r\n      }, 200)\r\n    } else {\r\n      if (accuracyReuslt) {\r\n        setTimeout(() => {\r\n          close()\r\n        }, 600)\r\n      } else {\r\n        setTimeout(() => {\r\n          setAccuracyResult({\r\n            label: 'accuracy',\r\n            result: round.accuracySuccess,\r\n          })\r\n        }, 200)\r\n      }\r\n    }\r\n  }, [roundResults.length, accuracyReuslt])\r\n\r\n  if (!round) return null\r\n  const results = accuracyReuslt\r\n    ? [...roundResults, accuracyReuslt]\r\n    : roundResults\r\n  return (\r\n    <FlexContainer $direction='column'>\r\n      <h4>\r\n        {round.source.name} uses {round.skill.name} on {round.target.name}\r\n      </h4>\r\n      <FlexContainer>\r\n        {results.map((result) => (\r\n          <FlexContainer $direction='column' style={{ marginRight: 10 }}>\r\n            <span>{result.label}</span>\r\n            <span>\r\n              {result.result\r\n                ? Span('lightgreen', 'PASSED')\r\n                : Span('lightcoral', 'FALLED')}\r\n            </span>\r\n          </FlexContainer>\r\n        ))}\r\n      </FlexContainer>\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { BoxContainer, BoxButton } from '../../elements/box'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { useCombatContext } from '../../contexts/CombatContext'\r\nimport {\r\n  getChecksProbability,\r\n  getSkillResults,\r\n  getSkillDamage,\r\n} from '../../functions'\r\n\r\nexport const CombatActions = () => {\r\n  const {\r\n    activeCharacter,\r\n    targets,\r\n    selectedSkill,\r\n    selectedTarget,\r\n    onTargetsSelect,\r\n    onSkillSelect,\r\n    next,\r\n  } = useCombatContext()\r\n\r\n  if (!activeCharacter) return null\r\n  const perfectChance = selectedSkill\r\n    ? getChecksProbability(activeCharacter, selectedSkill.rolls)\r\n    : 0\r\n  const rawAccuracyChance = selectedSkill\r\n    ? getChecksProbability(activeCharacter, [selectedSkill.accuracy])\r\n    : 0\r\n  const accuracyChance = 1 - (1 - perfectChance) * (1 - rawAccuracyChance)\r\n  const damage =\r\n    selectedTarget && selectedSkill\r\n      ? getSkillDamage(selectedSkill, activeCharacter, selectedTarget).damage\r\n      : 0\r\n  return (\r\n    <BoxContainer substyle={{ color: 'rgba(255,255,255,0.8)' }}>\r\n      <h4 style={{ margin: '0 0 10px 0' }}>{activeCharacter.name}'s Turn</h4>\r\n      <FlexContainer style={{ marginBottom: 10 }}>\r\n        {activeCharacter.skills.map((skill) => (\r\n          <BoxButton\r\n            onClick={() => onSkillSelect(skill)}\r\n            substyle={{\r\n              borderColor:\r\n                selectedSkill && skill.id === selectedSkill.id\r\n                  ? 'white'\r\n                  : undefined,\r\n            }}\r\n          >\r\n            {skill.name}\r\n          </BoxButton>\r\n        ))}\r\n      </FlexContainer>\r\n      {selectedSkill && (\r\n        <BoxContainer\r\n          style={{ marginTop: 10 }}\r\n          substyle={{ background: '#111' }}\r\n        >\r\n          <FlexContainer $direction='column'>\r\n            <strong>Perect Chance: ({Math.floor(perfectChance * 100)}%)</strong>\r\n            <strong>Accuracy: ({Math.floor(accuracyChance * 100)}%)</strong>\r\n            {damage > 0 && <strong>Damage: {damage}</strong>}\r\n          </FlexContainer>\r\n        </BoxContainer>\r\n      )}\r\n      {selectedSkill && selectedTarget && (\r\n        <BoxButton onClick={() => next()}>Confirm</BoxButton>\r\n      )}\r\n    </BoxContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useCombatContext } from '../contexts/CombatContext'\r\nimport { BoxContainer, BoxButton } from '../elements/box'\r\nimport { FlexContainer, FullContainer } from '../elements/flex'\r\nimport { useCombatLogContext } from '../contexts/CombatLogContext'\r\nimport { PartyCharacter } from '../components/PartyCharacter'\r\nimport { RoundResultRenderer } from '../components/RoundResultRenderer'\r\nimport { CombatActions } from '../components/CombatActions'\r\n\r\nexport const Combat = () => {\r\n  const {\r\n    party,\r\n    enemyParty,\r\n    activeCharacter,\r\n    queue,\r\n    targets,\r\n    selectedSkill,\r\n    selectedTarget,\r\n    isDone,\r\n    onTargetsSelect,\r\n    onSkillSelect,\r\n  } = useCombatContext()\r\n  const { combatLog } = useCombatLogContext()\r\n  if (!activeCharacter || isDone) return <span>refresh to do combat again</span>\r\n  return (\r\n    <FlexContainer style={{ height: '100vh' }}>\r\n      <FlexContainer $full $direction='column' style={{ padding: 10 }}>\r\n        <BoxContainer>\r\n          {queue.map((c) => (\r\n            <span>\r\n              {c.name} {`>`}\r\n            </span>\r\n          ))}\r\n        </BoxContainer>\r\n        <FlexContainer style={{ justifyContent: 'space-around' }}>\r\n          {enemyParty.characters.map((c) => (\r\n            <div>\r\n              <PartyCharacter\r\n                hoverable={true}\r\n                selected={selectedTarget && c.id === selectedTarget.id}\r\n                onClick={() => onTargetsSelect(c)}\r\n                activeCharacter={activeCharacter}\r\n                character={c}\r\n              />\r\n            </div>\r\n          ))}\r\n        </FlexContainer>\r\n        <FlexContainer $full>\r\n          <FullContainer />\r\n          <FlexContainer $direction='column'>\r\n            <FullContainer />\r\n            <CombatActions />\r\n            <RoundResultRenderer />\r\n            <FullContainer />\r\n          </FlexContainer>\r\n          <FullContainer />\r\n        </FlexContainer>\r\n        <FlexContainer style={{ justifyContent: 'space-around' }}>\r\n          {party.characters.map((c) => (\r\n            <div>\r\n              <PartyCharacter activeCharacter={activeCharacter} character={c} />\r\n            </div>\r\n          ))}\r\n        </FlexContainer>\r\n      </FlexContainer>\r\n\r\n      <BoxContainer\r\n        substyle={{\r\n          minWidth: 300,\r\n          overflowY: 'auto',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n        }}\r\n      >\r\n        {combatLog.map((line) => line)}\r\n      </BoxContainer>\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React, { useState, useMemo } from 'react'\nimport { CombatContextProvider } from './contexts/CombatContext'\nimport { PartyT } from './types'\nimport { makeParty, processParty } from './functions'\nimport { Combat } from './domain/Combat'\nimport { CombatLogContextProvider } from './contexts/CombatLogContext'\nimport { ModalContextProvider } from './contexts/ModalContext'\n\nexport const App = () => {\n  const [rawEnemyParty, setRawEnemyParty] = useState<PartyT>(makeParty(3))\n  const enemyParty = useMemo(() => processParty(rawEnemyParty), [rawEnemyParty])\n  return (\n    <CombatContextProvider\n      enemyParty={enemyParty}\n      rawEnemyParty={rawEnemyParty}\n      setEnemyParty={setRawEnemyParty}\n    >\n      <CombatLogContextProvider>\n        <ModalContextProvider>\n          <Combat />\n        </ModalContextProvider>\n      </CombatLogContextProvider>\n    </CombatContextProvider>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\nimport './index.css'\n\nimport { Provider as StyletronProvider, DebugEngine } from 'styletron-react'\nimport { Client as Styletron } from 'styletron-engine-atomic'\nimport { Provider as ReduxProvider } from 'react-redux'\nimport { makeStore } from './state'\nimport { PartyContextProvider } from './contexts/PartyContext'\n\nconst debug = process.env.NODE_ENV === 'production' ? void 0 : new DebugEngine()\nconst engine: Styletron = new Styletron()\nconst store = makeStore()\n\nReactDOM.render(\n  <React.StrictMode>\n    <ReduxProvider store={store}>\n      <StyletronProvider value={engine} debug={debug} debugAfterHydration>\n        <PartyContextProvider>\n          <App />\n        </PartyContextProvider>\n      </StyletronProvider>\n    </ReduxProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createStore, combineReducers, compose, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport party from './party'\r\n\r\nexport const makeStore = () =>\r\n  createStore(combineReducers({ party }), compose(applyMiddleware(thunk)))\r\n"],"sourceRoot":""}