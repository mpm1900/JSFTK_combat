{"version":3,"sources":["icons/svg/delapouite/heart-beats.svg","icons/svg/delapouite/biceps.svg","icons/svg/lorc/brain.svg","icons/svg/delapouite/eye-target.svg","icons/svg/lorc/juggler.svg","icons/svg/lorc/sprint.svg","icons/svg/lorc/clover.svg","icons/svg/delapouite/convergence-target.svg","icons/svg/lorc/star-swirl.svg","icons/svg/sbed/targeted.svg","icons/svg/lorc/dodging.svg","icons/svg/lorc/high-shot.svg","icons/svg/delapouite/shield-impact.svg","icons/svg/lorc/fire-zone.svg","icons/svg/lorc/heavy-timer.svg","icons/svg/lorc/ubisoft-sun.svg","icons/svg/lorc/flat-hammer.svg","icons/svg/lorc/hammer-drop.svg","icons/svg/lorc/bordered-shield.svg","icons/svg/delapouite/g-clef.svg","icons/svg/lorc/robe.svg","icons/svg/lorc/scale-mail.svg","icons/svg/delapouite/chest-armor.svg","icons/svg/delapouite/viking-shield.svg","icons/svg/lorc/lightning-shield.svg","icons/svg/lorc/leather-boot.svg","icons/svg/delapouite/robin-hood-hat.svg","icons/svg/lorc/pointy-hat.svg","icons/svg/lorc/visored-helm.svg","icons/svg/delapouite/skills.svg","icons/svg/lorc/knapsack.svg","icons/svg/lorc/split-cross.svg","assets/img/flat-forestred.jpg","util/getRandom.ts","util/noneg.ts","objects/Stats.ts","functions/Entity.ts","objects/Status.ts","objects/Traits.ts","functions/Stats.ts","functions/Traits.ts","functions/makeCheck.ts","objects/skills/smash.ts","objects/skills/shockwave.ts","objects/weapons/blacksmiths_hammer.ts","objects/skills/shot.ts","objects/skills/snipe_shot.ts","objects/weapons/hunting_bow.ts","objects/skills/surge.ts","objects/skills/area_blast.ts","objects/weapons/scholars_book.ts","objects/skills/alto.ts","objects/skills/Dazzle.ts","objects/weapons/simple_lute.ts","objects/Weapon.ts","objects/skills/taunt.ts","objects/armor/simple_iron_shield.ts","objects/armor/explorers_cloak.ts","objects/armor/explorers_hat.ts","objects/armor/fur_armor.ts","objects/armor/adventure_boots.ts","objects/armor/adventure_cloak.ts","objects/armor/fur_boots.ts","objects/armor/performers_vest.ts","objects/armor/performers_boots.ts","objects/armor/explorers_boots.ts","objects/Armor.ts","objects/skills/enemy/bite.ts","objects/enemies/timberwolf.ts","objects/skills/enemy/slap.ts","objects/enemies/vale_imp.ts","objects/skills/enemy/impale.ts","objects/enemies/beastman.ts","functions/Character.ts","functions/Weapon.ts","functions/Roll.ts","functions/Party.ts","objects/Skills.ts","functions/Damage.ts","objects/Party.ts","functions/Skill.ts","functions/CombatCommitter.ts","state/party/index.ts","state/util.ts","hooks/useActions.ts","contexts/PartyContext/index.tsx","types/CombatQueue.ts","contexts/CombatContext/index.tsx","functions/AI.ts","elements/flex.ts","elements/monospace.tsx","contexts/CombatLogContext/util.tsx","contexts/CombatLogContext/index.tsx","components/Hover/index.tsx","elements/box.tsx","components/Tooltip/index.tsx","components/Gauge/index.tsx","elements/badge.tsx","components/Icon/index.tsx","icons/maps.tsx","components/TagPreview/index.tsx","components/CharacterImage/index.tsx","components/PartyCharacter/index.tsx","elements/button.tsx","components/CombatPlayerParty/index.tsx","contexts/ModalContext/reducer.ts","contexts/ModalContext/index.tsx","components/SkillChecks/index.tsx","components/RoundResultRenderer/index.tsx","components/SkillPreview/index.tsx","components/CombatActions/index.tsx","components/EnemyCharacter/index.tsx","hooks/usePrevious.ts","components/CombatParty/index.tsx","components/CombatQueue/index.tsx","components/CombatLog/index.tsx","domain/Combat.tsx","routes/index.tsx","components/PartyCharacters/index.tsx","components/StatsPreview/index.tsx","objects/Item.ts","components/WeaponPreview/index.tsx","components/ArmorPreview/index.tsx","components/PartyActiveCharacter/index.tsx","domain/Party.tsx","App.tsx","serviceWorker.ts","index.tsx","state/index.ts"],"names":["module","exports","getRandom","items","Math","floor","random","length","noneg","value","ZERO_STATS","vigor","strength","intelligence","perception","talent","agility","luck","armor","resistance","evasion","healthRegen","healthOffset","health","criticalChance","damageModifier","damageOffset","damageReflection","weaknessModifier","goldModifier","CLASS_STARTING_STATS","blacksmith","hunter","scholar","bard","enemy","DAMAGE_BONUS_KEYS","DEFENSE_BONUS_KEYS","STAT_BONUS_KEYS","STAT_KEY_LABELS","makeEntity","name","id","v4","STATUS_EFFECTS","bleeding","type","canStack","duration","traits","commitChance","committedTraits","stats","burning","frozen","poisoned","targeted","description","dazed","evasive","ZERO_TRAIT","combineStats","reduce","p","c","combineTraits","getTraitsFromObjects","parents","makeCheck","key","offset","SMASH","targetType","damage","isBasicAttack","rolls","perfectSplash","perfectPierce","perfectStatus","SHOCKWAVE","BLACKSMITHS_HAMMER","itemType","rarity","twoHand","attackType","skills","SHOT","SNIPE_SHOT","HUNTING_BOW","SURGE","AREA_BLAST","SCHOLARS_BOOK","ALTO","DAZZLE","SIMPLE_LUTE","CLASS_STARTING_WEAPONS","TAUNT","SIMPLE_IRON_SHIELD","EXPLORERS_CLOAK","EXPLORERS_HAT","FUR_ARMOR","ADVENTURE_BOOTS","ADVENTURE_CLOAK","FUR_BOOTS","PERFORMERS_VEST","PERFORMERS_BOOTS","EXPLORERS_BOOTS","CLASS_STARTING_ARMOR","BITE","TIMBERWOLF","isCharacter","partyId","level","class","status","weapon","SLAP","VALE_IMP","IMPALE","BEASTMAN","checkForProcessedCharacter","character","processed","Error","getStatusEffects","map","processCharacter","getTraits","combinedTrait","processWeapon","statusEffects","getSkillsFromObjects","getSkills","hVigor","startingHealth","rawStats","dead","makeCharacter","characterClass","decrementStatusDurations","console","log","filter","hasStatus","statusType","s","includes","addMultipleStatus","statusTypes","char","statusEffect","existingStatus","find","findStatus","t","stack","addStatus","getCharacterStat","statValue","getDamageResistance","damageType","resolveCheck","check","roll","DiceRoll","input","result","total","averageTotal","maxTotal","minTotal","output","isParty","e","checkForProcessedParty","party","characters","forEach","makeParty","findCharacterInParty","updateCharacter","characterId","updater","processParty","PERFECT_DISPLAY_INFO","splash","pierce","getSplashDamage","rawDamage","PLAYER_PARTY_ID","resolveSkillTarget","target","makeSkillTarget","undefined","getPerfectText","skill","perfectKeys","base","getPerfectKeys","getSkillDamage","splashDamage","res","i","pre","text","source","damageResistances","round","getSkillResults","targets","sourceResult","rollResults","passedCount","r","perfect","results","every","didAllPass","criticalHitResult","criticalSuccess","accuracySuccess","addedStatus","getSourceSkillResult","dodgeResult","isEvasive","dodgeSuccess","totalDamage","reflectedDamage","healthRegenMaximum","regeneratedHealth","blockedDamage","willDie","getTargetSkillResult","localUpdater","commitSkillResults","enemyParty","index","sourceParty","targetParty","localUpdate","splashDamageResistance","actionCreators","payload","actions","updateParty","dispatch","upsertCharacter","deleteCharacter","core","state","action","jack","makeReducer","initialState","coreFn","usePartyActions","useDispatch","useMemo","bindActionCreators","useActions","defaultContextValue","rawParty","activeCharacter","findCharacter","findRawCharacter","setActiveCharacter","PartyContext","React","createContext","PartyContextProvider","props","children","useSelector","useState","activeCharacterId","setActiveCharacterId","Provider","usePartyContext","useContext","makeCombatQueue","sort","a","b","getMin","queue","Object","keys","Number","POSITIVE_INFINITY","consolidateQueue","min","getFirst","defaultValue","selectedSkill","selectedTargets","roundResults","activeRound","isRunning","isDone","isRenderingResult","onSkillSelect","onTargetsSelect","start","next","commit","CombatContext","useCombatContext","CombatContextProvider","setEnemyParty","onRequestNewParty","history","useHistory","resultCommitter","setIsRunning","setIsDone","setIsRenderingResult","setQueue","roundId","setRoundId","setRoundResults","setActiveRound","selectedTarget","setSelectedTarget","setSelectedSkill","useCallback","useEffect","parties","updatedCharacters","validateQueue","shiftQueue","playerParty","targetedCharacters","getSkillTargetOptions","getAIAction","execEnemyTurn","alert","push","nextTarget","roundTarget","FlexContainer","styled","display","flexDirection","$direction","flex","$full","FullContainer","Monospace","fontFamily","fontWeight","Monodiv","Span","color","style","SkillSpan","CombatLogContext","combatLog","useCombatLogContext","CombatLogContextProvider","setCombatLog","deadLog","setDeadLog","NameSpan","isUserParty","isEnemyParty","NameSpanBuilder","line","setTimeout","dLog","latestRounds","baseRound","subTarget","tag","Hover","delay","internalHovering","setInternalHovering","isHovering","setIsHovering","guid","setGuid","useLayoutEffect","onMouseEnter","preventDefault","stopPropagation","onMouseLeave","BoxContainer","substyle","Element","rest","border","boxSizing","background","padding","boxShadow","Tooltip","direction","tagName","arrow","HoverToolTip","isOpen","Gauge","max","height","percentage","content","borderLeft","position","borderColor","left","maxWidth","minWidth","textShadow","backgroundColor","alignItems","justifyContent","transition","lineHeight","right","top","fontSize","overflow","HealthGauge","XPGauge","Div","transform","Badge","withWrapper","$absolute","$size","width","borderRadius","$color","$top","bottom","$bottom","$right","$left","HoverBadge","badgeProps","distance","Icon","src","size","fill","shadow","onClick","loading","setLoading","svg","setSvg","fetch","then","className","dangerouslySetInnerHTML","__html","STATI_ICONS","Vigor","Strength","Brain","Awareness","Juggler","Agility","Clover","accuracy","Accuracy","STATUS_ICONS","Dazed","Targeted","Evasive","SKILL_ICONS","Shot","SnipeShot","Surge","AreaBast","Dazzle","Smash","Shockwave","Taunt","Alto","ARMOR_TYPE_ICONS","MagicArmor","ClothArmor","Armor","Shield","MagicShield","Footwear","Hat","MagicHat","Helmet","TagPreview","marginBottom","CharacterImage","alt","ResourceE","withStyle","textAlign","Wrapper","$selected","$active","$hoverable","$isHovering","margin","userSelect","CharacterStat","statKey","getStatColor","marginRight","PartyCharacter","hoverable","selected","opacity","borderWidth","cursor","borderRight","marginTop","paddingLeft","borderBottom","Inventory","Details","Button","outline","RedButton","ConfirmButton","borderTop","animationDirection","animationIterationCount","animationName","CombatPlayerParty","contents","callback","blocking","styles","OPEN","CLOSE","reducer","coreFunction","ModalContext","open","close","setBlocking","setPayload","setContents","setCallback","setStyles","useModalContext","getContextValue","Modal","setAppElement","ModalContextProvider","reducerValue","useReducer","context","onRequestClose","modal","overlay","SkillChecks","label","SkillCheck","getColor","X","RoundResultRenderer","isModal","setIsOpen","RoundResult","rounds","stream","Kefir","sequentially","onValue","onEnd","later","SkillPreview","perfectChance","damageString","getSkillDamageRange","CombatActions","Fragment","EnemyCharacter","previousHealth","ref","useRef","current","usePrevious","from","hp","to","hpp","CombatParty","CombatQueue","first","sortedIds","getSortedIds","bigList","count","Array","_","NEGATIVE_INFINITY","getMax","widthCoef","zIndex","CombatLog","scrollRef","scrollIntoView","behavior","Combat","ForestBg","backgroundSize","makeRoute","path","Component","PartyCharacters","onCharacterClick","defense_key_colors","StatsPreview","textTransform","ITEM_RARITY_COLORS","common","uncommon","rare","mythic","getDamageColor","WeaponPreview","basicAttack","rarityColor","Color","darken","rgb","toString","gradient","ArmorPreview","PartyActiveCharacter","paddingRight","onChange","Party","CombatDomain","rawEnemyParty","setRawEnemyParty","PartyDomain","App","Boolean","window","location","hostname","match","engine","Styletron","store","createStore","combineReducers","compose","applyMiddleware","thunk","ReactDOM","render","StrictMode","debug","debugAfterHydration","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.91194fb6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/heart-beats.6b1fff9c.svg\";","module.exports = __webpack_public_path__ + \"static/media/biceps.e62c221f.svg\";","module.exports = __webpack_public_path__ + \"static/media/brain.ce65603a.svg\";","module.exports = __webpack_public_path__ + \"static/media/eye-target.4c5ae680.svg\";","module.exports = __webpack_public_path__ + \"static/media/juggler.1188c0be.svg\";","module.exports = __webpack_public_path__ + \"static/media/sprint.968b443a.svg\";","module.exports = __webpack_public_path__ + \"static/media/clover.df6a0d57.svg\";","module.exports = __webpack_public_path__ + \"static/media/convergence-target.0d2998bc.svg\";","module.exports = __webpack_public_path__ + \"static/media/star-swirl.3045bd1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/targeted.b4ce8dd7.svg\";","module.exports = __webpack_public_path__ + \"static/media/dodging.3c689d6d.svg\";","module.exports = __webpack_public_path__ + \"static/media/high-shot.eed9def8.svg\";","module.exports = __webpack_public_path__ + \"static/media/shield-impact.54fdc5c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/fire-zone.42e13657.svg\";","module.exports = __webpack_public_path__ + \"static/media/heavy-timer.1072a406.svg\";","module.exports = __webpack_public_path__ + \"static/media/ubisoft-sun.30335592.svg\";","module.exports = __webpack_public_path__ + \"static/media/flat-hammer.dff14efb.svg\";","module.exports = __webpack_public_path__ + \"static/media/hammer-drop.120a92c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/bordered-shield.56c12b47.svg\";","module.exports = __webpack_public_path__ + \"static/media/g-clef.77d209b5.svg\";","module.exports = __webpack_public_path__ + \"static/media/robe.5b61ecba.svg\";","module.exports = __webpack_public_path__ + \"static/media/scale-mail.cb5ff7d5.svg\";","module.exports = __webpack_public_path__ + \"static/media/chest-armor.f1f52a3c.svg\";","module.exports = __webpack_public_path__ + \"static/media/viking-shield.a61f8230.svg\";","module.exports = __webpack_public_path__ + \"static/media/lightning-shield.85367254.svg\";","module.exports = __webpack_public_path__ + \"static/media/leather-boot.89b85474.svg\";","module.exports = __webpack_public_path__ + \"static/media/robin-hood-hat.6bab1449.svg\";","module.exports = __webpack_public_path__ + \"static/media/pointy-hat.d042ac98.svg\";","module.exports = __webpack_public_path__ + \"static/media/visored-helm.1f2ced7f.svg\";","module.exports = __webpack_public_path__ + \"static/media/skills.60519e24.svg\";","module.exports = __webpack_public_path__ + \"static/media/knapsack.62049a62.svg\";","module.exports = __webpack_public_path__ + \"static/media/split-cross.fa0be1a3.svg\";","module.exports = __webpack_public_path__ + \"static/media/flat-forestred.951e7322.jpg\";","export const getRandom = <T>(items: T[]) =>\r\n  items[Math.floor(Math.random() * items.length)]\r\n","export const noneg = (value: number) => (value > 0 ? value : 0)\r\n","import { StatsT, CharacterClassT } from '../types'\r\n\r\nexport const ZERO_STATS: StatsT = {\r\n  vigor: 0,\r\n  strength: 0,\r\n  intelligence: 0,\r\n  perception: 0,\r\n  talent: 0,\r\n  agility: 0,\r\n  luck: 0,\r\n\r\n  armor: 0,\r\n  resistance: 0,\r\n  evasion: 0,\r\n  healthRegen: 0,\r\n\r\n  healthOffset: 0,\r\n  health: 0,\r\n\r\n  criticalChance: 0,\r\n  damageModifier: 0,\r\n  damageOffset: 0,\r\n  damageReflection: 0,\r\n  weaknessModifier: 0,\r\n  goldModifier: 0,\r\n}\r\n\r\nexport const CLASS_STARTING_STATS: Record<CharacterClassT, StatsT> = {\r\n  blacksmith: {\r\n    strength: 76,\r\n    vigor: 80,\r\n    intelligence: 40,\r\n    perception: 52,\r\n    talent: 72,\r\n    agility: 56,\r\n    luck: 50,\r\n    armor: 2,\r\n    resistance: 0,\r\n    evasion: 7,\r\n    healthOffset: 0,\r\n    health: 0,\r\n    healthRegen: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n    damageOffset: 0,\r\n    damageReflection: 0,\r\n    weaknessModifier: 0,\r\n    goldModifier: 0,\r\n  },\r\n  hunter: {\r\n    strength: 52,\r\n    vigor: 66,\r\n    intelligence: 46,\r\n    perception: 78,\r\n    talent: 64,\r\n    agility: 78,\r\n    luck: 50,\r\n    armor: 1,\r\n    resistance: 0,\r\n    evasion: 20,\r\n    healthOffset: 0,\r\n    health: 0,\r\n    healthRegen: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n    damageOffset: 0,\r\n    damageReflection: 0,\r\n    weaknessModifier: 0,\r\n    goldModifier: 0,\r\n  },\r\n  scholar: {\r\n    strength: 42,\r\n    vigor: 60,\r\n    intelligence: 78,\r\n    perception: 66,\r\n    talent: 70,\r\n    agility: 70,\r\n    luck: 50,\r\n    armor: 0,\r\n    resistance: 1,\r\n    evasion: 13,\r\n    healthOffset: 0,\r\n    health: 0,\r\n    healthRegen: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n    damageOffset: 0,\r\n    damageReflection: 0,\r\n    weaknessModifier: 0,\r\n    goldModifier: 0,\r\n  },\r\n  bard: {\r\n    strength: 44,\r\n    vigor: 50,\r\n    intelligence: 70,\r\n    perception: 68,\r\n    talent: 78,\r\n    agility: 68,\r\n    luck: 50,\r\n    armor: 0,\r\n    resistance: 1,\r\n    evasion: 11,\r\n    healthOffset: 0,\r\n    health: 0,\r\n    healthRegen: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n    damageOffset: 0,\r\n    damageReflection: 0,\r\n    weaknessModifier: 0,\r\n    goldModifier: 0,\r\n  },\r\n  enemy: ZERO_STATS,\r\n}\r\n\r\nexport const DAMAGE_BONUS_KEYS: (keyof StatsT)[] = [\r\n  'goldModifier',\r\n  'damageOffset',\r\n  'damageModifier',\r\n  'criticalChance',\r\n]\r\nexport const DEFENSE_BONUS_KEYS: (keyof StatsT)[] = [\r\n  'armor',\r\n  'resistance',\r\n  'evasion',\r\n  'healthRegen',\r\n  'damageReflection',\r\n]\r\nexport const HEALTH_FOCUS_BONUS_KEYS: (keyof StatsT)[] = ['health']\r\nexport const STAT_BONUS_KEYS: (keyof StatsT)[] = [\r\n  'vigor',\r\n  'strength',\r\n  'intelligence',\r\n  'perception',\r\n  'talent',\r\n  'luck',\r\n  'agility',\r\n]\r\n\r\nexport const STAT_KEY_LABELS: Record<keyof StatsT, string> = {\r\n  strength: ' Strength',\r\n  vigor: ' Vigor',\r\n  intelligence: ' Intelligence',\r\n  perception: ' Perception',\r\n  talent: ' Talent',\r\n  agility: ' Agility',\r\n  luck: ' Luck',\r\n  armor: ' Armor',\r\n  resistance: ' Resistance',\r\n  evasion: ' Evasion',\r\n  healthOffset: ' ERROR!',\r\n  health: ' Health',\r\n  healthRegen: ' Health Regen',\r\n  criticalChance: '% Crit Chance',\r\n  damageOffset: ' Raw Damage',\r\n  damageModifier: '% Attack Damage',\r\n  damageReflection: ' Damage Reflection',\r\n  weaknessModifier: '% Recieved Damage',\r\n  goldModifier: '% Gold Recieved',\r\n}\r\n","import { v4 } from 'uuid'\r\n\r\nexport const makeEntity = (name: string = '') => ({\r\n  id: v4(),\r\n  name,\r\n})\r\n","import { StatusTypeT, StatusT } from '../types'\r\nimport { makeEntity } from '../functions/Entity'\r\nimport { ZERO_STATS } from './Stats'\r\n\r\nconst STATUS_DURATION = 5\r\nexport const STATUS_EFFECTS: Record<StatusTypeT, StatusT> = {\r\n  bleeding: {\r\n    ...makeEntity('Bleeding'),\r\n    type: 'bleeding',\r\n    canStack: false,\r\n    duration: STATUS_DURATION,\r\n    traits: [],\r\n    commitChance: 50,\r\n    committedTraits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          healthOffset: -10,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  burning: {\r\n    ...makeEntity('Burning'),\r\n    type: 'burning',\r\n    canStack: false,\r\n    duration: STATUS_DURATION,\r\n    traits: [],\r\n    commitChance: 100,\r\n    committedTraits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          healthOffset: -10,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  frozen: {\r\n    ...makeEntity('Frozen'),\r\n    type: 'frozen',\r\n    canStack: false,\r\n    duration: STATUS_DURATION,\r\n    traits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          weaknessModifier: 0.25,\r\n        },\r\n      },\r\n    ],\r\n    commitChance: 0,\r\n    committedTraits: [],\r\n  },\r\n  poisoned: {\r\n    ...makeEntity('Poisoned'),\r\n    type: 'poisoned',\r\n    canStack: true,\r\n    duration: STATUS_DURATION,\r\n    traits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          strength: -5,\r\n          intelligence: -5,\r\n          perception: -5,\r\n          talent: -5,\r\n        },\r\n      },\r\n    ],\r\n    commitChance: 100,\r\n    committedTraits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          healthOffset: -5,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  targeted: {\r\n    ...makeEntity('Targeted'),\r\n    type: 'targeted',\r\n    duration: 5,\r\n    traits: [],\r\n    committedTraits: [],\r\n    commitChance: 100,\r\n    canStack: false,\r\n    description: 'All enemies will attack this character, if able.',\r\n  },\r\n  dazed: {\r\n    ...makeEntity('Dazed'),\r\n    type: 'dazed',\r\n    duration: 5,\r\n    traits: [],\r\n    committedTraits: [],\r\n    commitChance: 100,\r\n    canStack: false,\r\n    description: 'Character is temporarily halted on the combat queue.',\r\n  },\r\n  evasive: {\r\n    ...makeEntity('Evasive'),\r\n    type: 'evasive',\r\n    duration: 5,\r\n    traits: [],\r\n    committedTraits: [],\r\n    commitChance: 100,\r\n    canStack: false,\r\n    description: 'Non-perfect attacks will miss when targeting this character.',\r\n  },\r\n}\r\n","import { TraitT } from '../types'\r\nimport { ZERO_STATS } from './Stats'\r\n\r\nexport const ZERO_TRAIT: TraitT = {\r\n  duration: -1,\r\n  stats: ZERO_STATS,\r\n}\r\n","import { StatsT } from '../types'\r\nimport { ZERO_STATS } from '../objects'\r\n\r\nexport const combineStats = (...stats: StatsT[]): StatsT => {\r\n  return stats.reduce(\r\n    (p, c) => ({\r\n      vigor: p.vigor + c.vigor,\r\n      strength: p.strength + c.strength,\r\n      intelligence: p.intelligence + c.intelligence,\r\n      perception: p.perception + c.perception,\r\n      talent: p.talent + c.talent,\r\n      agility: p.agility + c.agility,\r\n      luck: p.luck + c.luck,\r\n      armor: p.armor + c.armor,\r\n      resistance: p.resistance + c.resistance,\r\n      evasion: p.evasion + c.evasion,\r\n      criticalChance: p.criticalChance + c.criticalChance,\r\n      damageModifier: p.damageModifier + c.damageModifier,\r\n      damageOffset: p.damageOffset + c.damageOffset,\r\n      damageReflection: p.damageReflection + c.damageReflection,\r\n      healthOffset: p.healthOffset + c.healthOffset,\r\n      health: p.health + c.health,\r\n      healthRegen: p.healthRegen + c.healthRegen,\r\n      weaknessModifier: p.weaknessModifier + c.weaknessModifier,\r\n      goldModifier: p.goldModifier + c.goldModifier,\r\n    }),\r\n    ZERO_STATS,\r\n  )\r\n}\r\n","import { TraitT, HasTraitsT, HasCommittedTraits } from '../types'\r\nimport { combineStats } from './Stats'\r\nimport { ZERO_TRAIT } from '../objects'\r\n\r\nexport const combineTraits = (...traits: TraitT[]): TraitT => {\r\n  return traits.reduce(\r\n    (p, c) => ({\r\n      stats: combineStats(p.stats, c.stats),\r\n      duration: -1,\r\n    }),\r\n    ZERO_TRAIT,\r\n  )\r\n}\r\n\r\nexport const getTraitsFromObjects = (parents: HasTraitsT[]) => {\r\n  return parents.reduce((p, c) => {\r\n    return [...p, ...c.traits]\r\n  }, [] as TraitT[])\r\n}\r\nexport const getCommittedTraitsFromObjects = (\r\n  parents: HasCommittedTraits[],\r\n) => {\r\n  return parents.reduce((p, c) => {\r\n    return [...p, ...c.committedTraits]\r\n  }, [] as TraitT[])\r\n}\r\n","import { StatsT, CheckT } from '../types'\r\n\r\nexport const makeCheck = (key: keyof StatsT, offset?: number): CheckT => ({\r\n  key,\r\n  offset,\r\n})\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/makeCheck'\r\n\r\nexport const SMASH: SkillT = {\r\n  ...makeEntity('Smash'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  isBasicAttack: true,\r\n  rolls: [makeCheck('strength'), makeCheck('strength'), makeCheck('strength')],\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/makeCheck'\r\n\r\nexport const SHOCKWAVE: SkillT = {\r\n  ...makeEntity('Shockwave'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  isBasicAttack: false,\r\n  rolls: [\r\n    makeCheck('strength', -10),\r\n    makeCheck('strength', -10),\r\n    makeCheck('strength', -10),\r\n    makeCheck('strength', -10),\r\n  ],\r\n  perfectSplash: true,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n}\r\n","import { WeaponT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { SMASH } from '../skills/smash'\r\nimport { SHOCKWAVE } from '../skills/shockwave'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const BLACKSMITHS_HAMMER: WeaponT = {\r\n  ...makeEntity(`Blacksmith's Hammer`),\r\n  itemType: 'weapon',\r\n  type: 'hammer',\r\n  rarity: 'common',\r\n  twoHand: false,\r\n  attackType: 'melee',\r\n  damage: { type: 'physical', damage: 10 },\r\n  traits: [],\r\n  skills: [SMASH, SHOCKWAVE],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/makeCheck'\r\n\r\nexport const SHOT: SkillT = {\r\n  ...makeEntity('Shot'),\r\n  // TODO Damage Modifier for flying, etc...\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  isBasicAttack: true,\r\n  rolls: [\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n  ],\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/makeCheck'\r\n\r\nexport const SNIPE_SHOT: SkillT = {\r\n  ...makeEntity('Snipe Shot'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  isBasicAttack: false,\r\n  rolls: [\r\n    makeCheck('perception', -10),\r\n    makeCheck('perception', -10),\r\n    makeCheck('perception', -10),\r\n  ],\r\n  perfectSplash: false,\r\n  perfectPierce: true,\r\n  perfectStatus: [],\r\n}\r\n","import { WeaponT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\nimport { SHOT } from '../skills/shot'\r\nimport { SNIPE_SHOT } from '../skills/snipe_shot'\r\n\r\nexport const HUNTING_BOW: WeaponT = {\r\n  ...makeEntity(`Hunting Bow`),\r\n  itemType: 'weapon',\r\n  type: 'bow',\r\n  rarity: 'common',\r\n  twoHand: true,\r\n  attackType: 'ranged',\r\n  damage: { type: 'physical', damage: 6 },\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        evasion: 3,\r\n      },\r\n    },\r\n  ],\r\n  skills: [SHOT, SNIPE_SHOT],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/makeCheck'\r\n\r\nexport const SURGE: SkillT = {\r\n  ...makeEntity('Surge'),\r\n  damageModifier: -0.2,\r\n  targetType: 'single',\r\n  damage: true,\r\n  isBasicAttack: true,\r\n  rolls: [\r\n    makeCheck('intelligence'),\r\n    makeCheck('intelligence'),\r\n    makeCheck('intelligence'),\r\n  ],\r\n  perfectSplash: false,\r\n  perfectPierce: true,\r\n  perfectStatus: [],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/makeCheck'\r\n\r\nexport const AREA_BLAST: SkillT = {\r\n  ...makeEntity('Area Blast'),\r\n  damageModifier: -0.5,\r\n  targetType: 'group',\r\n  damage: true,\r\n  isBasicAttack: false,\r\n  rolls: [\r\n    makeCheck('intelligence', -5),\r\n    makeCheck('intelligence', -5),\r\n    makeCheck('intelligence', -5),\r\n  ],\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n}\r\n","import { WeaponT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { SURGE } from '../skills/surge'\r\nimport { AREA_BLAST } from '../skills/area_blast'\r\n\r\nexport const SCHOLARS_BOOK: WeaponT = {\r\n  ...makeEntity(`Scholar's Book`),\r\n  itemType: 'weapon',\r\n  type: 'tome',\r\n  rarity: 'common',\r\n  twoHand: true,\r\n  attackType: 'ranged',\r\n  damage: { type: 'magic', damage: 6 },\r\n  traits: [],\r\n  skills: [SURGE, AREA_BLAST],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/makeCheck'\r\n\r\nexport const ALTO: SkillT = {\r\n  ...makeEntity('Alto'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  isBasicAttack: true,\r\n  rolls: [makeCheck('talent'), makeCheck('talent'), makeCheck('talent')],\r\n  perfectSplash: false,\r\n  perfectPierce: true,\r\n  perfectStatus: [],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/makeCheck'\r\n\r\nexport const DAZZLE: SkillT = {\r\n  ...makeEntity('Dazzle'),\r\n  damageModifier: -0.5,\r\n  targetType: 'single',\r\n  damage: false,\r\n  isBasicAttack: false,\r\n  rolls: [makeCheck('talent', -6), makeCheck('talent', -5)],\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [{ type: 'dazed', duration: 4 }],\r\n}\r\n","import { WeaponT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ALTO } from '../skills/alto'\r\nimport { DAZZLE } from '../skills/Dazzle'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const SIMPLE_LUTE: WeaponT = {\r\n  ...makeEntity(`Simple Lute`),\r\n  itemType: 'weapon',\r\n  type: 'lute',\r\n  rarity: 'common',\r\n  twoHand: true,\r\n  attackType: 'ranged',\r\n  damage: { type: 'magic', damage: 6 },\r\n  // TODO: Gold Multiplier\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        goldModifier: 12,\r\n      },\r\n    },\r\n  ],\r\n  skills: [ALTO, DAZZLE],\r\n}\r\n","import { CharacterClassT, WeaponT } from '../types'\r\nimport { BLACKSMITHS_HAMMER } from './weapons/blacksmiths_hammer'\r\nimport { HUNTING_BOW } from './weapons/hunting_bow'\r\nimport { SCHOLARS_BOOK } from './weapons/scholars_book'\r\nimport { SIMPLE_LUTE } from './weapons/simple_lute'\r\n\r\nexport const CLASS_STARTING_WEAPONS: Partial<Record<\r\n  CharacterClassT,\r\n  WeaponT\r\n>> = {\r\n  blacksmith: BLACKSMITHS_HAMMER,\r\n  hunter: HUNTING_BOW,\r\n  scholar: SCHOLARS_BOOK,\r\n  bard: SIMPLE_LUTE,\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/makeCheck'\r\n\r\nexport const TAUNT: SkillT = {\r\n  ...makeEntity('Taunt'),\r\n  damageModifier: 0,\r\n  targetType: 'self',\r\n  damage: false,\r\n  isBasicAttack: false,\r\n  rolls: [makeCheck('vigor'), makeCheck('vigor')],\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [\r\n    {\r\n      type: 'targeted',\r\n      duration: 5,\r\n    },\r\n  ],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\nimport { TAUNT } from '../skills/taunt'\r\n\r\nexport const SIMPLE_IRON_SHIELD: ArmorT = {\r\n  ...makeEntity('Simple Iron Shield'),\r\n  itemType: 'armor',\r\n  rarity: 'common',\r\n  type: 'shield',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        armor: 1,\r\n      },\r\n    },\r\n  ],\r\n  skills: [TAUNT],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const EXPLORERS_CLOAK: ArmorT = {\r\n  ...makeEntity(`Explorer's Cloak`),\r\n  itemType: 'armor',\r\n  rarity: 'uncommon',\r\n  type: 'magic-armor',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        armor: 3,\r\n        resistance: 6,\r\n        evasion: 6,\r\n        perception: 3,\r\n        talent: -3,\r\n      },\r\n    },\r\n  ],\r\n  skills: [],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const EXPLORERS_HAT: ArmorT = {\r\n  ...makeEntity(`Explorer's Hat`),\r\n  itemType: 'armor',\r\n  rarity: 'common',\r\n  type: 'hat',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        resistance: 3,\r\n        evasion: 3,\r\n        perception: 2,\r\n      },\r\n    },\r\n  ],\r\n  skills: [],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const FUR_ARMOR: ArmorT = {\r\n  ...makeEntity(`Fur Armor`),\r\n  itemType: 'armor',\r\n  rarity: 'uncommon',\r\n  type: 'cloth-armor',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        armor: 5,\r\n        resistance: 5,\r\n        health: 5,\r\n        healthRegen: 2,\r\n        vigor: 4,\r\n      },\r\n    },\r\n  ],\r\n  skills: [],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const ADVENTURE_BOOTS: ArmorT = {\r\n  ...makeEntity(`Adventure Boots`),\r\n  itemType: 'armor',\r\n  rarity: 'common',\r\n  type: 'footwear',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        armor: 3,\r\n        evasion: 4,\r\n        agility: 3,\r\n      },\r\n    },\r\n  ],\r\n  skills: [],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const ADVENTURE_CLOAK: ArmorT = {\r\n  ...makeEntity(`Adventure Cloak`),\r\n  itemType: 'armor',\r\n  rarity: 'uncommon',\r\n  type: 'magic-armor',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        armor: 5,\r\n        resistance: 5,\r\n        perception: 4,\r\n        talent: -3,\r\n      },\r\n    },\r\n  ],\r\n  skills: [],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const FUR_BOOTS: ArmorT = {\r\n  ...makeEntity(`Fur Boots`),\r\n  itemType: 'armor',\r\n  rarity: 'common',\r\n  type: 'footwear',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        armor: 2,\r\n        resistance: 2,\r\n        healthRegen: 1,\r\n        vigor: 4,\r\n      },\r\n    },\r\n  ],\r\n  skills: [],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const PERFORMERS_VEST: ArmorT = {\r\n  ...makeEntity(`Performer's Vest`),\r\n  itemType: 'armor',\r\n  rarity: 'uncommon',\r\n  type: 'cloth-armor',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        armor: 6,\r\n        resistance: 6,\r\n        perception: -4,\r\n        talent: 4,\r\n        luck: 4,\r\n      },\r\n    },\r\n  ],\r\n  skills: [],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const PERFORMERS_BOOTS: ArmorT = {\r\n  ...makeEntity(`Performer's Boots`),\r\n  itemType: 'armor',\r\n  rarity: 'common',\r\n  type: 'footwear',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        armor: 2,\r\n        resistance: 3,\r\n        perception: -3,\r\n        talent: 3,\r\n        luck: 3,\r\n      },\r\n    },\r\n  ],\r\n  skills: [],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const EXPLORERS_BOOTS: ArmorT = {\r\n  ...makeEntity(`Explorer's Boots`),\r\n  itemType: 'armor',\r\n  rarity: 'common',\r\n  type: 'footwear',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        armor: 2,\r\n        evasion: 3,\r\n        agility: 2,\r\n      },\r\n    },\r\n  ],\r\n  skills: [],\r\n}\r\n","import { CharacterClassT, ArmorT } from '../types'\r\nimport { SIMPLE_IRON_SHIELD } from './armor/simple_iron_shield'\r\nimport { EXPLORERS_CLOAK } from './armor/explorers_cloak'\r\nimport { EXPLORERS_HAT } from './armor/explorers_hat'\r\nimport { FUR_ARMOR } from './armor/fur_armor'\r\nimport { ADVENTURE_BOOTS } from './armor/adventure_boots'\r\nimport { ADVENTURE_CLOAK } from './armor/adventure_cloak'\r\nimport { FUR_BOOTS } from './armor/fur_boots'\r\nimport { PERFORMERS_VEST } from './armor/performers_vest'\r\nimport { PERFORMERS_BOOTS } from './armor/performers_boots'\r\nimport { EXPLORERS_BOOTS } from './armor/explorers_boots'\r\n\r\nexport const CLASS_STARTING_ARMOR: Record<CharacterClassT, ArmorT[]> = {\r\n  blacksmith: [SIMPLE_IRON_SHIELD, FUR_ARMOR, FUR_BOOTS],\r\n  hunter: [ADVENTURE_CLOAK, ADVENTURE_BOOTS],\r\n  scholar: [EXPLORERS_CLOAK, EXPLORERS_HAT, EXPLORERS_BOOTS],\r\n  bard: [PERFORMERS_VEST, PERFORMERS_BOOTS],\r\n  enemy: [],\r\n}\r\n","import { SkillT } from '../../../types'\r\nimport { makeEntity } from '../../../functions/Entity'\r\nimport { makeCheck } from '../../../functions/makeCheck'\r\n\r\nexport const BITE: SkillT = {\r\n  ...makeEntity('Bite'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  isBasicAttack: true,\r\n  rolls: [\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n  ],\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n}\r\n","import { CharacterT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { BITE } from '../skills/enemy/bite'\r\n\r\nexport const TIMBERWOLF = (): CharacterT => {\r\n  return {\r\n    ...makeEntity('Timberwolf'),\r\n    isCharacter: true,\r\n    partyId: '',\r\n    level: 1,\r\n    class: 'enemy',\r\n    stats: {\r\n      vigor: -80,\r\n      strength: 52,\r\n      intelligence: 40,\r\n      perception: 52,\r\n      talent: 30,\r\n      agility: 65,\r\n      luck: 50,\r\n      armor: 0,\r\n      resistance: 0,\r\n      evasion: 10,\r\n      healthOffset: 0,\r\n      health: -1,\r\n      healthRegen: 0,\r\n      criticalChance: 5,\r\n      damageModifier: 0,\r\n      damageOffset: 0,\r\n      damageReflection: 0,\r\n      weaknessModifier: 0,\r\n      goldModifier: 0,\r\n    },\r\n    traits: [],\r\n    armor: [],\r\n    status: [],\r\n    weapon: {\r\n      ...makeEntity('Wolf Fangs'),\r\n      itemType: 'weapon',\r\n      rarity: 'common',\r\n      type: 'wolf-fangs',\r\n      twoHand: true,\r\n      attackType: 'melee',\r\n      damage: {\r\n        damage: 6,\r\n        type: 'physical',\r\n      },\r\n      traits: [],\r\n      skills: [BITE],\r\n    },\r\n  }\r\n}\r\n","import { SkillT } from '../../../types'\r\nimport { makeEntity } from '../../../functions/Entity'\r\nimport { makeCheck } from '../../../functions/makeCheck'\r\n\r\nexport const SLAP: SkillT = {\r\n  ...makeEntity('Slap'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  isBasicAttack: true,\r\n  rolls: [\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n  ],\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n}\r\n","import { CharacterT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { SLAP } from '../skills/enemy/slap'\r\n\r\nexport const VALE_IMP = (): CharacterT => {\r\n  return {\r\n    ...makeEntity('Vale Imp'),\r\n    isCharacter: true,\r\n    partyId: '',\r\n    level: 1,\r\n    class: 'enemy',\r\n    stats: {\r\n      vigor: -80,\r\n      strength: 40,\r\n      intelligence: 40,\r\n      perception: 52,\r\n      talent: 30,\r\n      agility: 76,\r\n      luck: 50,\r\n      armor: 0,\r\n      resistance: 0,\r\n      evasion: 10,\r\n      health: 0,\r\n      healthOffset: 0,\r\n      healthRegen: 0,\r\n      criticalChance: 5,\r\n      damageModifier: 0,\r\n      damageOffset: 0,\r\n      damageReflection: 0,\r\n      weaknessModifier: 0,\r\n      goldModifier: 0,\r\n    },\r\n    traits: [],\r\n    armor: [],\r\n    status: [],\r\n    weapon: {\r\n      ...makeEntity('Imp Fists'),\r\n      itemType: 'weapon',\r\n      rarity: 'common',\r\n      type: 'imp-fists',\r\n      twoHand: true,\r\n      attackType: 'melee',\r\n      damage: {\r\n        damage: 6,\r\n        type: 'physical',\r\n      },\r\n      traits: [],\r\n      skills: [SLAP],\r\n    },\r\n  }\r\n}\r\n","import { SkillT } from '../../../types'\r\nimport { makeEntity } from '../../../functions/Entity'\r\nimport { makeCheck } from '../../../functions/makeCheck'\r\n\r\nexport const IMPALE: SkillT = {\r\n  ...makeEntity('Impale'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  isBasicAttack: true,\r\n  rolls: [makeCheck('strength'), makeCheck('strength'), makeCheck('strength')],\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n}\r\n","import { CharacterT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { IMPALE } from '../skills/enemy/impale'\r\n\r\nexport const BEASTMAN = (): CharacterT => {\r\n  return {\r\n    ...makeEntity('Beastman'),\r\n    isCharacter: true,\r\n    partyId: '',\r\n    level: 1,\r\n    class: 'enemy',\r\n    stats: {\r\n      vigor: -80,\r\n      strength: 52,\r\n      intelligence: 40,\r\n      perception: 52,\r\n      talent: 30,\r\n      agility: 60,\r\n      luck: 50,\r\n      armor: 2,\r\n      resistance: 0,\r\n      evasion: 10,\r\n      healthOffset: 0,\r\n      health: 0,\r\n      healthRegen: 0,\r\n      criticalChance: 5,\r\n      damageModifier: 0,\r\n      damageOffset: 0,\r\n      damageReflection: 0,\r\n      weaknessModifier: 0,\r\n      goldModifier: 0,\r\n    },\r\n    traits: [],\r\n    armor: [],\r\n    status: [],\r\n    weapon: {\r\n      ...makeEntity('Beastman Spear'),\r\n      itemType: 'weapon',\r\n      rarity: 'common',\r\n      type: 'spear',\r\n      twoHand: true,\r\n      attackType: 'melee',\r\n      damage: {\r\n        damage: 8,\r\n        type: 'physical',\r\n      },\r\n      traits: [],\r\n      skills: [IMPALE],\r\n    },\r\n  }\r\n}\r\n","import {\r\n  CharacterT,\r\n  ProcessedCharacterT,\r\n  StatsT,\r\n  TraitT,\r\n  DamageTypeT,\r\n  StatusTypeT,\r\n  CheckT,\r\n  CharacterClassT,\r\n  EntityT,\r\n  WeaponT,\r\n  StatusT,\r\n} from '../types'\r\nimport { STATUS_EFFECTS, CLASS_STARTING_STATS } from '../objects'\r\nimport {\r\n  combineTraits,\r\n  getTraitsFromObjects,\r\n  getCommittedTraitsFromObjects,\r\n} from './Traits'\r\nimport { processWeapon } from './Weapon'\r\nimport { getSkillsFromObjects } from './Skill'\r\nimport { makeEntity } from './Entity'\r\nimport { combineStats } from './Stats'\r\nimport { CLASS_STARTING_WEAPONS } from '../objects/Weapon'\r\nimport { CLASS_STARTING_ARMOR } from '../objects/Armor'\r\nimport { ALL_ENEMIES } from '../objects/enemies'\r\nimport { getRandom } from '../util'\r\n\r\nexport const checkForProcessedCharacter = (character: CharacterT) => {\r\n  if ((character as ProcessedCharacterT).processed) {\r\n    throw new Error('No Processed Characters Allowed')\r\n  }\r\n}\r\n\r\nexport const isCharacter = (e: EntityT) => e && (e as CharacterT).isCharacter\r\n\r\nexport const getStatusEffects = (character: CharacterT): StatusT[] => {\r\n  return character.status.map((status) => ({\r\n    ...STATUS_EFFECTS[status.type],\r\n    duration: status.duration,\r\n  }))\r\n}\r\n\r\nexport const getTraits = (character: CharacterT): TraitT[] => {\r\n  checkForProcessedCharacter(character)\r\n  const ret = [\r\n    ...character.traits,\r\n    ...character.weapon.traits,\r\n    ...getTraitsFromObjects(character.armor),\r\n    ...getTraitsFromObjects(getStatusEffects(character)),\r\n  ]\r\n  return ret\r\n}\r\n\r\nexport const getSkills = (character: CharacterT) => {\r\n  checkForProcessedCharacter(character)\r\n  return [...character.weapon.skills, ...getSkillsFromObjects(character.armor)]\r\n}\r\n\r\nexport const processCharacter = (\r\n  character: CharacterT,\r\n): ProcessedCharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  const traits = getTraits(character)\r\n  const combinedTrait = combineTraits(...traits)\r\n  const stats: StatsT = combineStats(character.stats, combinedTrait.stats)\r\n  const weapon = processWeapon(character.weapon)\r\n  const statusEffects = getStatusEffects(character)\r\n  const skills = getSkills(character)\r\n  const hVigor =\r\n    CLASS_STARTING_STATS[character.class].vigor || character.stats.vigor\r\n  const startingHealth = 25 + Math.floor(0.1 * hVigor)\r\n  const health =\r\n    Math.floor(\r\n      startingHealth + character.level + 0.1 * character.level * stats.vigor,\r\n    ) + stats.health\r\n\r\n  return {\r\n    ...character,\r\n    health,\r\n    stats,\r\n    rawStats: character.stats,\r\n    weapon,\r\n    statusEffects,\r\n    skills,\r\n    dead: stats.healthOffset >= health,\r\n    processed: true,\r\n  }\r\n}\r\n\r\nexport const makeCharacter = (\r\n  characterClass: CharacterClassT,\r\n  partyId: string = '',\r\n): CharacterT => {\r\n  return {\r\n    ...makeEntity(),\r\n    isCharacter: true,\r\n    partyId,\r\n    level: 1,\r\n    class: characterClass,\r\n    stats: CLASS_STARTING_STATS[characterClass],\r\n    traits: [],\r\n    weapon: CLASS_STARTING_WEAPONS[characterClass] as WeaponT,\r\n    armor: CLASS_STARTING_ARMOR[characterClass],\r\n    status: [],\r\n  }\r\n}\r\n\r\nexport const makeEnemy = () => {\r\n  const staicEnemy = getRandom(ALL_ENEMIES)\r\n  if (staicEnemy) return staicEnemy()\r\n  return makeCharacter(getRandom(['blacksmith', 'hunter', 'scholar']))\r\n}\r\n\r\nexport const commitTrait = (\r\n  character: CharacterT,\r\n  trait: TraitT,\r\n): CharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  return {\r\n    ...character,\r\n    stats: combineStats(character.stats, trait.stats),\r\n  }\r\n}\r\nexport const commitStatusEffects = (character: CharacterT): CharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  const statusEffects = getStatusEffects(character)\r\n  const traits = getCommittedTraitsFromObjects(statusEffects)\r\n  return traits.reduce(\r\n    (char, trait) => {\r\n      return commitTrait(char, trait)\r\n    },\r\n    { ...character },\r\n  )\r\n}\r\nexport const decrementStatusDurations = (character: CharacterT): CharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  console.log(character.name, character.status)\r\n  return {\r\n    ...character,\r\n    status: character.status\r\n      .map((status) => ({ ...status, duration: status.duration - 1 }))\r\n      .filter((status) => status.duration !== 0),\r\n  }\r\n}\r\nexport const hasStatus = (character: CharacterT, statusType: StatusTypeT) => {\r\n  return character.status.map((s) => s.type).includes(statusType)\r\n}\r\nexport const findStatus = (character: CharacterT, statusType: StatusTypeT) => {\r\n  return character.status.find((s) => s.type === statusType)\r\n}\r\nexport const addStatus = (character: CharacterT, statusType: StatusTypeT) => {\r\n  const statusEffect = STATUS_EFFECTS[statusType]\r\n  const existingStatus = findStatus(character, statusType)\r\n  if (existingStatus && !statusEffect.canStack) {\r\n    return {\r\n      ...character,\r\n      status: [\r\n        ...character.status.filter((t) => t.type !== statusType),\r\n        { type: statusType, duration: statusEffect.duration },\r\n      ],\r\n    }\r\n  }\r\n  if (existingStatus && statusEffect.canStack) {\r\n    return {\r\n      ...character,\r\n      status: [\r\n        ...character.status.filter((t) => t.type !== statusType),\r\n        {\r\n          type: statusType,\r\n          duration: statusEffect.duration,\r\n          stack: (existingStatus.stack || 0) + 1,\r\n        },\r\n      ],\r\n    }\r\n  }\r\n  return {\r\n    ...character,\r\n    status: [\r\n      ...character.status,\r\n      { type: statusType, duration: statusEffect.duration, stack: 0 },\r\n    ],\r\n  }\r\n}\r\nexport const addMultipleStatus = (\r\n  character: CharacterT,\r\n  statusTypes: StatusTypeT[],\r\n) => {\r\n  return statusTypes.reduce(\r\n    (char, statusType) => {\r\n      return addStatus(char, statusType)\r\n    },\r\n    { ...character },\r\n  )\r\n}\r\n\r\nexport const getCharacterStat = (character: CharacterT, statValue: CheckT) => {\r\n  const resolvedStatValue = statValue.key ? character.stats[statValue.key] : 0\r\n  return resolvedStatValue + (statValue.offset || 0)\r\n}\r\n\r\nexport const getDamageResistance = (\r\n  character: ProcessedCharacterT,\r\n  damageType: DamageTypeT,\r\n) => {\r\n  if (damageType === 'physical') return character.stats.armor\r\n  if (damageType === 'magic') return character.stats.resistance\r\n  return 0\r\n}\r\n\r\nexport const addStatusAndTags = (\r\n  character: CharacterT,\r\n  status: StatusTypeT[],\r\n) => {\r\n  return addMultipleStatus(character, status)\r\n}\r\n","import { WeaponT, ProcessedWeaponT } from '../types'\r\n\r\nexport const processWeapon = (weapon: WeaponT): ProcessedWeaponT => {\r\n  return {\r\n    ...weapon,\r\n    processed: true,\r\n  }\r\n}\r\n","import { DiceRoll } from 'rpg-dice-roller'\r\nimport { ProcessedCharacterT, CheckResultT, CheckT, StatsT } from '../types'\r\nimport { getCharacterStat } from './Character'\r\n\r\nexport const resolveCheck = (\r\n  character: ProcessedCharacterT,\r\n  check: CheckT,\r\n): CheckResultT => {\r\n  const statValue = getCharacterStat(character, check)\r\n  const roll = new DiceRoll('1d100')\r\n  return {\r\n    input: check,\r\n    result: roll.total <= statValue,\r\n    total: roll.total,\r\n    averageTotal: roll.averageTotal,\r\n    maxTotal: roll.maxTotal,\r\n    minTotal: roll.minTotal,\r\n    output: roll.output,\r\n  }\r\n}\r\n\r\nexport const getChecksProbability = (\r\n  character: ProcessedCharacterT,\r\n  checks: CheckT[],\r\n): number => {\r\n  const statValues = checks.map((check) => getCharacterStat(character, check))\r\n  const result = statValues.reduce((p, c) => {\r\n    return p * (c / 100)\r\n  }, 1)\r\n  return result\r\n}\r\n\r\nexport const getPassedCount = (results: CheckResultT[]): number =>\r\n  results.filter((r) => r.result).length\r\n\r\nexport const didAllPass = (results: CheckResultT[]): boolean =>\r\n  results.every((r) => r.result)\r\n","import { CharacterT, PartyT, ProcessedPartyT, EntityT } from '../types'\r\nimport {\r\n  checkForProcessedCharacter,\r\n  processCharacter,\r\n  makeEnemy,\r\n} from './Character'\r\nimport { makeEntity } from './Entity'\r\nimport { TIMBERWOLF } from '../objects/enemies/timberwolf'\r\nimport { VALE_IMP } from '../objects/enemies/vale_imp'\r\nimport { BEASTMAN } from '../objects/enemies/beastman'\r\n\r\nexport const isParty = (e: EntityT) => e && (e as PartyT).isParty\r\n\r\nexport const checkForProcessedParty = (party: PartyT) => {\r\n  if ((party as ProcessedPartyT).processed) {\r\n    throw new Error('No Processed Parties Allowed')\r\n  }\r\n  party.characters.forEach((character) => {\r\n    checkForProcessedCharacter(character)\r\n  })\r\n}\r\n\r\nexport const makeParty = (characterCount: number = 0): PartyT => {\r\n  return {\r\n    ...makeEntity(),\r\n    isParty: true,\r\n    items: [],\r\n    characters: [TIMBERWOLF(), VALE_IMP(), BEASTMAN()],\r\n  }\r\n}\r\n\r\nexport const findCharacterInParty = <\r\n  T extends PartyT = PartyT,\r\n  R extends CharacterT = CharacterT\r\n>(\r\n  party: T,\r\n  id: string,\r\n): R | undefined => {\r\n  return (party.characters as R[]).find((c) => c.id === id)\r\n}\r\n\r\nexport const updateCharacter = (\r\n  party: PartyT,\r\n  characterId: string,\r\n  updater: (character: CharacterT) => CharacterT,\r\n): PartyT => {\r\n  checkForProcessedParty(party)\r\n  return {\r\n    ...party,\r\n    characters: party.characters.map((c) =>\r\n      c.id === characterId ? updater(c) : c,\r\n    ),\r\n  }\r\n}\r\n\r\nexport const processParty = (party: PartyT): ProcessedPartyT => {\r\n  return {\r\n    ...party,\r\n    processed: true,\r\n    characters: party.characters.map((c) => ({\r\n      ...processCharacter(c),\r\n      partyId: party.id,\r\n    })),\r\n  }\r\n}\r\n","import { StatusTypeT } from '../types'\r\n\r\nexport type PerfectKeyT = StatusTypeT | 'splash' | 'pierce'\r\nexport const PERFECT_DISPLAY_INFO: Record<PerfectKeyT, string> = {\r\n  splash: 'Splash Damage',\r\n  pierce: 'Ignore Resistances',\r\n  bleeding: 'Bleed',\r\n  burning: 'Burn',\r\n  frozen: 'Freeze',\r\n  poisoned: 'Poison',\r\n  targeted: 'Taunt Enemies',\r\n  dazed: 'Daze',\r\n  evasive: 'Become Evasive',\r\n}\r\n","import { DamageT } from '../types'\r\n\r\nexport const getSplashDamage = (rawDamage: DamageT) => {\r\n  return {\r\n    type: rawDamage.type,\r\n    damage: Math.floor(rawDamage.damage / 2),\r\n  }\r\n}\r\n","import { v4 } from 'uuid'\r\n\r\nexport const PLAYER_PARTY_ID = v4()\r\n","import {\r\n  ProcessedCharacterT,\r\n  SourceSkillResultT,\r\n  HasSkillsT,\r\n  SkillT,\r\n  DamageT,\r\n  TargetSkillResultT,\r\n  SkillTargetT,\r\n  ProcessedPartyT,\r\n  TargetTypeT,\r\n} from '../types'\r\nimport { resolveCheck, getPassedCount, didAllPass } from './Roll'\r\nimport { getDamageResistance, isCharacter, hasStatus } from './Character'\r\nimport { isParty } from './Party'\r\nimport { noneg } from '../util'\r\nimport { PerfectKeyT, PERFECT_DISPLAY_INFO } from '../objects/Skills'\r\nimport { getSplashDamage } from './Damage'\r\nimport { PLAYER_PARTY_ID } from '../objects/Party'\r\n\r\nexport const getSkillsFromObjects = (parents: HasSkillsT[]) => {\r\n  return parents.reduce((p, c) => {\r\n    return [...p, ...c.skills]\r\n  }, [] as SkillT[])\r\n}\r\n\r\nexport const resolveSkillTarget = (\r\n  target: SkillTargetT,\r\n): ProcessedCharacterT[] => {\r\n  switch (target.type) {\r\n    case 'single':\r\n      return target.character ? [target.character] : []\r\n    case 'ally':\r\n      return target.character ? [target.character] : []\r\n    case 'self':\r\n      return target.character ? [target.character] : []\r\n    case 'party':\r\n      return target.party?.characters || []\r\n    case 'group':\r\n      return target.party?.characters || []\r\n    default:\r\n      return []\r\n  }\r\n}\r\n\r\nexport const makeSkillTarget = (\r\n  type: TargetTypeT,\r\n  target: ProcessedCharacterT | ProcessedPartyT,\r\n): SkillTargetT => {\r\n  return {\r\n    type,\r\n    character: isCharacter(target)\r\n      ? (target as ProcessedCharacterT)\r\n      : undefined,\r\n    party: isParty(target) ? (target as ProcessedPartyT) : undefined,\r\n  }\r\n}\r\n\r\nexport const getSourceSkillResult = (\r\n  source: ProcessedCharacterT,\r\n  skill: SkillT,\r\n): SourceSkillResultT => {\r\n  const rollResults = skill.rolls.map((check) => resolveCheck(source, check))\r\n  const passedCount = getPassedCount(rollResults)\r\n  const perfect = didAllPass(rollResults)\r\n  const criticalHitResult = resolveCheck(source, {\r\n    offset: source.stats.criticalChance,\r\n  })\r\n  const criticalSuccess = perfect ? criticalHitResult.result : false\r\n  const accuracySuccess = passedCount >= 1\r\n\r\n  const rawDamage: DamageT = {\r\n    damage: Math.round(\r\n      (passedCount * getSkillDamage(skill, source).damage) / rollResults.length,\r\n    ),\r\n    type: source.weapon.damage.type,\r\n  }\r\n  const splashDamage: DamageT =\r\n    skill.perfectSplash && perfect\r\n      ? getSplashDamage(rawDamage)\r\n      : { type: rawDamage.type, damage: 0 }\r\n  return {\r\n    rollResults,\r\n    skill,\r\n    source,\r\n    accuracySuccess,\r\n    criticalSuccess,\r\n    passedCount,\r\n    perfect,\r\n    rawDamage,\r\n    pierce: (perfect && skill.perfectPierce) || criticalHitResult.result,\r\n    splashDamage,\r\n    addedStatus: perfect ? skill.perfectStatus : [],\r\n  }\r\n}\r\n\r\nexport const getTargetSkillResult = (\r\n  target: ProcessedCharacterT,\r\n  sourceResult: SourceSkillResultT,\r\n): TargetSkillResultT => {\r\n  if (sourceResult.accuracySuccess) {\r\n    const dodgeResult = resolveCheck(target, { key: 'evasion' })\r\n    const damageResistances = sourceResult.pierce\r\n      ? 0\r\n      : getDamageResistance(target, sourceResult.rawDamage.type)\r\n    const isEvasive = hasStatus(target, 'evasive')\r\n    const dodgeSuccess =\r\n      sourceResult.criticalSuccess ||\r\n      (sourceResult.perfect && sourceResult.source.partyId === PLAYER_PARTY_ID)\r\n        ? false\r\n        : dodgeResult.result || (isEvasive && !sourceResult.perfect)\r\n    const totalDamage = {\r\n      type: sourceResult.rawDamage.type,\r\n      damage: dodgeSuccess\r\n        ? 0\r\n        : noneg(Math.round(sourceResult.rawDamage.damage - damageResistances)),\r\n    }\r\n    const reflectedDamage = {\r\n      damage: sourceResult.source.stats.damageReflection,\r\n      type: sourceResult.rawDamage.type,\r\n    }\r\n    const healthRegenMaximum =\r\n      sourceResult.source.stats.healthOffset + reflectedDamage.damage\r\n    const regeneratedHealth =\r\n      healthRegenMaximum > sourceResult.source.stats.healthRegen\r\n        ? sourceResult.source.stats.healthRegen\r\n        : healthRegenMaximum\r\n\r\n    return {\r\n      ...sourceResult,\r\n      target,\r\n      dodgeSuccess,\r\n      blockedDamage: {\r\n        type: sourceResult.rawDamage.type,\r\n        damage: sourceResult.pierce ? 0 : damageResistances,\r\n      },\r\n      reflectedDamage,\r\n      totalDamage,\r\n      regeneratedHealth,\r\n      willDie: target.health <= target.stats.healthOffset + totalDamage.damage,\r\n    }\r\n  } else {\r\n    return {\r\n      ...sourceResult,\r\n      target,\r\n      dodgeSuccess: false,\r\n      reflectedDamage: sourceResult.rawDamage,\r\n      blockedDamage: sourceResult.rawDamage,\r\n      totalDamage: sourceResult.rawDamage,\r\n      regeneratedHealth: noneg(\r\n        sourceResult.source.stats.healthOffset -\r\n          (sourceResult.source.stats.healthOffset +\r\n            sourceResult.source.stats.healthRegen),\r\n      ),\r\n      willDie: false,\r\n    }\r\n  }\r\n}\r\n\r\nexport const getPerfectKeys = (skill: SkillT): PerfectKeyT[] => {\r\n  let base: PerfectKeyT[] = [...skill.perfectStatus.map((t) => t.type)]\r\n  if (skill.perfectSplash) base = [...base, 'splash']\r\n  if (skill.perfectPierce) base = [...base, 'pierce']\r\n  return base\r\n}\r\n\r\nexport const getPerfectText = (\r\n  skill: SkillT,\r\n  character: ProcessedCharacterT,\r\n): string => {\r\n  const perfectKeys = getPerfectKeys(skill)\r\n  const rawDamage = getSkillDamage(skill, character)\r\n  const splashDamage = getSplashDamage(rawDamage)\r\n\r\n  return perfectKeys.reduce((res, key, i) => {\r\n    let pre = `${res}${i > 0 ? ',' : ''}`\r\n    const text = PERFECT_DISPLAY_INFO[key]\r\n    switch (key) {\r\n      case 'splash':\r\n        return `${pre} ${Math.floor(\r\n          (splashDamage.damage / rawDamage.damage) * 100,\r\n        )}% ${text}`\r\n      default:\r\n        return `${pre} ${text}`\r\n    }\r\n  }, '')\r\n}\r\n\r\nexport const getSkillDamage = (\r\n  skill: SkillT,\r\n  source: ProcessedCharacterT,\r\n  target?: ProcessedCharacterT,\r\n): DamageT => {\r\n  const rawDamage: DamageT = {\r\n    type: source.weapon.damage.type,\r\n    damage:\r\n      (source.weapon.damage.damage + source.stats.damageOffset) *\r\n      (1 + skill.damageModifier + source.stats.damageModifier / 100),\r\n  }\r\n  const damageResistances = target\r\n    ? getDamageResistance(target, rawDamage.type)\r\n    : 0\r\n  return {\r\n    type: rawDamage.type,\r\n    damage: noneg(Math.round(rawDamage.damage - damageResistances)),\r\n  }\r\n}\r\n\r\nexport const getSkillDamageRange = (\r\n  skill: SkillT,\r\n  source: ProcessedCharacterT,\r\n  targets?: ProcessedCharacterT[],\r\n) => {\r\n  let min: number | undefined = undefined\r\n  let max: number | undefined = undefined\r\n  if (!targets) return `${getSkillDamage(skill, source).damage}`\r\n  targets.forEach((target) => {\r\n    const damage = getSkillDamage(skill, source, target).damage\r\n    if (max === undefined || damage > max) max = damage\r\n    if (min === undefined || damage < min) min = damage\r\n  })\r\n  if (min === max) return `${max || 0}`\r\n  return `${min}-${max}`\r\n}\r\n\r\nexport const getSkillResults = (\r\n  skill: SkillT,\r\n  source: ProcessedCharacterT,\r\n  targets: ProcessedCharacterT[],\r\n): TargetSkillResultT[] => {\r\n  const sourceResult = getSourceSkillResult(source, skill)\r\n  return targets.map((target) => getTargetSkillResult(target, sourceResult))\r\n}\r\n\r\nexport const getSkillTargetOptions = (\r\n  source: ProcessedCharacterT,\r\n  sourceParty: ProcessedPartyT,\r\n  targetParty: ProcessedPartyT,\r\n  skill: SkillT,\r\n): ProcessedCharacterT[] | ProcessedPartyT[] => {\r\n  switch (skill.targetType) {\r\n    case 'single':\r\n      return targetParty.characters.filter((c) => !c.dead)\r\n    case 'ally':\r\n      return sourceParty.characters.filter((c) => !c.dead)\r\n    case 'group':\r\n      return [targetParty]\r\n    case 'party':\r\n      return [sourceParty]\r\n    case 'self':\r\n      return [source]\r\n    default:\r\n      return []\r\n  }\r\n}\r\n","import { PartyT, TargetSkillResultT, CharacterT } from '../types'\r\nimport { updateCharacter } from './Party'\r\nimport {\r\n  addStatusAndTags,\r\n  getDamageResistance,\r\n  processCharacter,\r\n  decrementStatusDurations,\r\n} from './Character'\r\nimport { PLAYER_PARTY_ID } from '../objects/Party'\r\nimport { noneg } from '../util'\r\n\r\nconst localUpdater = (\r\n  p: PartyT,\r\n  id: string,\r\n  updater: (c: CharacterT) => CharacterT,\r\n) => {\r\n  return updateCharacter(p, id, updater)\r\n}\r\n\r\ninterface CommitSkillResultsT {\r\n  party: PartyT\r\n  enemyParty: PartyT\r\n}\r\nexport const commitSkillResults = (party: PartyT, enemyParty: PartyT) => (\r\n  results: TargetSkillResultT[],\r\n): CommitSkillResultsT => {\r\n  results.forEach((result, index) => {\r\n    const { source, target } = result\r\n    let sourceParty = [party, enemyParty].find(\r\n      (p) => p.id === source.partyId,\r\n    ) as PartyT\r\n    let targetParty = [party, enemyParty].find(\r\n      (p) => p.id === target.partyId,\r\n    ) as PartyT\r\n    const localUpdate = (\r\n      p: PartyT,\r\n      id: string,\r\n      updater: (c: CharacterT) => CharacterT,\r\n    ) => {\r\n      if (p.id === sourceParty.id) {\r\n        sourceParty = localUpdater(p, id, updater)\r\n        return\r\n      }\r\n      if (p.id === targetParty.id) {\r\n        targetParty = localUpdater(p, id, updater)\r\n        return\r\n      }\r\n    }\r\n\r\n    localUpdate(targetParty, target.id, (c) => {\r\n      return addStatusAndTags(\r\n        {\r\n          ...c,\r\n          stats: {\r\n            ...c.stats,\r\n            healthOffset: c.stats.healthOffset + result.totalDamage.damage,\r\n          },\r\n        },\r\n        result.addedStatus.map((s) => s.type),\r\n      )\r\n    })\r\n\r\n    if (result.splashDamage.damage > 0) {\r\n      targetParty.characters\r\n        .filter((c) => c.id !== result.target.id)\r\n        .forEach((character) => {\r\n          localUpdate(targetParty, character.id, (c) => {\r\n            const splashDamageResistance = getDamageResistance(\r\n              processCharacter(character),\r\n              result.splashDamage.type,\r\n            )\r\n            return {\r\n              ...c,\r\n              stats: {\r\n                ...c.stats,\r\n                healthOffset:\r\n                  c.stats.healthOffset +\r\n                  (result.splashDamage.damage - splashDamageResistance),\r\n              },\r\n            }\r\n          })\r\n        })\r\n    }\r\n\r\n    if (result.reflectedDamage.damage > 0 && !result.willDie) {\r\n      localUpdate(sourceParty, source.id, (c) => {\r\n        // TODO: consider adding in reflected resistance here\r\n        return {\r\n          ...c,\r\n          stats: {\r\n            ...c.stats,\r\n            healthOffset: c.stats.healthOffset + result.reflectedDamage.damage,\r\n          },\r\n        }\r\n      })\r\n    }\r\n\r\n    if (index === results.length - 1) {\r\n      if (result.regeneratedHealth > 0) {\r\n        localUpdate(sourceParty, source.id, (c) => {\r\n          return {\r\n            ...c,\r\n            stats: {\r\n              ...c.stats,\r\n              healthOffset: noneg(\r\n                c.stats.healthOffset - result.regeneratedHealth,\r\n              ),\r\n            },\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    if (sourceParty.id === PLAYER_PARTY_ID) {\r\n      party = sourceParty\r\n    } else {\r\n      enemyParty = sourceParty\r\n    }\r\n    if (targetParty.id === PLAYER_PARTY_ID) {\r\n      if (sourceParty.id !== PLAYER_PARTY_ID) {\r\n        party = targetParty\r\n      }\r\n    } else {\r\n      enemyParty = targetParty\r\n    }\r\n  })\r\n  return {\r\n    party: {\r\n      ...party,\r\n      characters: party.characters.map((c) => decrementStatusDurations(c)),\r\n    },\r\n    enemyParty: {\r\n      ...enemyParty,\r\n      characters: enemyParty.characters.map((c) => decrementStatusDurations(c)),\r\n    },\r\n  }\r\n}\r\n","import { v4 } from 'uuid'\r\nimport { useSelector } from 'react-redux'\r\nimport { StateCoreT, StateActionT, StateT } from '../types'\r\nimport { PartyT, CharacterT } from '../../types'\r\nimport { Dispatch } from 'redux'\r\nimport { makeReducer } from '../util'\r\nimport { useActions } from '../../hooks/useActions'\r\nimport {\r\n  updateCharacter,\r\n  makeCharacter,\r\n  checkForProcessedParty,\r\n} from '../../functions'\r\nimport { PLAYER_PARTY_ID } from '../../objects/Party'\r\n\r\nexport const UPDATE_PARTY = '@actions/parties/set-party'\r\nexport const UPSERT_CHARACTER = '@actions/parties/upsert-character'\r\nexport const DELETE_CHARACTER = '@actions/parties/delete-character'\r\nexport const UPSERT_ITEM = '@actions/parties/upsert-item'\r\nexport const DELETE_ITEM = '@actions/parties/delete-item'\r\nexport const UPSERT_MOD = '@actions/parties/upsert-mod'\r\nexport const DELETE_MOD = '@actions/parties/delete-mod'\r\n\r\nexport const actionCreators = {\r\n  updateParty: (party: PartyT): StateActionT => {\r\n    return {\r\n      type: UPDATE_PARTY,\r\n      payload: {\r\n        party,\r\n      },\r\n    }\r\n  },\r\n  upsertCharacter: (character: CharacterT): StateActionT => {\r\n    return {\r\n      type: UPSERT_CHARACTER,\r\n      payload: {\r\n        character,\r\n      },\r\n    }\r\n  },\r\n  deleteCharacter: (characterId: string): StateActionT => {\r\n    return {\r\n      type: DELETE_CHARACTER,\r\n      payload: {\r\n        characterId,\r\n      },\r\n    }\r\n  },\r\n}\r\n\r\nexport const actions = {\r\n  updateParty: (party: PartyT) => (dispatch: Dispatch) => {\r\n    checkForProcessedParty(party)\r\n    dispatch(actionCreators.updateParty(party))\r\n  },\r\n  upsertCharacter: (character: CharacterT) => (dispatch: Dispatch) => {\r\n    dispatch(actionCreators.upsertCharacter(character))\r\n  },\r\n  deleteCharacter: (characterId: string) => (dispatch: Dispatch) => {\r\n    dispatch(actionCreators.deleteCharacter(characterId))\r\n  },\r\n}\r\n\r\nexport const core: StateCoreT<PartyT> = {\r\n  [UPDATE_PARTY]: (state, action) => {\r\n    return {\r\n      ...action.payload.party,\r\n    }\r\n  },\r\n  [UPSERT_CHARACTER]: (state, action) => {\r\n    return updateCharacter(\r\n      state,\r\n      action.payload.character.id,\r\n      (c) => action.payload.character,\r\n    )\r\n  },\r\n  [DELETE_CHARACTER]: (state, action) => {\r\n    return {\r\n      ...state,\r\n      characters: state.characters.filter(\r\n        (c) => c.id !== action.payload.characterId,\r\n      ),\r\n    }\r\n  },\r\n}\r\nconst jack = { ...makeCharacter('blacksmith'), name: 'Jack' }\r\nexport const INITIAL_STATE: PartyT = {\r\n  isParty: true,\r\n  id: PLAYER_PARTY_ID,\r\n  name: 'PlayerParty',\r\n  items: [],\r\n  characters: [\r\n    { ...jack },\r\n    { ...makeCharacter('bard'), name: 'Jim' },\r\n    { ...makeCharacter('scholar'), name: 'Johnny' },\r\n  ],\r\n}\r\nexport default makeReducer(core, INITIAL_STATE)\r\nexport const useParty = () => useSelector((state: StateT) => state.party)\r\nexport const usePartyActions = () =>\r\n  useActions(actions) as {\r\n    updateParty: (party: PartyT) => void\r\n    upsertCharacter: (character: CharacterT) => void\r\n    deleteCharacter: (characterId: string) => void\r\n  }\r\n","import { StateCoreT, StateReducerT } from './types'\r\n\r\nexport const makeReducer = (\r\n  core: StateCoreT,\r\n  initialState: any,\r\n): StateReducerT => {\r\n  return (state = initialState, action) => {\r\n    const coreFn = core[action.type]\r\n    if (coreFn) return coreFn(state, action)\r\n    return state\r\n  }\r\n}\r\n","import { useMemo } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\n\r\nexport const useActions = (actions: any) => {\r\n  const dispatch = useDispatch()\r\n  return useMemo(() => bindActionCreators(actions, dispatch), [\r\n    dispatch,\r\n    actions,\r\n  ])\r\n}\r\n","import React, { useMemo, useContext, useState } from 'react'\r\nimport {\r\n  PartyT,\r\n  ProcessedPartyT,\r\n  CharacterT,\r\n  ProcessedCharacterT,\r\n} from '../../types'\r\nimport { usePartyActions, useParty } from '../../state/party'\r\nimport {\r\n  findCharacterInParty,\r\n  processParty,\r\n  makeParty,\r\n  processCharacter,\r\n  makeCharacter,\r\n} from '../../functions'\r\n\r\nexport interface PartyContextT {\r\n  party: ProcessedPartyT\r\n  rawParty: PartyT\r\n  activeCharacter: ProcessedCharacterT\r\n  updateParty: (party: PartyT) => void\r\n  upsertCharacter: (character: CharacterT) => void\r\n  deleteCharacter: (characterId: string) => void\r\n  findCharacter: (characterId: string) => ProcessedCharacterT | undefined\r\n  findRawCharacter: (characterId: string) => CharacterT | undefined\r\n  setActiveCharacter: (character: ProcessedCharacterT) => void\r\n}\r\nconst defaultContextValue: PartyContextT = {\r\n  rawParty: makeParty(),\r\n  party: processParty(makeParty()),\r\n  activeCharacter: processCharacter(makeCharacter('blacksmith')),\r\n  updateParty: (party) => {},\r\n  upsertCharacter: (character) => {},\r\n  deleteCharacter: (characterId) => {},\r\n  findCharacter: (characterId) => undefined,\r\n  findRawCharacter: (characterId) => undefined,\r\n  setActiveCharacter: (character) => {},\r\n}\r\nexport const PartyContext = React.createContext<PartyContextT>(\r\n  defaultContextValue,\r\n)\r\n\r\nexport interface PartyContextProviderPropsT {\r\n  children: React.ReactNode | React.ReactNode[]\r\n}\r\nexport const PartyContextProvider = (props: PartyContextProviderPropsT) => {\r\n  const { children } = props\r\n  const actions = usePartyActions()\r\n  const rawParty = useParty()\r\n  const party = useMemo(() => processParty(rawParty), [rawParty])\r\n  const [activeCharacterId, setActiveCharacterId] = useState<string>(\r\n    party.characters[0].id,\r\n  )\r\n  const activeCharacter = useMemo(() => {\r\n    return party.characters.find(\r\n      (c) => c.id === activeCharacterId,\r\n    ) as ProcessedCharacterT\r\n  }, [activeCharacterId, party.characters])\r\n  const setActiveCharacter = (character: ProcessedCharacterT) =>\r\n    setActiveCharacterId(character.id)\r\n  const updateParty = (party: PartyT) => {\r\n    actions.updateParty(party)\r\n  }\r\n  const upsertCharacter = (character: CharacterT) => {\r\n    if (!character) return\r\n    if ((character as ProcessedCharacterT).processed) {\r\n      throw new Error('No processed Characters Allowed')\r\n    }\r\n    actions.upsertCharacter(character)\r\n  }\r\n  const deleteCharacter = (characterId: string) => {\r\n    actions.deleteCharacter(characterId)\r\n  }\r\n  const findCharacter = (characterId: string) => {\r\n    return findCharacterInParty<ProcessedPartyT, ProcessedCharacterT>(\r\n      party,\r\n      characterId,\r\n    )\r\n  }\r\n  const findRawCharacter = (characterId: string) => {\r\n    return findCharacterInParty(rawParty, characterId)\r\n  }\r\n\r\n  return (\r\n    <PartyContext.Provider\r\n      value={{\r\n        party,\r\n        rawParty,\r\n        activeCharacter,\r\n        updateParty,\r\n        upsertCharacter,\r\n        deleteCharacter,\r\n        findCharacter,\r\n        findRawCharacter,\r\n        setActiveCharacter,\r\n      }}\r\n    >\r\n      {children}\r\n    </PartyContext.Provider>\r\n  )\r\n}\r\n\r\nexport const usePartyContext = () => useContext(PartyContext)\r\n","import { ProcessedCharacterT } from './Character'\r\nimport { hasStatus } from '../functions'\r\n\r\nexport interface CombatQueueT {\r\n  [characterId: string]: number\r\n}\r\n\r\nexport const makeCombatQueue = (\r\n  characters: ProcessedCharacterT[],\r\n): CombatQueueT => {\r\n  const sortedCharacters = characters.sort(\r\n    (a, b) => b.stats.agility - a.stats.agility,\r\n  )\r\n  return sortedCharacters.reduce(\r\n    (r, c, i) => ({\r\n      ...r,\r\n      [c.id]: 100 - c.stats.agility,\r\n    }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const getMax = (queue: CombatQueueT): number => {\r\n  return Object.keys(queue).reduce((r: number, id: string) => {\r\n    if (r < queue[id]) return queue[id]\r\n    return r\r\n  }, Number.NEGATIVE_INFINITY)\r\n}\r\n\r\nexport const getMin = (\r\n  queue: CombatQueueT,\r\n  characters?: ProcessedCharacterT[],\r\n): number => {\r\n  return Object.keys(queue).reduce((r: number, id: string) => {\r\n    if (queue[id] < r) {\r\n      if (characters) {\r\n        const c = characters.find((c) => c.id === id)\r\n        if (c && hasStatus(c, 'dazed')) {\r\n          return r\r\n        } else {\r\n          return queue[id]\r\n        }\r\n      } else return queue[id]\r\n    }\r\n    return r\r\n  }, Number.POSITIVE_INFINITY)\r\n}\r\n\r\nexport const consolidateQueue = (\r\n  queue: CombatQueueT,\r\n  characters: ProcessedCharacterT[] = [],\r\n): CombatQueueT => {\r\n  let min = getMin(queue, characters)\r\n  return Object.keys(queue).reduce((r, id) => {\r\n    const character = characters.find((c) => c.id === id)\r\n    const offset = character && hasStatus(character, 'dazed') ? 0 : min\r\n    return {\r\n      ...r,\r\n      [id]: queue[id] - offset,\r\n    }\r\n  }, {})\r\n}\r\n\r\nexport const shiftQueue = (\r\n  queue: CombatQueueT,\r\n  character: ProcessedCharacterT,\r\n  characters: ProcessedCharacterT[],\r\n): CombatQueueT => {\r\n  const ret = consolidateQueue(\r\n    {\r\n      ...queue,\r\n      [character.id]: 200 - character.stats.agility,\r\n    },\r\n    characters,\r\n  )\r\n  return ret\r\n}\r\n\r\nexport const getFirst = (queue: CombatQueueT): string => {\r\n  let min = Number.POSITIVE_INFINITY\r\n  let key = Object.keys(queue)[0]\r\n  Object.keys(queue).forEach((id) => {\r\n    if (min > queue[id]) {\r\n      min = queue[id]\r\n      key = id\r\n    }\r\n  })\r\n  return key\r\n}\r\n\r\nexport const removeFromQueue = (\r\n  queue: CombatQueueT,\r\n  id: string,\r\n): CombatQueueT => {\r\n  return consolidateQueue(\r\n    Object.keys(queue)\r\n      .filter((key) => key !== id)\r\n      .reduce(\r\n        (r, id) => ({\r\n          ...r,\r\n          [id]: queue[id],\r\n        }),\r\n        {},\r\n      ),\r\n  )\r\n}\r\n\r\nexport const validateQueue = (\r\n  queue: CombatQueueT,\r\n  characters: ProcessedCharacterT[],\r\n): CombatQueueT => {\r\n  return consolidateQueue(\r\n    characters.reduce((r, c) => {\r\n      return c.dead ? r : { ...r, [c.id]: queue[c.id] }\r\n    }, {}),\r\n  )\r\n}\r\n\r\nexport const getSortedIds = (queue: CombatQueueT): string[] => {\r\n  return Object.keys(queue).sort((a, b) => queue[a] - queue[b])\r\n}\r\n","import React, {\r\n  createContext,\r\n  useContext,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useCallback,\r\n} from 'react'\r\nimport {\r\n  ProcessedPartyT,\r\n  PartyT,\r\n  SkillT,\r\n  ProcessedCharacterT,\r\n  TargetSkillResultT,\r\n  SkillTargetT,\r\n} from '../../types'\r\nimport {\r\n  makeParty,\r\n  processParty,\r\n  getSkillResults,\r\n  commitSkillResults,\r\n  processCharacter,\r\n  makeCharacter,\r\n  resolveSkillTarget,\r\n  makeSkillTarget,\r\n} from '../../functions'\r\nimport { usePartyContext } from '../PartyContext'\r\nimport {\r\n  CombatQueueT,\r\n  makeCombatQueue,\r\n  getFirst,\r\n  shiftQueue,\r\n  validateQueue,\r\n} from '../../types/CombatQueue'\r\nimport { getAIAction } from '../../functions/AI'\r\nimport { v4 } from 'uuid'\r\nimport { useHistory } from 'react-router'\r\n\r\nexport interface CombatContextT {\r\n  party: ProcessedPartyT\r\n  enemyParty: ProcessedPartyT\r\n  activeCharacter: ProcessedCharacterT\r\n  characters: ProcessedCharacterT[]\r\n  queue: CombatQueueT\r\n  selectedSkill: SkillT | undefined\r\n  selectedTargets: ProcessedCharacterT[]\r\n  roundResults: TargetSkillResultT[][]\r\n  activeRound: TargetSkillResultT[] | undefined\r\n  isRunning: boolean\r\n  isDone: boolean\r\n  isRenderingResult: boolean\r\n  onSkillSelect: (skill: SkillT) => void\r\n  onTargetsSelect: (target: ProcessedCharacterT | ProcessedPartyT) => void\r\n  start: () => void\r\n  next: (nextTarget?: ProcessedCharacterT | ProcessedPartyT) => void\r\n  commit: () => void\r\n}\r\nconst defaultValue: CombatContextT = {\r\n  party: processParty(makeParty()),\r\n  enemyParty: processParty(makeParty()),\r\n  activeCharacter: processCharacter(makeCharacter('blacksmith')),\r\n  characters: [],\r\n  queue: {},\r\n  selectedSkill: undefined,\r\n  selectedTargets: [],\r\n  roundResults: [],\r\n  activeRound: undefined,\r\n  isRunning: false,\r\n  isDone: false,\r\n  isRenderingResult: false,\r\n  onSkillSelect: (skill: SkillT) => {},\r\n  onTargetsSelect: (target: ProcessedCharacterT | ProcessedPartyT) => {},\r\n  start: () => {},\r\n  next: () => {},\r\n  commit: () => {},\r\n}\r\nexport const CombatContext = createContext<CombatContextT>(defaultValue)\r\nexport const useCombatContext = () => useContext(CombatContext)\r\n\r\nexport interface CombatContextProviderPropsT {\r\n  children: JSX.Element\r\n  enemyParty: PartyT\r\n  setEnemyParty: (party: PartyT) => void\r\n  onRequestNewParty: () => void\r\n}\r\nexport const CombatContextProvider = (props: CombatContextProviderPropsT) => {\r\n  const { children, setEnemyParty, onRequestNewParty } = props\r\n  const { party, rawParty, updateParty } = usePartyContext()\r\n  const history = useHistory()\r\n  const resultCommitter = useMemo(\r\n    () => commitSkillResults(rawParty, props.enemyParty),\r\n    [rawParty, props.enemyParty],\r\n  )\r\n  const enemyParty = useMemo(() => processParty(props.enemyParty), [\r\n    props.enemyParty,\r\n  ])\r\n  const [isRunning, setIsRunning] = useState<boolean>(false)\r\n  const [isDone, setIsDone] = useState<boolean>(false)\r\n  const [isRenderingResult, setIsRenderingResult] = useState<boolean>(false)\r\n  const characters = useMemo(\r\n    () => [...party.characters, ...enemyParty.characters],\r\n    [party, enemyParty],\r\n  )\r\n  const [queue, setQueue] = useState<CombatQueueT>(\r\n    makeCombatQueue([...party.characters, ...enemyParty.characters]),\r\n  )\r\n  const [roundId, setRoundId] = useState<string>(v4())\r\n  const [roundResults, setRoundResults] = useState<TargetSkillResultT[][]>([])\r\n  const [activeRound, setActiveRound] = useState<\r\n    TargetSkillResultT[] | undefined\r\n  >()\r\n  const [selectedTarget, setSelectedTarget] = useState<\r\n    SkillTargetT | undefined\r\n  >()\r\n  const [selectedSkill, setSelectedSkill] = useState<SkillT | undefined>()\r\n  const activeCharacter = useMemo(\r\n    () =>\r\n      characters.find(\r\n        (c) => !c.dead && c.id === getFirst(queue),\r\n      ) as ProcessedCharacterT,\r\n    [queue, characters],\r\n  )\r\n\r\n  const start = useCallback(() => {\r\n    setIsDone(false)\r\n    setIsRunning(true)\r\n  }, [activeCharacter])\r\n\r\n  // temp code\r\n  useEffect(() => {\r\n    if (!isRunning) {\r\n      start()\r\n    } else {\r\n      setQueue(makeCombatQueue([...party.characters, ...enemyParty.characters]))\r\n    }\r\n  }, [isRunning])\r\n\r\n  const next = (nextTarget?: ProcessedCharacterT | ProcessedPartyT) => {\r\n    if (!selectedSkill) return\r\n    const roundTarget = nextTarget\r\n      ? makeSkillTarget(selectedSkill.targetType, nextTarget)\r\n      : selectedTarget\r\n    if (!selectedSkill || !roundTarget) return\r\n    const results = getSkillResults(\r\n      selectedSkill,\r\n      activeCharacter,\r\n      resolveSkillTarget(roundTarget).filter((c) => !c.dead),\r\n    )\r\n    setActiveRound(results)\r\n    setSelectedSkill(undefined)\r\n    setSelectedTarget(undefined)\r\n    setIsRenderingResult(true)\r\n  }\r\n\r\n  const onSkillSelect = (skill: SkillT) => {\r\n    setSelectedSkill(skill)\r\n    if (skill.targetType !== selectedSkill?.targetType) {\r\n      setSelectedTarget(undefined)\r\n    }\r\n  }\r\n\r\n  const onTargetsSelect = (target: ProcessedCharacterT | ProcessedPartyT) => {\r\n    if (!selectedSkill) return\r\n    setSelectedTarget(makeSkillTarget(selectedSkill.targetType, target))\r\n  }\r\n\r\n  const commit = useCallback(() => {\r\n    if (!activeRound) return\r\n    const parties = resultCommitter(activeRound)\r\n    setRoundResults((r) => [...r, activeRound])\r\n    setEnemyParty(parties.enemyParty)\r\n    updateParty(parties.party)\r\n    setActiveRound(undefined)\r\n    const updatedCharacters = [\r\n      ...parties.party.characters,\r\n      ...parties.enemyParty.characters,\r\n    ].map((c) => processCharacter(c))\r\n    setQueue(\r\n      validateQueue(\r\n        shiftQueue(queue, activeRound[0].source, updatedCharacters),\r\n        updatedCharacters,\r\n      ),\r\n    )\r\n    setRoundId(v4())\r\n    setIsRenderingResult(false)\r\n  }, [activeRound, queue])\r\n\r\n  const execEnemyTurn = (skill: SkillT, target: SkillTargetT) => {\r\n    const results = getSkillResults(\r\n      skill,\r\n      activeCharacter,\r\n      resolveSkillTarget(target),\r\n    )\r\n    setActiveRound(results)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (activeCharacter) {\r\n      if (activeCharacter.partyId === enemyParty.id) {\r\n        const { skill, target } = getAIAction(\r\n          activeCharacter,\r\n          party,\r\n          enemyParty,\r\n        )\r\n\r\n        execEnemyTurn(skill, makeSkillTarget(skill.targetType, target))\r\n      } else {\r\n        setSelectedSkill(activeCharacter.skills[0])\r\n      }\r\n    }\r\n  }, [roundId])\r\n\r\n  useEffect(() => {\r\n    if (isDone) return\r\n    if (enemyParty.characters.every((c) => c.dead)) {\r\n      alert('you win')\r\n      /*onRequestNewParty()\r\n      setRoundResults([])\r\n      setSelectedSkill(undefined)\r\n      setIsRunning(false)\r\n      */\r\n      history.push('/JSFTK_combat/party')\r\n      return\r\n    }\r\n    if (party.characters.every((c) => c.dead)) {\r\n      alert('you lose')\r\n      setIsDone(true)\r\n      return\r\n    }\r\n  }, [party, enemyParty])\r\n\r\n  useEffect(() => {\r\n    if (activeCharacter && activeCharacter.skills[0]) {\r\n      setSelectedSkill(activeCharacter.skills[0])\r\n    }\r\n  }, [activeCharacter])\r\n\r\n  return (\r\n    <CombatContext.Provider\r\n      value={{\r\n        party,\r\n        enemyParty,\r\n        characters,\r\n        queue,\r\n        activeCharacter,\r\n        activeRound,\r\n        selectedSkill,\r\n        selectedTargets: selectedTarget\r\n          ? resolveSkillTarget(selectedTarget)\r\n          : [],\r\n        roundResults,\r\n        isDone,\r\n        isRunning,\r\n        isRenderingResult,\r\n        onSkillSelect,\r\n        onTargetsSelect,\r\n        start,\r\n        next,\r\n        commit,\r\n      }}\r\n    >\r\n      {children}\r\n    </CombatContext.Provider>\r\n  )\r\n}\r\n","import { ProcessedCharacterT, ProcessedPartyT, SkillT } from '../types'\r\nimport { getRandom } from '../util'\r\nimport { getSkillTargetOptions } from './Skill'\r\n\r\nexport interface AIActionT {\r\n  skill: SkillT\r\n  target: ProcessedCharacterT | ProcessedPartyT\r\n}\r\nexport const getAIAction = (\r\n  source: ProcessedCharacterT,\r\n  playerParty: ProcessedPartyT,\r\n  enemyParty: ProcessedPartyT,\r\n): AIActionT => {\r\n  const skill = getRandom(source.skills)\r\n  const targetedCharacters = playerParty.characters.filter((c) =>\r\n    c.status.map((t) => t.type).includes('targeted'),\r\n  )\r\n  const target =\r\n    skill.targetType === 'single'\r\n      ? targetedCharacters.length > 0\r\n        ? getRandom(targetedCharacters)\r\n        : getRandom(playerParty.characters)\r\n      : getRandom<ProcessedPartyT | ProcessedCharacterT>(\r\n          getSkillTargetOptions(source, enemyParty, playerParty, skill),\r\n        )\r\n\r\n  return { skill, target }\r\n}\r\n","import { styled } from 'styletron-react'\r\n\r\nexport interface FlexContainerPropsT {\r\n  $direction?: 'row' | 'column' | 'column-reverse'\r\n  $full?: boolean\r\n}\r\nexport const FlexContainer = styled('div', (props: FlexContainerPropsT) => ({\r\n  display: 'flex',\r\n  flexDirection: props.$direction || 'row',\r\n  flex: props.$full ? 1 : 'default',\r\n}))\r\nexport const FullContainer = styled('div', () => ({\r\n  flex: 1,\r\n}))\r\n","import { styled } from 'styletron-react'\r\n\r\nexport const Monospace = styled('span', () => ({\r\n  fontFamily: 'Inconsolata, monospace',\r\n  fontWeight: 600,\r\n}))\r\nexport const Monodiv = styled('div', () => ({\r\n  fontFamily: 'Inconsolata, monospace',\r\n  fontWeight: 600,\r\n}))\r\n","import React from 'react'\r\nimport { CharacterT, PartyT, SkillT } from '../../types'\r\n\r\nexport const Span = (color: string, text: JSX.Element | string) => (\r\n  <span style={{ color, fontWeight: 'bold' }}>{text}</span>\r\n)\r\nexport const SkillSpan = (skill: SkillT) => Span('plum', skill.name)\r\n\r\nexport const NameSpanBuilder = (party: PartyT, enemyParty: PartyT) => (\r\n  character: CharacterT,\r\n) => {\r\n  const isUserParty = character.partyId === party.id\r\n  const isEnemyParty = character.partyId === enemyParty.id\r\n  const color = isUserParty\r\n    ? 'lightgreen'\r\n    : isEnemyParty\r\n    ? 'lightsalmon'\r\n    : 'white'\r\n\r\n  return Span(color, character.name)\r\n}\r\n","import React, { createContext, useContext, useState, useEffect } from 'react'\r\nimport { useCombatContext } from '../CombatContext'\r\nimport { Monospace } from '../../elements/monospace'\r\nimport { NameSpanBuilder, SkillSpan, Span } from './util'\r\nimport { getDamageResistance } from '../../functions'\r\nimport { noneg } from '../../util'\r\n\r\nexport interface CombatLogContextT {\r\n  combatLog: JSX.Element[]\r\n}\r\nconst defualtValue: CombatLogContextT = {\r\n  combatLog: [],\r\n}\r\nexport const CombatLogContext = createContext<CombatLogContextT>(defualtValue)\r\nexport const useCombatLogContext = () => useContext(CombatLogContext)\r\n\r\ntype DeadLogT = Record<string, boolean | undefined>\r\n\r\nexport interface CombatLogContextProviderPropsT {\r\n  children: JSX.Element\r\n}\r\nexport const CombatLogContextProvider = (\r\n  props: CombatLogContextProviderPropsT,\r\n) => {\r\n  const { children } = props\r\n  const { activeRound, roundResults, enemyParty, party } = useCombatContext()\r\n  const [combatLog, setCombatLog] = useState<JSX.Element[]>([])\r\n  const [deadLog, setDeadLog] = useState<DeadLogT>({})\r\n  const NameSpan = NameSpanBuilder(party, enemyParty)\r\n  const log = (line: JSX.Element) =>\r\n    setCombatLog((log) => [\r\n      ...log,\r\n      <Monospace style={{ display: 'inline-block', fontWeight: 'normal' }}>\r\n        {line}\r\n      </Monospace>,\r\n    ])\r\n\r\n  useEffect(() => {\r\n    const characters = [...enemyParty.characters, ...party.characters]\r\n    setTimeout(() => {\r\n      characters.forEach((character) => {\r\n        if (character.dead && !deadLog[character.id]) {\r\n          setDeadLog((dLog) => ({ ...dLog, [character.id]: true }))\r\n          log(<span>{Span('lightcoral', `${character.name} died.`)}</span>)\r\n        }\r\n      })\r\n    }, 5)\r\n  }, [enemyParty, party])\r\n\r\n  useEffect(() => {\r\n    if (activeRound && activeRound[0]) {\r\n      log(\r\n        <span>\r\n          {NameSpan(activeRound[0].source)} uses{' '}\r\n          {SkillSpan(activeRound[0].skill)}.\r\n        </span>,\r\n      )\r\n    }\r\n  }, [activeRound])\r\n\r\n  useEffect(() => {\r\n    if (roundResults.length === 0) return\r\n    const latestRounds = roundResults[roundResults.length - 1]\r\n    const baseRound = latestRounds[0]\r\n    if (!baseRound) return\r\n\r\n    if (!baseRound.accuracySuccess) {\r\n      if (baseRound.skill.damage) {\r\n        {\r\n          log(<span>{baseRound.source.name}'s attack missed.</span>)\r\n        }\r\n      } else {\r\n        log(<span>{SkillSpan(baseRound.skill)} failed.</span>)\r\n      }\r\n    }\r\n    if (baseRound.criticalSuccess) {\r\n      log(<span>{Span('gold', 'Critical Hit!')}</span>)\r\n    }\r\n    if (baseRound.perfect) {\r\n      log(<span>{Span('gold', 'Perfect!')}</span>)\r\n    }\r\n    latestRounds.forEach((round) => {\r\n      const targetParty = party.id === round.source.partyId ? enemyParty : party\r\n      if (round.accuracySuccess) {\r\n        if (round.dodgeSuccess) {\r\n          log(<span>{NameSpan(round.target)} dodged the attack.</span>)\r\n        } else if (round.totalDamage.damage > 0) {\r\n          log(\r\n            <span>\r\n              {SkillSpan(round.skill)} deals{' '}\r\n              {Span('white', `${round.totalDamage.damage} damage`)} to{' '}\r\n              {NameSpan(round.target)}.\r\n            </span>,\r\n          )\r\n        } else if (round.skill.damage) {\r\n          log(\r\n            <span>\r\n              {SkillSpan(round.skill)} did no damage to {NameSpan(round.target)}\r\n              .\r\n            </span>,\r\n          )\r\n        }\r\n        if (round.splashDamage.damage > 0) {\r\n          targetParty.characters\r\n            .filter((c) => c.id !== round.target.id && !c.dead)\r\n            .forEach((subTarget) => {\r\n              const splashDamageResistance = getDamageResistance(\r\n                subTarget,\r\n                round.splashDamage.type,\r\n              )\r\n              log(\r\n                <span>\r\n                  {SkillSpan(round.skill)} deals{' '}\r\n                  {Span(\r\n                    'white',\r\n                    `${\r\n                      round.splashDamage.damage - splashDamageResistance\r\n                    } splash damage`,\r\n                  )}{' '}\r\n                  to {NameSpan(subTarget)}.\r\n                </span>,\r\n              )\r\n            })\r\n        }\r\n\r\n        if (round.reflectedDamage.damage > 0) {\r\n          log(\r\n            <span>\r\n              {NameSpan(round.target)} reflected{' '}\r\n              {Span('white', `${round.reflectedDamage.damage} damage`)}\r\n            </span>,\r\n          )\r\n        }\r\n\r\n        round.addedStatus.forEach((tag) => {\r\n          log(\r\n            <span>\r\n              {NameSpan(round.target)} became {tag.type} ({tag.duration} turns).\r\n            </span>,\r\n          )\r\n        })\r\n      }\r\n    })\r\n    if (baseRound.regeneratedHealth > 0) {\r\n      log(\r\n        <span>\r\n          {NameSpan(baseRound.source)} gained {baseRound.regeneratedHealth}{' '}\r\n          health from HP regen.\r\n        </span>,\r\n      )\r\n    }\r\n  }, [roundResults.length])\r\n\r\n  return (\r\n    <CombatLogContext.Provider value={{ combatLog }}>\r\n      {children}\r\n    </CombatLogContext.Provider>\r\n  )\r\n}\r\n","import React, { useState, useLayoutEffect } from 'react'\r\nimport { v4 } from 'uuid'\r\n\r\nexport interface HoverChildrenT {\r\n  isHovering: boolean\r\n}\r\nexport interface HoverPropsT {\r\n  delay?: number\r\n  children: (props: HoverChildrenT) => JSX.Element\r\n}\r\nexport const Hover = (props: HoverPropsT) => {\r\n  const { delay = 500, children } = props\r\n  const [internalHovering, setInternalHovering] = useState<boolean>(false)\r\n  const [isHovering, setIsHovering] = useState<boolean>(false)\r\n  const [guid, setGuid] = useState<string>(v4())\r\n  useLayoutEffect(() => {\r\n    const action = async () => {\r\n      if (internalHovering) {\r\n        setTimeout(() => {\r\n          setGuid(v4())\r\n        }, delay)\r\n      }\r\n    }\r\n    action()\r\n  }, [internalHovering])\r\n  useLayoutEffect(() => {\r\n    if (internalHovering) {\r\n      setIsHovering(true)\r\n    }\r\n  }, [guid])\r\n  const onMouseEnter = (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    setInternalHovering(true)\r\n  }\r\n  const onMouseLeave = (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    setInternalHovering(false)\r\n    setIsHovering(false)\r\n  }\r\n  return (\r\n    <div onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\r\n      {children({ isHovering })}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Hover } from '../components/Hover'\r\n\r\nexport interface BoxContainerPropsT extends React.HTMLProps<HTMLDivElement> {\r\n  substyle?: React.CSSProperties\r\n  tag?: any\r\n  to?: string\r\n}\r\nexport const BoxContainer = (props: BoxContainerPropsT) => {\r\n  const {\r\n    style = {},\r\n    substyle = {},\r\n    children,\r\n    tag: Element = 'div',\r\n    ...rest\r\n  } = props\r\n  return (\r\n    <div\r\n      style={{\r\n        border: '1px solid #000',\r\n        display: 'flex',\r\n        boxSizing: 'border-box',\r\n        ...style,\r\n      }}\r\n    >\r\n      <Element\r\n        style={{\r\n          border: substyle.border || '1px solid #555',\r\n          background: 'linear-gradient(0deg, #222222 0%, #2a2a2a 100%)',\r\n          padding: 10,\r\n          color: '#ccc',\r\n          flex: 1,\r\n          boxShadow: 'inset 0px 0px 2px black',\r\n          ...substyle,\r\n        }}\r\n        {...rest}\r\n      >\r\n        {children}\r\n      </Element>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const SmallBox = (props: BoxContainerPropsT) => (\r\n  <BoxContainer\r\n    {...props}\r\n    style={{\r\n      height: 40,\r\n      width: 40,\r\n      ...props.style,\r\n    }}\r\n    substyle={{\r\n      display: 'flex',\r\n      padding: 0,\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      background: '#111',\r\n      ...props.substyle,\r\n    }}\r\n  >\r\n    {props.children}\r\n  </BoxContainer>\r\n)\r\n\r\nexport const BoxButton = (props: BoxContainerPropsT) => {\r\n  return (\r\n    <Hover delay={0}>\r\n      {({ isHovering }) => (\r\n        <BoxContainer\r\n          {...props}\r\n          tag='button'\r\n          style={{\r\n            margin: 0,\r\n            ...(props.style || {}),\r\n          }}\r\n          substyle={{\r\n            borderColor: isHovering && !props.disabled ? '#999' : '#555',\r\n            padding: '4px',\r\n            cursor: props.disabled ? 'default' : 'pointer',\r\n            background: props.disabled ? '#444' : '#111',\r\n            boxShadow: props.disabled ? 'none' : undefined,\r\n            ...(props.substyle || {}),\r\n          }}\r\n        />\r\n      )}\r\n    </Hover>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport BaseTooltip, { TooltipProps } from 'react-tooltip-lite'\r\nimport { Hover } from '../Hover'\r\n\r\ninterface PropsT extends TooltipProps {\r\n  children: JSX.Element\r\n}\r\nexport const Tooltip = (props: PropsT) => {\r\n  const { ...rest } = props\r\n  return (\r\n    <BaseTooltip\r\n      direction='up'\r\n      tagName='div'\r\n      padding='0'\r\n      arrow={false}\r\n      {...rest}\r\n    />\r\n  )\r\n}\r\n\r\nexport const HoverToolTip = (props: PropsT) => {\r\n  return (\r\n    <Hover>\r\n      {({ isHovering }) => <Tooltip {...props} isOpen={isHovering} />}\r\n    </Hover>\r\n  )\r\n}\r\n","import React, { CSSProperties } from 'react'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\nimport { HoverToolTip } from '../Tooltip'\r\nimport { Monodiv } from '../../elements/monospace'\r\nimport { ProcessedCharacterT } from '../../types'\r\nimport { noneg } from '../../util'\r\n\r\nexport interface GaugePropsT {\r\n  name?: string\r\n  color: string\r\n  height?: number\r\n  max: number\r\n  value: number\r\n  style?: CSSProperties\r\n  children?: React.ReactNode | React.ReactNode[]\r\n}\r\nexport const Gauge = (props: GaugePropsT) => {\r\n  const { name = '', value, max, color, height = 30, children } = props\r\n  const p = (value / max) * 100\r\n  const percentage = p > 100 ? 100 : p\r\n  return (\r\n    <HoverToolTip\r\n      direction='right'\r\n      content={<BoxContainer>{`${name} (${value} / ${max})`}</BoxContainer>}\r\n    >\r\n      <BoxContainer\r\n        style={{ borderLeft: 'none' }}\r\n        substyle={{\r\n          padding: 0,\r\n          background: '#555',\r\n          height: height - 2,\r\n          position: 'relative',\r\n          borderColor: '1px rgba(255,255,255,0.3)',\r\n        }}\r\n      >\r\n        <FlexContainer\r\n          style={{\r\n            position: 'absolute',\r\n            left: 0,\r\n            boxSizing: 'border-box',\r\n            height: height - 2,\r\n            maxWidth: `${percentage}%`,\r\n            minWidth: `${percentage}%`,\r\n            boxShadow: 'inset 0px 0px 1px rgba(0,0,0,0.5)',\r\n            textShadow: '1px 1px 1px black',\r\n            backgroundColor: color,\r\n            color: 'white',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            transition: 'all 0.5s',\r\n          }}\r\n        ></FlexContainer>\r\n        <FullContainer\r\n          style={{\r\n            position: 'absolute',\r\n            height,\r\n            lineHeight: `${height - 2}px`,\r\n            right: 4,\r\n            top: 0,\r\n            fontSize: 10,\r\n            fontWeight: 'bold',\r\n            overflow: 'hidden',\r\n            textShadow: '0px 0px 3px black',\r\n          }}\r\n        >\r\n          <Monodiv>{children}</Monodiv>\r\n        </FullContainer>\r\n      </BoxContainer>\r\n    </HoverToolTip>\r\n  )\r\n}\r\n\r\nexport interface HealthGaugePropsT {\r\n  character: ProcessedCharacterT\r\n  height?: number\r\n}\r\nexport const HealthGauge = (props: HealthGaugePropsT) => {\r\n  const { character, height = 12 } = props\r\n  const health = noneg(character.health - character.stats.healthOffset)\r\n  return (\r\n    <Gauge\r\n      name='Health'\r\n      color='#8f4e4d'\r\n      max={character.health}\r\n      value={health}\r\n      height={height}\r\n    >\r\n      {health}/{character.health}\r\n    </Gauge>\r\n  )\r\n}\r\nexport interface XPGaugePropsT {\r\n  character: ProcessedCharacterT\r\n}\r\nexport const XPGauge = (props: HealthGaugePropsT) => {\r\n  const { character } = props\r\n  const health = noneg(character.health - character.stats.healthOffset)\r\n  return (\r\n    <Gauge name='XP' color='#5e8575' max={3300} value={1256} height={12}>\r\n      1256/3300\r\n    </Gauge>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { styled, withWrapper } from 'styletron-react'\r\nimport { HoverToolTip } from '../components/Tooltip'\r\n\r\nconst Div = styled('div', {\r\n  transform: 'rotateY(0deg) rotate(-45deg)',\r\n})\r\nexport const Badge = withWrapper(Div, (Element) => (props: any) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: props.$absolute === false ? 'relative' : 'absolute',\r\n        background: '#111',\r\n        padding: '4px',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        boxShadow: '1px 1px 0px black',\r\n        height: props.$size || '20px',\r\n        width: props.$size || '20px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        lineHeight: '20px',\r\n        fontWeight: 'bolder',\r\n        borderRadius: '30%',\r\n        transform: 'rotateY(0deg) rotate(45deg)',\r\n        color: props.$color || 'white',\r\n        top: props.$top,\r\n        bottom: props.$bottom,\r\n        right: props.$right,\r\n        left: props.$left,\r\n      }}\r\n    >\r\n      <Element {...props} />\r\n    </div>\r\n  )\r\n})\r\n\r\nexport interface HoverBadgePropsT {\r\n  children: JSX.Element\r\n  content: JSX.Element\r\n  badgeProps: any\r\n  direction?: 'up' | 'down' | 'left' | 'right'\r\n}\r\nexport const HoverBadge = (props: HoverBadgePropsT) => {\r\n  const { children, content, badgeProps, direction } = props\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        top: badgeProps.$top,\r\n        bottom: badgeProps.$bottom,\r\n        left: badgeProps.$left,\r\n        right: badgeProps.$right,\r\n      }}\r\n    >\r\n      <HoverToolTip\r\n        distance={2}\r\n        direction={direction || 'right'}\r\n        // styles={{ position: 'absolute' }}\r\n        content={content || <div />}\r\n      >\r\n        <Badge\r\n          $absolute={false}\r\n          $size={badgeProps.$size}\r\n          $color={badgeProps.$color}\r\n          style={badgeProps.style}\r\n        >\r\n          {children}\r\n        </Badge>\r\n      </HoverToolTip>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nexport interface IconPropsT {\r\n  src: string\r\n  size: number\r\n  fill?: string\r\n  style?: React.CSSProperties\r\n  shadow?: boolean\r\n  onClick?: () => void\r\n}\r\nexport const Icon = ({\r\n  src,\r\n  size,\r\n  style = {},\r\n  fill = 'white',\r\n  shadow,\r\n  onClick,\r\n}: IconPropsT) => {\r\n  const [loading, setLoading] = useState(true)\r\n  const [svg, setSvg] = useState('')\r\n\r\n  useEffect(() => {\r\n    if (src) {\r\n      fetch(src)\r\n        .then((res) => res.text())\r\n        .then((text) => setSvg(text))\r\n        .then(() => setLoading(false))\r\n    }\r\n  }, [src])\r\n\r\n  return !loading ? (\r\n    <div\r\n      className={`icon ${shadow ? 'shadow' : ''}`}\r\n      onClick={() => {\r\n        if (onClick) onClick()\r\n      }}\r\n      style={{ ...style, height: size, width: size, fill }}\r\n      dangerouslySetInnerHTML={{ __html: svg }}\r\n    />\r\n  ) : (\r\n    <div />\r\n  )\r\n}\r\n","import { StatsT, ArmorTypeT, StatusTypeT } from '../types'\r\n\r\nimport Vigor from './svg/delapouite/heart-beats.svg'\r\nimport Strength from './svg/delapouite/biceps.svg'\r\nimport Brain from './svg/lorc/brain.svg'\r\nimport Awareness from './svg/delapouite/eye-target.svg'\r\nimport Juggler from './svg/lorc/juggler.svg'\r\nimport Agility from './svg/lorc/sprint.svg'\r\nimport Clover from './svg/lorc/clover.svg'\r\nimport Accuracy from './svg/delapouite/convergence-target.svg'\r\n\r\nimport Dazed from './svg/lorc/star-swirl.svg'\r\nimport Targeted from './svg/sbed/targeted.svg'\r\nimport Evasive from './svg/lorc/dodging.svg'\r\n\r\nimport Shot from './svg/lorc/high-shot.svg'\r\nimport SnipeShot from './svg/delapouite/shield-impact.svg'\r\nimport Surge from './svg/lorc/fire-zone.svg'\r\nimport AreaBast from './svg/lorc/heavy-timer.svg'\r\nimport Dazzle from './svg/lorc/ubisoft-sun.svg'\r\nimport Smash from './svg/lorc/flat-hammer.svg'\r\nimport Shockwave from './svg/lorc/hammer-drop.svg'\r\nimport Taunt from './svg/lorc/bordered-shield.svg'\r\nimport Alto from './svg/delapouite/g-clef.svg'\r\nimport { SHOT } from '../objects/skills/shot'\r\nimport { SNIPE_SHOT } from '../objects/skills/snipe_shot'\r\nimport { SURGE } from '../objects/skills/surge'\r\nimport { AREA_BLAST } from '../objects/skills/area_blast'\r\nimport { DAZZLE } from '../objects/skills/Dazzle'\r\nimport { SMASH } from '../objects/skills/smash'\r\nimport { SHOCKWAVE } from '../objects/skills/shockwave'\r\nimport { TAUNT } from '../objects/skills/taunt'\r\nimport { ALTO } from '../objects/skills/alto'\r\n\r\nimport MagicArmor from './svg/lorc/robe.svg'\r\nimport ClothArmor from './svg/lorc/scale-mail.svg'\r\nimport Armor from './svg/delapouite/chest-armor.svg'\r\nimport Shield from './svg/delapouite/viking-shield.svg'\r\nimport MagicShield from './svg/lorc/lightning-shield.svg'\r\nimport Footwear from './svg/lorc/leather-boot.svg'\r\nimport Hat from './svg/delapouite/robin-hood-hat.svg'\r\nimport MagicHat from './svg/lorc/pointy-hat.svg'\r\nimport Helmet from './svg/lorc/visored-helm.svg'\r\n\r\nexport const STATI_ICONS: Partial<Record<keyof StatsT | 'accuracy', string>> = {\r\n  vigor: Vigor,\r\n  strength: Strength,\r\n  intelligence: Brain,\r\n  perception: Awareness,\r\n  talent: Juggler,\r\n  agility: Agility,\r\n  luck: Clover,\r\n  accuracy: Accuracy,\r\n}\r\n\r\nexport const STATUS_ICONS: Partial<Record<StatusTypeT, string>> = {\r\n  dazed: Dazed,\r\n  targeted: Targeted,\r\n  evasive: Evasive,\r\n}\r\n\r\nexport const SKILL_ICONS: Record<string, string> = {\r\n  [SHOT.id]: Shot,\r\n  [SNIPE_SHOT.id]: SnipeShot,\r\n  [SURGE.id]: Surge,\r\n  [AREA_BLAST.id]: AreaBast,\r\n  [DAZZLE.id]: Dazzle,\r\n  [SMASH.id]: Smash,\r\n  [SHOCKWAVE.id]: Shockwave,\r\n  [TAUNT.id]: Taunt,\r\n  [ALTO.id]: Alto,\r\n}\r\n\r\nexport const ARMOR_TYPE_ICONS: Record<ArmorTypeT, string> = {\r\n  ['magic-armor']: MagicArmor,\r\n  ['cloth-armor']: ClothArmor,\r\n  armor: Armor,\r\n  shield: Shield,\r\n  ['magic-shield']: MagicShield,\r\n  footwear: Footwear,\r\n  hat: Hat,\r\n  ['magic-hat']: MagicHat,\r\n  helmet: Helmet,\r\n  charm: '',\r\n  ring: '',\r\n}\r\n","import React from 'react'\r\nimport { Tooltip } from '../Tooltip'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { STATUS_ICONS } from '../../icons/maps'\r\nimport { Icon } from '../Icon'\r\nimport { StatusT } from '../../types'\r\n\r\nexport interface TagPreviewPropsT {\r\n  tag: StatusT\r\n  direction?: 'up' | 'down' | 'left' | 'right'\r\n}\r\nexport const TagPreview = (props: TagPreviewPropsT) => {\r\n  const { tag, direction } = props\r\n  return (\r\n    <Tooltip\r\n      direction={direction || 'bottom'}\r\n      content={\r\n        <BoxContainer style={{ maxWidth: 200 }}>\r\n          <FlexContainer $direction='column'>\r\n            <strong style={{ marginBottom: 8 }}>\r\n              {tag.type} {tag.duration > 0 ? `(${tag.duration})` : ''}\r\n            </strong>\r\n            {tag.description && <span>{tag.description}</span>}\r\n          </FlexContainer>\r\n        </BoxContainer>\r\n      }\r\n    >\r\n      <Icon shadow src={STATUS_ICONS[tag.type] || ''} size={20} />\r\n    </Tooltip>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { CharacterT } from '../../types'\r\n\r\nexport interface CharacterImagePropsT {\r\n  character: CharacterT\r\n  size: number\r\n}\r\nexport const CharacterImage = (props: CharacterImagePropsT) => {\r\n  const { character, size } = props\r\n  return (\r\n    <img\r\n      alt='profile'\r\n      height={size}\r\n      width={size}\r\n      src={`https://picsum.photos/seed/${character.name}/94/94`}\r\n      style={{\r\n        height: size,\r\n        width: size,\r\n      }}\r\n    />\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ProcessedCharacterT, StatsT } from '../../types'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\nimport { XPGauge, HealthGauge } from '../Gauge'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { Monodiv } from '../../elements/monospace'\r\nimport { styled, withStyle } from 'styletron-react'\r\nimport { HoverBadge } from '../../elements/badge'\r\nimport { Icon } from '../Icon'\r\nimport { STATI_ICONS } from '../../icons/maps'\r\nimport Details from '../../icons/svg/delapouite/skills.svg'\r\nimport Inventory from '../../icons/svg/lorc/knapsack.svg'\r\nimport { TagPreview } from '../TagPreview'\r\nimport { CharacterImage } from '../CharacterImage'\r\n\r\nconst ResourceE = withStyle(Monodiv, (props: any) => ({\r\n  height: 15,\r\n  color: props.$color,\r\n  fontSize: '12px',\r\n  fontWeight: 'bolder',\r\n  padding: '0px 4px',\r\n  lineHeight: '15px',\r\n  flex: 1,\r\n  textAlign: 'center',\r\n  background: '#111',\r\n  display: 'flex',\r\n}))\r\n\r\nexport interface PartyCharacterProps {\r\n  character: ProcessedCharacterT\r\n  activeCharacter: ProcessedCharacterT\r\n  hoverable?: boolean\r\n  selected?: boolean\r\n  isHovering?: boolean\r\n  onClick?: () => void\r\n}\r\nconst Wrapper = styled('div', (props: any) => {\r\n  const { $selected, $active, $hoverable, $isHovering } = props\r\n  const hoverable = $hoverable && !$selected\r\n  return {\r\n    margin: 10,\r\n    position: 'relative',\r\n    boxShadow: $active ? '0px 0px 20px white' : 'none',\r\n    transition: 'all 0.4s',\r\n    userSelect: 'none',\r\n  }\r\n})\r\n\r\ninterface CharacterStatPropsT {\r\n  statKey: keyof StatsT\r\n  character: ProcessedCharacterT\r\n}\r\nconst CharacterStat = (props: CharacterStatPropsT) => {\r\n  const { statKey, character } = props\r\n  return (\r\n    <ResourceE $color={getStatColor(character, statKey)}>\r\n      <Icon\r\n        src={STATI_ICONS[statKey] || ''}\r\n        fill={getStatColor(character, statKey)}\r\n        size={14}\r\n        style={{ marginRight: 4 }}\r\n      />\r\n      {character.stats[statKey]}\r\n    </ResourceE>\r\n  )\r\n}\r\n\r\nconst getStatColor = (\r\n  character: ProcessedCharacterT,\r\n  key: keyof StatsT,\r\n): string => {\r\n  const a = character.stats[key]\r\n  const b = character.rawStats[key]\r\n  if (a > b) return 'lightgreen'\r\n  if (b > a) return 'lightcoral'\r\n  return 'rgba(255,255,255,0.6)'\r\n}\r\n\r\nexport const PartyCharacter = (props: PartyCharacterProps) => {\r\n  const {\r\n    character,\r\n    activeCharacter,\r\n    hoverable,\r\n    selected,\r\n    isHovering,\r\n    onClick,\r\n  } = props\r\n  const health = character.health - character.stats.healthOffset\r\n  return (\r\n    <Wrapper\r\n      $hoverable={hoverable && !character.dead}\r\n      $active={character.id === activeCharacter.id}\r\n      $selected={selected}\r\n      $isHovering={isHovering}\r\n      style={{\r\n        opacity: character.dead ? 0.5 : 1,\r\n      }}\r\n    >\r\n      <BoxContainer\r\n        onClick={() => (onClick && !character.dead ? onClick() : null)}\r\n        style={{\r\n          borderWidth: 2,\r\n          cursor: onClick ? 'pointer' : 'default',\r\n        }}\r\n        substyle={{ padding: 0, minWidth: 380 }}\r\n      >\r\n        <FlexContainer style={{ border: '2px solid black' }}>\r\n          <FlexContainer style={{ borderRight: '2px solid black' }}>\r\n            <CharacterImage character={character} size={115} />\r\n          </FlexContainer>\r\n          <FlexContainer $full $direction='column'>\r\n            <FlexContainer\r\n              style={{\r\n                marginTop: -3,\r\n                marginRight: -3,\r\n                padding: '0 4px',\r\n                paddingLeft: 8,\r\n                background: '#555',\r\n                height: 24,\r\n                lineHeight: '28px',\r\n                borderBottom: '1px solid rgba(255,255,255,0.2)',\r\n                boxShadow: '0px 4px 5px black',\r\n              }}\r\n            >\r\n              <span\r\n                style={{\r\n                  fontWeight: 'bolder',\r\n                  textShadow: '0px 0px 2px black',\r\n                }}\r\n              >\r\n                {character.name}\r\n              </span>\r\n            </FlexContainer>\r\n            <FlexContainer>\r\n              <span\r\n                style={{\r\n                  fontWeight: 'bolder',\r\n                  padding: 4,\r\n                  fontSize: 42,\r\n                  height: 42,\r\n                  lineHeight: '48px',\r\n                  color: '#b55553',\r\n                }}\r\n              >\r\n                {health > 0 ? health : 0}\r\n              </span>\r\n              <FullContainer />\r\n              <FlexContainer $direction='column'>\r\n                <FullContainer />\r\n                <FlexContainer>\r\n                  <Icon\r\n                    src={Inventory}\r\n                    fill={'rgba(255,255,255,0.7)'}\r\n                    size={18}\r\n                    shadow\r\n                    style={{ padding: 6, cursor: 'pointer' }}\r\n                  />\r\n                  <Icon\r\n                    src={Details}\r\n                    fill={'rgba(255,255,255,0.7)'}\r\n                    size={18}\r\n                    shadow\r\n                    style={{ padding: 6, cursor: 'pointer' }}\r\n                  />\r\n                </FlexContainer>\r\n              </FlexContainer>\r\n            </FlexContainer>\r\n            <FullContainer />\r\n            <HealthGauge character={character} />\r\n            <XPGauge character={character} />\r\n            <HoverBadge\r\n              badgeProps={{ $bottom: '18px', $left: '105px' }}\r\n              content={<BoxContainer>Character Level</BoxContainer>}\r\n            >\r\n              <span>{character.level}</span>\r\n            </HoverBadge>\r\n            <FlexContainer>\r\n              <CharacterStat statKey='strength' character={character} />\r\n              <CharacterStat statKey='vigor' character={character} />\r\n              <CharacterStat statKey='intelligence' character={character} />\r\n              <CharacterStat statKey='perception' character={character} />\r\n              <CharacterStat statKey='talent' character={character} />\r\n              <CharacterStat statKey='agility' character={character} />\r\n              <CharacterStat statKey='luck' character={character} />\r\n            </FlexContainer>\r\n          </FlexContainer>\r\n        </FlexContainer>\r\n      </BoxContainer>\r\n      <FlexContainer\r\n        style={{\r\n          position: 'absolute',\r\n          top: '-24px',\r\n          right: '4px',\r\n        }}\r\n      >\r\n        {character.statusEffects.map((tag) => (\r\n          <TagPreview direction='up' tag={tag} />\r\n        ))}\r\n      </FlexContainer>\r\n      <HoverBadge\r\n        badgeProps={{ $bottom: '64px', $left: '-12px', $color: 'lightblue' }}\r\n        content={<BoxContainer>Armor</BoxContainer>}\r\n      >\r\n        <span>{character.stats.armor}</span>\r\n      </HoverBadge>\r\n      <HoverBadge\r\n        badgeProps={{ $bottom: '26px', $left: '-12px', $color: 'plum' }}\r\n        content={<BoxContainer>Magic Resistance</BoxContainer>}\r\n      >\r\n        <span>{character.stats.resistance}</span>\r\n      </HoverBadge>\r\n      <HoverBadge\r\n        badgeProps={{ $bottom: '-10px', $left: '-12px', $color: 'lightgreen' }}\r\n        content={<BoxContainer>Evasion</BoxContainer>}\r\n      >\r\n        <span>{character.stats.evasion}</span>\r\n      </HoverBadge>\r\n      <HoverBadge\r\n        direction='up'\r\n        content={<BoxContainer>Weapon Damage</BoxContainer>}\r\n        badgeProps={{\r\n          $bottom: '-12px',\r\n          $left: '40px',\r\n          $size: '35px',\r\n          $color:\r\n            character.weapon.damage.type === 'physical'\r\n              ? 'rgba(255,255,255,0.8)'\r\n              : 'plum',\r\n          style: { fontSize: 24 },\r\n        }}\r\n      >\r\n        <span>\r\n          {character.weapon.damage.damage + character.stats.damageModifier}\r\n        </span>\r\n      </HoverBadge>\r\n    </Wrapper>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { styled, withStyle } from 'styletron-react'\r\nimport { animated, useSpring } from 'react-spring'\r\n\r\nexport interface ButtonPropsT {\r\n  $direction?: 'up' | 'down'\r\n}\r\nexport const Button = styled('button', (props: ButtonPropsT) => {\r\n  return {\r\n    cursor: 'pointer',\r\n    background: '#222',\r\n    boxShadow: 'inset 0px 0px 3px black',\r\n    textShadow: '0px 1px 3px black',\r\n    border: '1px solid rgba(255,255,255,0.2)',\r\n    color: 'rgba(255,255,255,1)',\r\n    ':hover': {\r\n      border: '1px solid rgba(255,255,255,0.4)',\r\n    },\r\n    ':active': {\r\n      outline: 'none',\r\n      border: '1px solid rgba(255,255,255,0.7)',\r\n    },\r\n    ':focus': {\r\n      outline: 'none',\r\n    },\r\n    padding: '10px 30px',\r\n  }\r\n})\r\n\r\nexport const RedButton = withStyle(Button, (props: ButtonPropsT) => {\r\n  return {\r\n    background:\r\n      'linear-gradient(0deg, rgba(157,0,0,1) 0%, rgba(110,0,0,1) 100%)',\r\n  }\r\n})\r\n\r\nexport const ConfirmButton = withStyle(Button, (props: ButtonPropsT) => {\r\n  const { $direction } = props\r\n  return {\r\n    // background: 'linear-gradient(0deg, rgba(157,0,0,1) 0%, rgba(110,0,0,1) 100%)',\r\n    // fontWeight: 'bold',\r\n    borderTop: $direction === 'down' ? 'none' : undefined,\r\n    borderBottom: $direction === 'up' ? 'none' : undefined,\r\n    padding: '10px 30px',\r\n    boxShadow: 'inset 0px 2px 8px black',\r\n    ':hover': {\r\n      borderTop: $direction === 'down' ? 'none' : undefined,\r\n      borderBottom: $direction === 'up' ? 'none' : undefined,\r\n    },\r\n    animationDirection: '1s',\r\n    animationIterationCount: 'infinite',\r\n    animationName: `\r\n      from: {\r\n        background: 'rgba(255,255,255,0.4)',\r\n      },\r\n\r\n      to: {\r\n        background: 'rgba(255,255,255,1)',\r\n      },\r\n    `,\r\n  }\r\n})\r\n\r\nexport const ConfirmButton2 = (props: any) => {\r\n  const styles = useSpring({\r\n    from: {\r\n      border: '1px solid rgba(255,255,255,0)',\r\n    },\r\n    to: async (next: any) => {\r\n      while (1) {\r\n        await next({\r\n          border: '1px solid rgba(255,255,255,0)',\r\n        })\r\n        await next({ border: '1px solid rgba(255,255,255,1)' })\r\n      }\r\n    },\r\n  })\r\n  return (\r\n    <animated.div style={styles}>\r\n      <ConfirmButton style={{ border: 'none' }}>{props.children}</ConfirmButton>\r\n    </animated.div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { ProcessedPartyT } from '../../types'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { PartyCharacter } from '../PartyCharacter'\r\nimport { useCombatContext } from '../../contexts/CombatContext'\r\nimport { ConfirmButton } from '../../elements/button'\r\n\r\nexport interface CombatPartyPlayerPropsT {\r\n  party: ProcessedPartyT\r\n}\r\nexport const CombatPlayerParty = (props: CombatPartyPlayerPropsT) => {\r\n  const { party } = props\r\n  const {\r\n    activeCharacter,\r\n    selectedSkill,\r\n    onTargetsSelect,\r\n    next,\r\n  } = useCombatContext()\r\n\r\n  const [isHovering, setIsHovering] = useState<boolean>(false)\r\n  return (\r\n    <FlexContainer $direction='column'>\r\n      <FlexContainer\r\n        style={{\r\n          justifyContent: 'space-around',\r\n          alignItems: 'flex-end',\r\n          cursor: selectedSkill?.targetType === 'party' ? 'pointer' : 'default',\r\n        }}\r\n        onMouseEnter={() => setIsHovering(true)}\r\n        onMouseLeave={() => setIsHovering(false)}\r\n        onClick={() => {\r\n          if (selectedSkill && selectedSkill.targetType === 'party') {\r\n            onTargetsSelect(party)\r\n          }\r\n        }}\r\n      >\r\n        {party.characters.map((c) => (\r\n          <div key={c.id}>\r\n            {selectedSkill &&\r\n              !c.dead &&\r\n              ((selectedSkill.targetType === 'self' &&\r\n                c.id === activeCharacter.id) ||\r\n                selectedSkill.targetType === 'ally') && (\r\n                <FlexContainer style={{ justifyContent: 'center' }}>\r\n                  <div style={{ boxShadow: '0px 2px 5px black' }}>\r\n                    <ConfirmButton onClick={() => next(c)} $direction='up'>\r\n                      Confirm Target\r\n                    </ConfirmButton>\r\n                  </div>\r\n                </FlexContainer>\r\n              )}\r\n            <PartyCharacter activeCharacter={activeCharacter} character={c} />\r\n          </div>\r\n        ))}\r\n      </FlexContainer>\r\n      {selectedSkill && selectedSkill.targetType === 'party' && (\r\n        <FlexContainer style={{ justifyContent: 'center' }}>\r\n          <div style={{ boxShadow: '0px 2px 5px black' }}>\r\n            <ConfirmButton\r\n              onClick={() => next(party)}\r\n              onMouseEnter={() => setIsHovering(true)}\r\n              onMouseLeave={() => setIsHovering(false)}\r\n            >\r\n              Confirm Group Target\r\n            </ConfirmButton>\r\n          </div>\r\n        </FlexContainer>\r\n      )}\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import { ModalStylesT } from '.'\r\n\r\nexport interface ModalContextStateT {\r\n  isOpen: boolean\r\n  contents: JSX.Element | null\r\n  callback: ((payload?: any) => void) | null\r\n  payload: any | null\r\n  blocking: boolean\r\n  styles: ModalStylesT\r\n}\r\nexport const initialState: ModalContextStateT = {\r\n  isOpen: false,\r\n  contents: null,\r\n  callback: null,\r\n  payload: null,\r\n  blocking: false,\r\n  styles: {},\r\n}\r\n\r\nexport const OPEN = 'modalContext/OPEN'\r\nexport const CLOSE = 'modalContext/CLOSE'\r\nexport const SET_CONTENTS = 'modalContext/SET_CONTENTS'\r\nexport const SET_CALLBACK = 'modalContext/SET_CALLBACK'\r\nexport const SET_PAYLOAD = 'modalContext/SET_PAYLOAD'\r\nexport const SET_BLOCKING = 'modalContext/SET_BLOCKING'\r\nexport const SET_STYLE = 'modalContext/SET_STYLE'\r\n\r\nexport const actions = {\r\n  open: (\r\n    contents?: JSX.Element,\r\n    styles?: ModalStylesT,\r\n    blocking?: boolean,\r\n    callback?: (payload?: any) => void,\r\n  ) => ({\r\n    type: OPEN,\r\n    contents,\r\n    styles,\r\n    blocking,\r\n    callback,\r\n  }),\r\n  close: () => ({ type: CLOSE }),\r\n  setPayload: (payload: any) => ({ type: SET_PAYLOAD, payload }),\r\n  setContents: (contents: JSX.Element | null) => ({\r\n    type: SET_CONTENTS,\r\n    contents,\r\n  }),\r\n  setCallback: (callback: (() => void) | null) => ({\r\n    type: SET_CALLBACK,\r\n    callback,\r\n  }),\r\n  setBlocking: (blocking: boolean) => ({ type: SET_BLOCKING, blocking }),\r\n  setStyles: (styles: ModalStylesT) => ({ type: SET_STYLE, styles }),\r\n}\r\n\r\nconst core: Record<\r\n  string,\r\n  (state: ModalContextStateT, action: any) => ModalContextStateT\r\n> = {\r\n  [OPEN]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    isOpen: true,\r\n    contents: action.contents ? action.contents : state.contents,\r\n    styles: action.styles ? action.styles : state.styles || {},\r\n    blocking: action.blocking || false,\r\n    callback: action.callback ? action.callback : state.callback,\r\n  }),\r\n  [CLOSE]: (state: ModalContextStateT) => ({\r\n    ...state,\r\n    isOpen: false,\r\n  }),\r\n  [SET_PAYLOAD]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    payload: action.payload,\r\n  }),\r\n  [SET_CONTENTS]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    callback: null,\r\n    payload: null,\r\n    contents: action.contents,\r\n    blocking: false,\r\n    style: {},\r\n  }),\r\n  [SET_CALLBACK]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    callback: action.callback,\r\n  }),\r\n  [SET_BLOCKING]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    blocking: action.blocking,\r\n  }),\r\n  [SET_STYLE]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    styles: action.styles,\r\n  }),\r\n}\r\n\r\nexport const reducer = (\r\n  state: ModalContextStateT = initialState,\r\n  action: any,\r\n) => {\r\n  const coreFunction = core[action.type]\r\n  return coreFunction ? coreFunction(state, action) : state\r\n}\r\n","import React, { useContext, useReducer, useMemo, CSSProperties } from 'react'\r\nimport Modal from 'react-modal'\r\nimport { actions, reducer, initialState, ModalContextStateT } from './reducer'\r\n\r\nexport interface ModalContextT {\r\n  open: (\r\n    contents?: JSX.Element,\r\n    styles?: ModalStylesT,\r\n    blocking?: boolean,\r\n    callback?: (payload?: any) => void,\r\n  ) => void\r\n  close: (payload?: any) => void\r\n  setPayload: (payload: any) => void\r\n  setBlocking: (blocking: boolean) => void\r\n  setContents: (contents: JSX.Element) => void\r\n  setCallback: (callback: (payload?: any) => void) => void\r\n  setStyles: (styles: ModalStylesT) => void\r\n}\r\nconst defaultContext: ModalContextT = {\r\n  open: () => null,\r\n  close: () => null,\r\n  setBlocking: () => null,\r\n  setPayload: () => null,\r\n  setContents: () => null,\r\n  setCallback: () => null,\r\n  setStyles: () => null,\r\n}\r\nexport const ModalContext = React.createContext<ModalContextT>(defaultContext)\r\nexport const useModalContext = () => useContext(ModalContext)\r\n\r\nexport interface ModalStylesT {\r\n  modal?: CSSProperties\r\n  overlay?: CSSProperties\r\n}\r\n\r\nconst getContextValue = (\r\n  state: ModalContextStateT,\r\n  dispatch: React.Dispatch<any>,\r\n) => ({\r\n  isOpen: state.isOpen,\r\n  open: (\r\n    contents?: JSX.Element,\r\n    styles?: ModalStylesT,\r\n    blocking?: boolean,\r\n    callback?: (payload?: any) => void,\r\n  ) => {\r\n    dispatch(actions.open(contents, styles, blocking, callback))\r\n  },\r\n  close: (payload?: any) => {\r\n    if (state.callback) state.callback(payload || state.payload)\r\n    dispatch(actions.close())\r\n  },\r\n  setPayload: (payload: any) => dispatch(actions.setPayload(payload)),\r\n  setContents: (contents: JSX.Element) =>\r\n    dispatch(actions.setContents(contents)),\r\n  setCallback: (callback: (payload?: any) => void) =>\r\n    dispatch(actions.setCallback(callback)),\r\n  setBlocking: (blocking: boolean) => dispatch(actions.setBlocking(blocking)),\r\n  setStyles: (styles: ModalStylesT) => dispatch(actions.setStyles(styles)),\r\n})\r\nModal.setAppElement('#root')\r\nexport interface ModalContextProviderPropsT {\r\n  children: JSX.Element\r\n}\r\nexport const ModalContextProvider = (props: ModalContextProviderPropsT) => {\r\n  const { children } = props\r\n  const reducerValue = useReducer(reducer, initialState)\r\n  const [state] = reducerValue\r\n  const context = useMemo(() => getContextValue(...reducerValue), [\r\n    reducerValue,\r\n  ])\r\n\r\n  return (\r\n    <ModalContext.Provider value={context}>\r\n      {children}\r\n      <Modal\r\n        isOpen={state.isOpen}\r\n        onRequestClose={() => {\r\n          if (!state.blocking) context.close()\r\n        }}\r\n        style={{\r\n          content: {\r\n            backgroundColor: '#111',\r\n            color: 'white',\r\n            width: 400,\r\n            margin: '0 auto',\r\n            bottom: 'unset',\r\n            borderColor: '#555',\r\n            ...state.styles.modal,\r\n          },\r\n          overlay: {\r\n            backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n            ...state.styles.overlay,\r\n          },\r\n        }}\r\n      >\r\n        {state.contents || <div />}\r\n      </Modal>\r\n    </ModalContext.Provider>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { SkillT, StatsT } from '../../types'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { STATI_ICONS } from '../../icons/maps'\r\nimport { Icon } from '../Icon'\r\nimport { Badge } from '../../elements/badge'\r\nimport { CheckKVT } from '../RoundResultRenderer'\r\nimport X from '../../icons/svg/lorc/split-cross.svg'\r\n\r\nexport interface SkillChecksPropsT {\r\n  skill: SkillT\r\n}\r\nexport const SkillChecks = (props: SkillChecksPropsT) => {\r\n  const { skill } = props\r\n  return (\r\n    <FlexContainer\r\n      style={{ justifyContent: 'center', padding: '0px 0 24px 0' }}\r\n    >\r\n      {skill.rolls.map((roll, i) => (\r\n        <SkillCheck\r\n          key={i}\r\n          check={{ label: roll.key || 'strength', result: undefined }}\r\n        />\r\n      ))}\r\n    </FlexContainer>\r\n  )\r\n}\r\n\r\nexport interface SkillCheckT {\r\n  check: CheckKVT\r\n  size?: number\r\n  padding?: number\r\n}\r\nexport const SkillCheck = (props: SkillCheckT) => {\r\n  const { check, size = 36, padding = 12 } = props\r\n  return (\r\n    <div\r\n      style={{\r\n        padding: `0px ${padding}px`,\r\n        opacity: check.result === undefined ? 0.5 : 1,\r\n      }}\r\n    >\r\n      <Badge $absolute={false} $size={size}>\r\n        <Icon\r\n          src={STATI_ICONS[(check.label as keyof StatsT) || 'strength'] || ''}\r\n          fill={getColor(check.result)}\r\n          size={size - 4}\r\n        />\r\n        {check.result === false && (\r\n          <Icon\r\n            src={X}\r\n            fill={'lightcoral'}\r\n            size={size - 4}\r\n            style={{ position: 'absolute', top: 0 }}\r\n          />\r\n        )}\r\n      </Badge>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst getColor = (result: boolean | undefined) => {\r\n  if (result === true) return 'white'\r\n  if (result === false) return 'rgba(255,255,255,0.6)'\r\n  return 'rgba(255,255,255,0.6)'\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useCombatContext } from '../../contexts/CombatContext'\r\nimport { useModalContext } from '../../contexts/ModalContext'\r\nimport { NameSpanBuilder } from '../../contexts/CombatLogContext/util'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport Kefir from 'kefir'\r\nimport { SkillCheck } from '../SkillChecks'\r\n\r\nexport interface RoundResultRendererPropsT {\r\n  isModal?: boolean\r\n}\r\nexport const RoundResultRenderer = (props: RoundResultRendererPropsT) => {\r\n  const { isModal = true } = props\r\n  const { activeRound, commit } = useCombatContext()\r\n  const { open, close } = useModalContext()\r\n  const [isOpen, setIsOpen] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (activeRound && !isOpen) {\r\n      setIsOpen(true)\r\n      if (isModal) {\r\n        open(\r\n          <RoundResult\r\n            close={() => {\r\n              close(true)\r\n              setIsOpen(false)\r\n              commit()\r\n            }}\r\n          />,\r\n          {\r\n            overlay: {\r\n              background: 'transparent',\r\n            },\r\n          },\r\n          true,\r\n        )\r\n      }\r\n    }\r\n  }, [isModal, isOpen, activeRound, open, close, commit])\r\n\r\n  if (!isModal && activeRound && activeRound[0]) {\r\n    return (\r\n      <FlexContainer style={{ height: 315 }}>\r\n        <RoundResult\r\n          close={() => {\r\n            setIsOpen(false)\r\n            commit()\r\n          }}\r\n        />\r\n      </FlexContainer>\r\n    )\r\n  }\r\n  return null\r\n}\r\n\r\nexport interface RoundResultPropsT {\r\n  close: () => void\r\n}\r\nexport interface CheckKVT {\r\n  label: string\r\n  result: boolean | undefined\r\n}\r\nexport const RoundResult = (props: RoundResultPropsT) => {\r\n  const { close } = props\r\n  const { activeRound } = useCombatContext()\r\n  const [isDone, setIsDone] = useState(false)\r\n  const rounds = activeRound || []\r\n  const round = rounds[0]\r\n  const [roundResults, setRoundResults] = useState<CheckKVT[]>(\r\n    !round\r\n      ? []\r\n      : round.rollResults.map((result, i) => ({\r\n          label: round.skill.rolls[i].key || '<NULL>',\r\n          result: undefined,\r\n        })),\r\n  )\r\n\r\n  const updateRoundResult = (value: CheckKVT, index: number) =>\r\n    setRoundResults((r) => r.map((r, i) => (i === index ? value : r)))\r\n\r\n  useEffect(() => {\r\n    const stream = Kefir.sequentially(\r\n      200,\r\n      roundResults.map((r, i) => ({ ...r, index: i })),\r\n    )\r\n    stream.onValue((result) => {\r\n      updateRoundResult(\r\n        {\r\n          label: result.label,\r\n          result:\r\n            result.label === 'accuracy'\r\n              ? round.accuracySuccess\r\n              : round.rollResults[result.index].result,\r\n        },\r\n        result.index,\r\n      )\r\n    })\r\n    stream.onEnd(() => {\r\n      Kefir.later(500, undefined).onValue(() => {\r\n        setIsDone(true)\r\n      })\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (isDone) {\r\n      close()\r\n    }\r\n  }, [isDone, close])\r\n\r\n  if (!round) return null\r\n\r\n  const target = {\r\n    ...round.target,\r\n    name: rounds.length > 1 ? `${rounds.length} characters` : round.target.name,\r\n  }\r\n\r\n  return (\r\n    <FlexContainer $direction='column' style={{ textAlign: 'center' }}>\r\n      <FlexContainer style={{ justifyContent: 'space-evenly' }}>\r\n        {roundResults.map((result, i) => (\r\n          <SkillCheck key={i} check={result} />\r\n        ))}\r\n      </FlexContainer>\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\nimport { SkillT, ProcessedCharacterT } from '../../types'\r\nimport {\r\n  getChecksProbability,\r\n  getSkillDamageRange,\r\n  getSkillDamage,\r\n  getPerfectKeys,\r\n  getPerfectText,\r\n} from '../../functions'\r\n\r\nexport interface SkillPreviewPropsT {\r\n  skill: SkillT\r\n  source: ProcessedCharacterT\r\n  targets: ProcessedCharacterT[]\r\n}\r\nexport const SkillPreview = (props: SkillPreviewPropsT) => {\r\n  const { skill, source, targets } = props\r\n  const perfectChance = getChecksProbability(source, skill.rolls)\r\n  const damage = getSkillDamage(skill, source)\r\n  const damageString = getSkillDamageRange(\r\n    skill,\r\n    source,\r\n    targets.length === 0 ? undefined : targets,\r\n  )\r\n  const perfectKeys = getPerfectText(skill, source)\r\n  return (\r\n    <BoxContainer\r\n      style={{ marginTop: 30, position: 'relative' }}\r\n      substyle={{ background: '#111' }}\r\n    >\r\n      <FlexContainer $direction='column' style={{ alignItems: 'center' }}>\r\n        <FlexContainer style={{ marginTop: -27 }}>\r\n          <FullContainer />\r\n          <BoxContainer\r\n            substyle={{\r\n              padding: '4px 12px',\r\n              background: '#555',\r\n              fontWeight: 'bolder',\r\n            }}\r\n          >\r\n            {skill.name}\r\n          </BoxContainer>\r\n          <FullContainer />\r\n        </FlexContainer>\r\n        <span style={{ color: 'rgba(255,255,255,0.4)', marginTop: 8 }}>\r\n          Perect ({Math.floor(perfectChance * 100)}%){' '}\r\n          {perfectKeys.length > 0 && '='} {perfectKeys}\r\n        </span>\r\n        <FlexContainer $full style={{ width: '100%', marginBottom: 8 }}>\r\n          {damage.damage > 0 && (\r\n            <FlexContainer\r\n              $full\r\n              $direction='column'\r\n              style={{ alignItems: 'center', marginRight: 10 }}\r\n            >\r\n              <span\r\n                style={{\r\n                  color: damage.type === 'physical' ? 'lightblue' : 'plum',\r\n                  fontWeight: 'bolder',\r\n                  fontSize: 32,\r\n                }}\r\n              >\r\n                {damageString}\r\n              </span>\r\n              <span style={{ color: 'rgba(255,255,255,0.2)' }}>MAX DMG</span>\r\n            </FlexContainer>\r\n          )}\r\n          <FlexContainer\r\n            $full\r\n            $direction='column'\r\n            style={{ alignItems: 'center' }}\r\n          >\r\n            <span\r\n              style={{\r\n                fontWeight: 'bolder',\r\n                fontSize: 32,\r\n              }}\r\n            >\r\n              {source.stats[skill.rolls[0].key || 'strength'] +\r\n                (skill.rolls[0].offset || 0)}\r\n              %\r\n            </span>\r\n            <span style={{ color: 'rgba(255,255,255,0.2)' }}>\r\n              Per Check ACC\r\n            </span>\r\n          </FlexContainer>\r\n        </FlexContainer>\r\n        <FlexContainer style={{ marginBottom: -18 }}>\r\n          <FullContainer />\r\n          <BoxContainer\r\n            substyle={{ padding: '0px 12px', background: '#555', fontSize: 10 }}\r\n          >\r\n            {skill.targetType}\r\n          </BoxContainer>\r\n          <FullContainer />\r\n        </FlexContainer>\r\n      </FlexContainer>\r\n    </BoxContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { useCombatContext } from '../../contexts/CombatContext'\r\nimport { Button } from '../../elements/button'\r\nimport { SkillPreview } from '../SkillPreview'\r\nimport { SkillChecks } from '../SkillChecks'\r\nimport { PLAYER_PARTY_ID } from '../../objects/Party'\r\nimport { SKILL_ICONS } from '../../icons/maps'\r\nimport { Icon } from '../Icon'\r\nimport { Hover } from '../Hover'\r\n\r\nexport const CombatActions = () => {\r\n  const {\r\n    activeCharacter,\r\n    selectedSkill,\r\n    selectedTargets,\r\n    onSkillSelect,\r\n  } = useCombatContext()\r\n\r\n  if (!activeCharacter || activeCharacter.partyId !== PLAYER_PARTY_ID)\r\n    return null\r\n\r\n  return (\r\n    <FlexContainer $direction='column' style={{ minWidth: 340 }}>\r\n      {selectedSkill && <SkillChecks skill={selectedSkill} />}\r\n      <FlexContainer style={{ justifyContent: 'center' }}>\r\n        {activeCharacter.skills.map((skill) => (\r\n          <React.Fragment key={skill.id}>\r\n            {SKILL_ICONS[skill.id] ? (\r\n              <Hover delay={0}>\r\n                {({ isHovering }) => (\r\n                  <Icon\r\n                    src={SKILL_ICONS[skill.id]}\r\n                    size={42}\r\n                    shadow={true}\r\n                    style={{\r\n                      cursor: 'pointer',\r\n                      padding: '0 12px',\r\n                    }}\r\n                    onClick={() => onSkillSelect(skill)}\r\n                    fill={\r\n                      skill.id === selectedSkill?.id\r\n                        ? 'lightsalmon'\r\n                        : isHovering\r\n                        ? 'white'\r\n                        : 'rgba(255,255,255,0.8)'\r\n                    }\r\n                  />\r\n                )}\r\n              </Hover>\r\n            ) : (\r\n              <Button\r\n                key={skill.id}\r\n                onClick={() => onSkillSelect(skill)}\r\n                style={{\r\n                  background: '#111',\r\n                  borderColor:\r\n                    selectedSkill && skill.id === selectedSkill.id\r\n                      ? 'white'\r\n                      : undefined,\r\n                }}\r\n              >\r\n                {skill.name}\r\n              </Button>\r\n            )}\r\n          </React.Fragment>\r\n        ))}\r\n      </FlexContainer>\r\n      {selectedSkill && (\r\n        <SkillPreview\r\n          skill={selectedSkill}\r\n          source={activeCharacter}\r\n          targets={selectedTargets}\r\n        />\r\n      )}\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ProcessedCharacterT } from '../../types'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\nimport { HealthGauge } from '../Gauge'\r\nimport { styled } from 'styletron-react'\r\nimport { Badge, HoverBadge } from '../../elements/badge'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { TagPreview } from '../TagPreview'\r\nimport { CharacterImage } from '../CharacterImage'\r\nimport { usePrevious } from '../../hooks/usePrevious'\r\nimport { Spring } from 'react-spring/renderprops'\r\nimport { noneg } from '../../util'\r\n\r\nexport interface EnemyCharacterPropsT {\r\n  character: ProcessedCharacterT\r\n  activeCharacter: ProcessedCharacterT\r\n  hoverable?: boolean\r\n  selected?: boolean\r\n  isHovering?: boolean\r\n  onClick?: () => void\r\n}\r\nconst Wrapper = styled('div', (props: any) => {\r\n  const { $selected, $active, $hoverable, $isHovering } = props\r\n  const hoverable = $hoverable && !$selected\r\n  return {\r\n    margin: 10,\r\n    boxShadow: $active ? '0px 0px 20px white' : 'none',\r\n    transition: 'all 0.1s',\r\n  }\r\n})\r\nexport const EnemyCharacter = (props: EnemyCharacterPropsT) => {\r\n  const { character, activeCharacter, onClick } = props\r\n  const health = noneg(character.health - character.stats.healthOffset)\r\n  const previousHealth = usePrevious<number>(health)\r\n  return (\r\n    <div\r\n      onClick={() => (onClick && !character.dead ? onClick() : null)}\r\n      style={{\r\n        borderWidth: 2,\r\n        width: 380,\r\n        position: 'relative',\r\n        cursor: onClick ? 'pointer' : 'default',\r\n        color: 'rgba(255,255,255,0.8)',\r\n        opacity: character.dead ? 0.5 : 1,\r\n      }}\r\n    >\r\n      <FlexContainer style={{ alignItems: 'center' }}>\r\n        <FlexContainer style={{ border: '1px solid black' }}>\r\n          <Wrapper\r\n            $active={character.id === activeCharacter.id}\r\n            style={{\r\n              height: 64,\r\n              width: 64,\r\n            }}\r\n          >\r\n            <CharacterImage character={character} size={64} />\r\n          </Wrapper>\r\n        </FlexContainer>\r\n        <FlexContainer $full $direction='column'>\r\n          <FlexContainer\r\n            style={{\r\n              justifyContent: 'flex-end',\r\n            }}\r\n          >\r\n            <span\r\n              style={{\r\n                padding: '2px 4px',\r\n                textAlign: 'right',\r\n                fontSize: 18,\r\n                lineHeight: '18px',\r\n                background: 'rgba(0,0,0,0.4)',\r\n                textShadow: '1px 1px 2px black',\r\n              }}\r\n            >\r\n              {character.name}\r\n            </span>\r\n          </FlexContainer>\r\n          <div style={{ boxShadow: '0px 5px 15px rgba(0,0,0,0.4)' }}>\r\n            <HealthGauge character={character} height={20} />\r\n          </div>\r\n          <HoverBadge\r\n            direction='down'\r\n            content={<BoxContainer>Enemy Level</BoxContainer>}\r\n            badgeProps={{\r\n              $left: '-6px',\r\n              $bottom: '-6px',\r\n              $size: '20px',\r\n              $color: 'lightcoral',\r\n            }}\r\n          >\r\n            <span>{character.level}</span>\r\n          </HoverBadge>\r\n          <FlexContainer\r\n            style={{\r\n              position: 'absolute',\r\n              bottom: '-10px',\r\n              left: '70px',\r\n            }}\r\n          >\r\n            {character.statusEffects.map((tag, i) => (\r\n              <TagPreview key={i} tag={tag} />\r\n            ))}\r\n          </FlexContainer>\r\n          <FlexContainer\r\n            style={{\r\n              position: 'absolute',\r\n              bottom: '-6px',\r\n              right: '16px',\r\n              width: 52,\r\n              alignItems: 'center',\r\n            }}\r\n          >\r\n            <FullContainer />\r\n            {character.stats.armor > 0 && (\r\n              <Badge\r\n                $absolute={false}\r\n                $right='4px'\r\n                $size='12px'\r\n                $color='lightblue'\r\n              >\r\n                {character.stats.armor}\r\n              </Badge>\r\n            )}\r\n            {character.stats.resistance > 0 && (\r\n              <Badge $absolute={false} $size='12px' $color='plum'>\r\n                {character.stats.resistance}\r\n              </Badge>\r\n            )}\r\n            <FullContainer />\r\n          </FlexContainer>\r\n        </FlexContainer>\r\n        <span\r\n          style={{\r\n            fontWeight: 'bolder',\r\n            fontSize: 52,\r\n            height: 52,\r\n            width: 60,\r\n            textShadow: '1px 1px 10px black',\r\n            color: '#b55553',\r\n          }}\r\n        >\r\n          <Spring from={{ hp: previousHealth || health }} to={{ hp: health }}>\r\n            {(hpp) => <span>{Math.floor(hpp.hp)}</span>}\r\n          </Spring>\r\n        </span>\r\n      </FlexContainer>\r\n    </div>\r\n  )\r\n}\r\n","import { useState, useEffect, useRef } from 'react'\r\n\r\nexport const usePrevious = <T = any>(value: T) => {\r\n  const ref = useRef<T>()\r\n\r\n  useEffect(() => {\r\n    ref.current = value\r\n  }, [value])\r\n\r\n  return ref.current\r\n}\r\n","import React, { useState } from 'react'\r\nimport { ProcessedPartyT } from '../../types'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { useCombatContext } from '../../contexts/CombatContext'\r\nimport { ConfirmButton2, ConfirmButton } from '../../elements/button'\r\nimport { EnemyCharacter } from '../EnemyCharacter'\r\nimport { PLAYER_PARTY_ID } from '../../objects/Party'\r\n\r\nexport interface CombatPartyPropsT {\r\n  party: ProcessedPartyT\r\n}\r\nexport const CombatParty = (props: CombatPartyPropsT) => {\r\n  const { party } = props\r\n  const {\r\n    activeCharacter,\r\n    selectedSkill,\r\n    onTargetsSelect,\r\n    next,\r\n  } = useCombatContext()\r\n  return (\r\n    <FlexContainer $direction='column'>\r\n      <FlexContainer\r\n        style={{\r\n          justifyContent: 'space-around',\r\n          cursor: selectedSkill?.targetType === 'group' ? 'pointer' : 'default',\r\n        }}\r\n        onClick={() => {\r\n          if (selectedSkill && selectedSkill.targetType === 'group') {\r\n            onTargetsSelect(party)\r\n          }\r\n        }}\r\n      >\r\n        {party.characters.map((c) => (\r\n          <div key={c.id}>\r\n            <EnemyCharacter activeCharacter={activeCharacter} character={c} />\r\n            {selectedSkill &&\r\n              selectedSkill.targetType === 'single' &&\r\n              !c.dead &&\r\n              activeCharacter.partyId === PLAYER_PARTY_ID && (\r\n                <FlexContainer\r\n                  style={{ justifyContent: 'center', marginTop: -13 }}\r\n                >\r\n                  <div style={{ boxShadow: '0px 2px 5px black' }}>\r\n                    <ConfirmButton onClick={() => next(c)} $direction='down'>\r\n                      Attack\r\n                    </ConfirmButton>\r\n                  </div>\r\n                </FlexContainer>\r\n              )}\r\n          </div>\r\n        ))}\r\n      </FlexContainer>\r\n      {selectedSkill && selectedSkill.targetType === 'group' && (\r\n        <FlexContainer style={{ justifyContent: 'center' }}>\r\n          <div style={{ boxShadow: '0px 2px 5px black' }}>\r\n            <ConfirmButton onClick={() => next(party)}>\r\n              Attack Group\r\n            </ConfirmButton>\r\n          </div>\r\n        </FlexContainer>\r\n      )}\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport {\r\n  CombatQueueT,\r\n  getFirst,\r\n  getSortedIds,\r\n  getMax,\r\n} from '../../types/CombatQueue'\r\nimport { ProcessedCharacterT } from '../../types'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\nimport { Button } from '../../elements/button'\r\nimport { useHistory } from 'react-router'\r\n\r\nconst size = 40\r\nexport interface CombatQueuePropsT {\r\n  queue: CombatQueueT\r\n  characters: ProcessedCharacterT[]\r\n}\r\nexport const CombatQueue = (props: CombatQueuePropsT) => {\r\n  const { queue, characters } = props\r\n  const history = useHistory()\r\n  const first = characters.find(\r\n    (c) => c.id === getFirst(queue),\r\n  ) as ProcessedCharacterT\r\n  const sortedIds = getSortedIds(queue)\r\n  const bigList = [\r\n    ...sortedIds,\r\n    ...sortedIds,\r\n    ...sortedIds,\r\n    ...sortedIds,\r\n    ...sortedIds,\r\n    ...sortedIds,\r\n  ]\r\n  const count = Math.floor((800 - 52) / size)\r\n  const [f, ...list] = Array(count)\r\n    .fill(null)\r\n    .map((_, i) => bigList[i])\r\n    .map((id) => characters.find((c) => c.id === id))\r\n    .filter((c) => c !== undefined)\r\n  const max = getMax(queue)\r\n  const min = 50\r\n  const widthCoef = max > min ? 100 / max : 100 / min\r\n  return (\r\n    <FlexContainer $direction='column'>\r\n      <FlexContainer\r\n        style={{\r\n          justifyContent: 'center',\r\n          background: '#111',\r\n          height: 52,\r\n          borderBottom: '2px solid rgba(255,255,255,0.3)',\r\n          boxShadow: '1px 1px 1px black',\r\n        }}\r\n      >\r\n        <FlexContainer $full>\r\n          <Button\r\n            style={{ margin: 8 }}\r\n            onClick={() => history.push('/JSFTK_combat/party')}\r\n          >\r\n            Edit Party\r\n          </Button>\r\n        </FlexContainer>\r\n        <FlexContainer\r\n          style={{\r\n            width: 800,\r\n            flexDirection: 'row-reverse',\r\n            boxShadow: '0px 0px 3px black',\r\n            borderLeft: '1px solid rgba(255,255,255,0.3)',\r\n            background: '#222',\r\n          }}\r\n        >\r\n          <FlexContainer>\r\n            <img\r\n              alt='profile'\r\n              height='64'\r\n              width='64'\r\n              src={`https://picsum.photos/seed/${first.name}/115/115`}\r\n              style={{\r\n                height: 64,\r\n                width: 64,\r\n                border: '2px solid rgba(255,255,255,0.8)',\r\n                borderTop: 'none',\r\n                boxShadow: '1px 1px 1px black',\r\n                zIndex: 2,\r\n              }}\r\n            />\r\n          </FlexContainer>\r\n          <FlexContainer $full $direction='column'>\r\n            <FullContainer />\r\n            <FlexContainer $full style={{ position: 'relative' }}>\r\n              {characters\r\n                .filter((c) => c.id !== first.id && !c.dead)\r\n                .map((c, i) => (\r\n                  <div\r\n                    key={`${c?.id}-${i}`}\r\n                    style={{\r\n                      height: size - 10,\r\n                      width: size - 7,\r\n                      position: 'absolute',\r\n                      bottom: '0px',\r\n                      right: `calc(${queue[c.id] * widthCoef}% - ${\r\n                        size - 6\r\n                      }px)`,\r\n                      transition: 'all 0.3s',\r\n                    }}\r\n                  >\r\n                    <img\r\n                      alt={`${queue[c?.id || '']}`}\r\n                      height={size}\r\n                      width={size}\r\n                      src={`https://picsum.photos/seed/${c?.name}/115/115`}\r\n                      style={{\r\n                        height: size - 10,\r\n                        width: size - 7,\r\n                        border: '1px solid rgba(255,255,255,0.5)',\r\n                        borderBottom: 'none',\r\n                      }}\r\n                    />\r\n                  </div>\r\n                ))}\r\n            </FlexContainer>\r\n          </FlexContainer>\r\n        </FlexContainer>\r\n        <FullContainer />\r\n      </FlexContainer>\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React, { useRef, useEffect } from 'react'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { useCombatLogContext } from '../../contexts/CombatLogContext'\r\n\r\nexport const CombatLog = () => {\r\n  const { combatLog } = useCombatLogContext()\r\n  const scrollRef = useRef<HTMLDivElement>(null)\r\n  useEffect(() => {\r\n    if (scrollRef.current) {\r\n      scrollRef.current.scrollIntoView({ behavior: 'smooth' })\r\n    }\r\n  }, [combatLog])\r\n  return (\r\n    <FlexContainer\r\n      $direction='column'\r\n      style={{\r\n        padding: 8,\r\n        minWidth: 300,\r\n        height: 300,\r\n        overflow: 'auto',\r\n        background: 'rgba(0,0,0,0.7)',\r\n        fontSize: 12,\r\n        color: 'rgba(255,255,255,0.8)',\r\n      }}\r\n    >\r\n      {combatLog.map((line, i) => (\r\n        <span key={i}>{line}</span>\r\n      ))}\r\n      <div ref={scrollRef} />\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useCombatContext } from '../contexts/CombatContext'\r\nimport { BoxContainer } from '../elements/box'\r\nimport { FlexContainer, FullContainer } from '../elements/flex'\r\nimport { useCombatLogContext } from '../contexts/CombatLogContext'\r\nimport { CombatPlayerParty } from '../components/CombatPlayerParty'\r\nimport { RoundResultRenderer } from '../components/RoundResultRenderer'\r\nimport { CombatActions } from '../components/CombatActions'\r\nimport { CombatParty } from '../components/CombatParty'\r\nimport { useModalContext } from '../contexts/ModalContext'\r\nimport { CombatQueue } from '../components/CombatQueue'\r\nimport ForestBg from '../assets/img/flat-forestred.jpg'\r\nimport { CombatLog } from '../components/CombatLog'\r\n\r\nexport const Combat = () => {\r\n  const {\r\n    party,\r\n    enemyParty,\r\n    activeCharacter,\r\n    characters,\r\n    queue,\r\n    isDone,\r\n    isRunning,\r\n    isRenderingResult,\r\n    start,\r\n  } = useCombatContext()\r\n  const { open, close } = useModalContext()\r\n  const { combatLog } = useCombatLogContext()\r\n  useEffect(() => {\r\n    if (!isRunning) {\r\n      open(\r\n        <div style={{ textAlign: 'center' }}>\r\n          <h1>Combat Start!</h1>\r\n        </div>,\r\n      )\r\n      setTimeout(() => {\r\n        close()\r\n        start()\r\n      }, 500)\r\n    }\r\n  }, [])\r\n  useEffect(() => {\r\n    if (isDone) {\r\n      open(\r\n        <div style={{ textAlign: 'center' }}>\r\n          <h4>Refresh to do combat again</h4>\r\n        </div>,\r\n      )\r\n    }\r\n  }, [isDone])\r\n  if (!isRunning) return null\r\n  if (!activeCharacter) return <span>refresh to do combat again</span>\r\n\r\n  return (\r\n    <FlexContainer\r\n      style={{\r\n        height: '100vh',\r\n        background: `url(${ForestBg}) center center fixed no-repeat`,\r\n        backgroundSize: 'cover',\r\n      }}\r\n    >\r\n      <FlexContainer $full $direction='column'>\r\n        <CombatQueue queue={queue} characters={characters} />\r\n        <FlexContainer\r\n          $direction='column'\r\n          $full\r\n          style={{ padding: '30px 10px' }}\r\n        >\r\n          <FlexContainer $direction='column' $full>\r\n            <CombatParty party={enemyParty} />\r\n          </FlexContainer>\r\n          <FlexContainer $full>\r\n            <FullContainer />\r\n            <FlexContainer $direction='column'>\r\n              {!isRenderingResult && <CombatActions />}\r\n              <RoundResultRenderer isModal={false} />\r\n            </FlexContainer>\r\n            <FlexContainer $full style={{ justifyContent: 'flex-end' }}>\r\n              <CombatLog />\r\n            </FlexContainer>\r\n          </FlexContainer>\r\n          <FlexContainer\r\n            $direction='column'\r\n            $full\r\n            style={{ justifyContent: 'flex-end' }}\r\n          >\r\n            <CombatPlayerParty party={party} />\r\n          </FlexContainer>\r\n        </FlexContainer>\r\n      </FlexContainer>\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Route } from 'react-router-dom'\r\n\r\nexport const makeRoute = (path: string, Component: React.FC) => (\r\n  <Route path={`/JSFTK_combat${path}`}>\r\n    <Component />\r\n  </Route>\r\n)\r\n","import React from 'react'\r\nimport { ProcessedPartyT, ProcessedCharacterT } from '../../types'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { PartyCharacter } from '../PartyCharacter'\r\n\r\nexport interface PartyCharactersProps {\r\n  party: ProcessedPartyT\r\n  activeCharacter: ProcessedCharacterT\r\n  onCharacterClick: (character: ProcessedCharacterT) => void\r\n}\r\nexport const PartyCharacters = (props: PartyCharactersProps) => {\r\n  const { party, activeCharacter, onCharacterClick } = props\r\n\r\n  return (\r\n    <FlexContainer $direction='column'>\r\n      <FlexContainer\r\n        style={{\r\n          justifyContent: 'space-around',\r\n          alignItems: 'flex-end',\r\n        }}\r\n      >\r\n        {party.characters.map((c) => (\r\n          <div key={c.id}>\r\n            <PartyCharacter\r\n              hoverable={true}\r\n              activeCharacter={activeCharacter}\r\n              character={c}\r\n              onClick={() => onCharacterClick(c)}\r\n            />\r\n          </div>\r\n        ))}\r\n      </FlexContainer>\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { StatsT } from '../../types'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport {\r\n  DEFENSE_BONUS_KEYS,\r\n  DAMAGE_BONUS_KEYS,\r\n  STAT_KEY_LABELS,\r\n  STAT_BONUS_KEYS,\r\n} from '../../objects'\r\n\r\nexport interface StatsPreviewPropsT {\r\n  stats: StatsT\r\n}\r\n\r\nconst defense_key_colors: any = {\r\n  armor: 'lightblue',\r\n  resistance: 'plum',\r\n}\r\n\r\nexport const StatsPreview = (props: StatsPreviewPropsT) => {\r\n  const { stats } = props\r\n  return (\r\n    <FlexContainer $direction='column' style={{ fontSize: 14 }}>\r\n      {DEFENSE_BONUS_KEYS.map(\r\n        (key) =>\r\n          stats[key] > 0 && (\r\n            <span\r\n              style={{\r\n                textTransform: 'capitalize',\r\n                color: defense_key_colors[key],\r\n              }}\r\n            >\r\n              +{stats[key]}\r\n              {STAT_KEY_LABELS[key]}\r\n            </span>\r\n          ),\r\n      )}\r\n      {DAMAGE_BONUS_KEYS.map(\r\n        (key) =>\r\n          stats[key] > 0 && (\r\n            <span style={{ textTransform: 'capitalize' }}>\r\n              +{stats[key]}\r\n              {STAT_KEY_LABELS[key]}\r\n            </span>\r\n          ),\r\n      )}\r\n      {STAT_BONUS_KEYS.map(\r\n        (key) =>\r\n          stats[key] > 0 && (\r\n            <span\r\n              style={{\r\n                textTransform: 'capitalize',\r\n                color: 'lightgreen',\r\n              }}\r\n            >\r\n              +{stats[key]}\r\n              {STAT_KEY_LABELS[key]}\r\n            </span>\r\n          ),\r\n      )}\r\n      {STAT_BONUS_KEYS.map(\r\n        (key) =>\r\n          stats[key] < 0 && (\r\n            <span\r\n              style={{\r\n                textTransform: 'capitalize',\r\n                color: 'lightcoral',\r\n              }}\r\n            >\r\n              {stats[key]}\r\n              {STAT_KEY_LABELS[key]}\r\n            </span>\r\n          ),\r\n      )}\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import { ItemRarityT } from '../types'\r\n\r\nexport const ITEM_RARITY_COLORS: Record<ItemRarityT, string> = {\r\n  common: 'rgba(255,255,255,0.8)',\r\n  uncommon: 'rgba(173,216,230,1)',\r\n  rare: 'rgba(221,160,221,1)',\r\n  mythic: 'rgb(255,160,122,1)',\r\n}\r\n","import React from 'react'\r\nimport Color from 'color'\r\nimport { ProcessedWeaponT } from '../../types'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { SkillCheck } from '../SkillChecks'\r\nimport { combineTraits } from '../../functions'\r\nimport { StatsPreview } from '../StatsPreview'\r\nimport { ITEM_RARITY_COLORS } from '../../objects/Item'\r\n\r\nexport const getDamageColor = (weapon: ProcessedWeaponT) => {\r\n  if (weapon.damage.type === 'physical') return 'lightblue'\r\n  if (weapon.damage.type === 'magic') return 'plum'\r\n  return 'white'\r\n}\r\n\r\nexport interface WeaponPreviewPropsT {\r\n  weapon: ProcessedWeaponT\r\n}\r\nexport const WeaponPreview = (props: WeaponPreviewPropsT) => {\r\n  const { weapon } = props\r\n  const basicAttack = weapon.skills.find((s) => s.isBasicAttack)\r\n  const combinedTrait = combineTraits(...weapon.traits)\r\n  const rarityColor = ITEM_RARITY_COLORS[weapon.rarity]\r\n  const from = Color(rarityColor).darken(0.5).rgb().toString()\r\n  const to = Color(rarityColor).darken(0.7).rgb().toString()\r\n  const gradient = `linear-gradient(180deg, ${from} 0%, ${to} 100%)`\r\n  console.log(combinedTrait.stats)\r\n  return (\r\n    <BoxContainer style={{ width: 240 }} substyle={{ background: gradient }}>\r\n      <FlexContainer $direction='column'>\r\n        {basicAttack && (\r\n          <FlexContainer style={{ justifyContent: 'center', marginBottom: 10 }}>\r\n            {basicAttack.rolls.map((roll) => (\r\n              <SkillCheck\r\n                check={{ label: roll.key || 'strength', result: true }}\r\n                size={18}\r\n                padding={4}\r\n              />\r\n            ))}\r\n          </FlexContainer>\r\n        )}\r\n        <FlexContainer\r\n          $direction='column'\r\n          style={{ margin: '8px 0', textShadow: '1px 1px 2px rgba(0,0,0,0.8)' }}\r\n        >\r\n          <span style={{ fontWeight: 600 }}>{weapon.name}</span>\r\n          <span style={{ color: 'rgba(255,255,255,0.6)' }}>\r\n            {weapon.rarity}\r\n          </span>\r\n        </FlexContainer>\r\n        <BoxContainer substyle={{ background: 'rgba(0,0,0,0.7)' }}>\r\n          <FlexContainer $direction='column'>\r\n            <FlexContainer style={{ lineHeight: '24px', marginBottom: 4 }}>\r\n              <span\r\n                style={{\r\n                  color: getDamageColor(weapon),\r\n                  fontWeight: 'bolder',\r\n                  marginRight: 8,\r\n                  fontSize: 24,\r\n                }}\r\n              >\r\n                {weapon.damage.damage}\r\n              </span>\r\n              <span style={{ textTransform: 'capitalize' }}>\r\n                {weapon.damage.type} Damage\r\n              </span>\r\n            </FlexContainer>\r\n            <span style={{ color: 'plum', marginBottom: 8 }}>\r\n              {weapon.skills.map(\r\n                (skill, i) => `${i > 0 ? ', ' : ''}${skill.name}`,\r\n              )}\r\n            </span>\r\n            <StatsPreview stats={combinedTrait.stats} />\r\n          </FlexContainer>\r\n        </BoxContainer>\r\n      </FlexContainer>\r\n    </BoxContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Color from 'color'\r\nimport { ArmorT } from '../../types'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { combineTraits } from '../../functions'\r\nimport { StatsPreview } from '../StatsPreview'\r\nimport { Icon } from '../Icon'\r\nimport { ARMOR_TYPE_ICONS } from '../../icons/maps'\r\nimport { ITEM_RARITY_COLORS } from '../../objects/Item'\r\n\r\nexport interface ArmorPreviewPropsT {\r\n  armor: ArmorT\r\n}\r\nexport const ArmorPreview = (props: ArmorPreviewPropsT) => {\r\n  const { armor } = props\r\n  const combinedTrait = combineTraits(...armor.traits)\r\n  const rarityColor = ITEM_RARITY_COLORS[armor.rarity]\r\n  const from = Color(rarityColor).darken(0.5).rgb().toString()\r\n  const to = Color(rarityColor).darken(0.7).rgb().toString()\r\n  const gradient = `linear-gradient(180deg, ${from} 0%, ${to} 100%)`\r\n  return (\r\n    <BoxContainer style={{ width: 200 }} substyle={{ background: gradient }}>\r\n      <FlexContainer $direction='column'>\r\n        <FlexContainer style={{ marginBottom: 8 }}>\r\n          <Icon\r\n            src={ARMOR_TYPE_ICONS[armor.type]}\r\n            size={32}\r\n            style={{ marginRight: 10 }}\r\n            shadow\r\n          />\r\n          <FlexContainer\r\n            $direction='column'\r\n            style={{ textShadow: '1px 1px 2px rgba(0,0,0,0.8)' }}\r\n          >\r\n            <span style={{ fontWeight: 600 }}>{armor.name}</span>\r\n            <span style={{ color: 'rgba(255,255,255,0.6)' }}>\r\n              {armor.rarity}\r\n            </span>\r\n          </FlexContainer>\r\n        </FlexContainer>\r\n        <BoxContainer substyle={{ background: 'rgba(0,0,0,0.7)' }}>\r\n          <FlexContainer $direction='column'>\r\n            {armor.skills.length > 0 && (\r\n              <span style={{ color: 'plum', marginBottom: 8 }}>\r\n                {armor.skills.map(\r\n                  (skill, i) => `${i > 0 ? ', ' : ''}${skill.name}`,\r\n                )}\r\n              </span>\r\n            )}\r\n            <StatsPreview stats={combinedTrait.stats} />\r\n          </FlexContainer>\r\n        </BoxContainer>\r\n      </FlexContainer>\r\n    </BoxContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ProcessedCharacterT, CharacterClassT } from '../../types'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { usePartyContext } from '../../contexts/PartyContext'\r\nimport { makeCharacter } from '../../functions'\r\nimport { WeaponPreview } from '../WeaponPreview'\r\nimport { ArmorPreview } from '../ArmorPreview'\r\n\r\nexport interface PartyActiveCharacterPropsT {\r\n  character: ProcessedCharacterT\r\n}\r\n\r\nexport const PartyActiveCharacter = (props: PartyActiveCharacterPropsT) => {\r\n  const { character } = props\r\n  const { upsertCharacter } = usePartyContext()\r\n  const { weapon } = character\r\n  console.log(character)\r\n  return (\r\n    <FlexContainer $full>\r\n      <FullContainer />\r\n      <FlexContainer $direction='column'>\r\n        <FullContainer />\r\n        <BoxContainer substyle={{ background: '#111' }}>\r\n          <FlexContainer>\r\n            <FlexContainer $direction='column' style={{ paddingRight: 10 }}>\r\n              <h1 style={{ margin: 0 }}>{character.name}</h1>\r\n              <select\r\n                value={character.class}\r\n                onChange={(e) => {\r\n                  upsertCharacter({\r\n                    ...makeCharacter(e.target.value as CharacterClassT),\r\n                    id: character.id,\r\n                    name: character.name,\r\n                  })\r\n                }}\r\n              >\r\n                <option value='blacksmith'>blacksmith</option>\r\n                <option value='hunter'>hunter</option>\r\n                <option value='scholar'>scholar</option>\r\n                <option value='bard'>bard</option>\r\n              </select>\r\n              <span>Level {character.level}</span>\r\n              <span>\r\n                Health {character.health - character.stats.healthOffset}/\r\n                {character.health}\r\n              </span>\r\n            </FlexContainer>\r\n            <div>\r\n              <WeaponPreview weapon={weapon} />\r\n            </div>\r\n            <FlexContainer $direction='column'>\r\n              {character.armor.map((armor) => (\r\n                <ArmorPreview armor={armor} />\r\n              ))}\r\n            </FlexContainer>\r\n          </FlexContainer>\r\n        </BoxContainer>\r\n        <FullContainer />\r\n      </FlexContainer>\r\n      <FullContainer />\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { usePartyContext } from '../contexts/PartyContext'\r\nimport { FlexContainer, FullContainer } from '../elements/flex'\r\nimport { PartyCharacters } from '../components/PartyCharacters'\r\nimport { BoxContainer } from '../elements/box'\r\nimport { RedButton } from '../elements/button'\r\nimport { useHistory } from 'react-router'\r\nimport { PartyActiveCharacter } from '../components/PartyActiveCharacter'\r\n\r\nexport const Party = () => {\r\n  const { party, activeCharacter, setActiveCharacter } = usePartyContext()\r\n  const history = useHistory()\r\n  const enterCombat = () => {\r\n    history.push('/JSFTK_combat/combat')\r\n  }\r\n  return (\r\n    <FlexContainer\r\n      $full\r\n      $direction='column'\r\n      style={{ height: '100%', overflow: 'hidden' }}\r\n    >\r\n      <FlexContainer>\r\n        <BoxContainer\r\n          style={{ flex: 1 }}\r\n          substyle={{ display: 'flex', background: '#111' }}\r\n        >\r\n          <RedButton onClick={enterCombat}>Enter Combat</RedButton>\r\n          <FullContainer />\r\n        </BoxContainer>\r\n      </FlexContainer>\r\n      <FlexContainer $full style={{ padding: 16 }}>\r\n        <BoxContainer style={{ flex: 1 }}></BoxContainer>\r\n        <PartyActiveCharacter character={activeCharacter} />\r\n      </FlexContainer>\r\n      <div style={{ marginBottom: 30 }}>\r\n        <PartyCharacters\r\n          party={party}\r\n          activeCharacter={activeCharacter}\r\n          onCharacterClick={(c) => setActiveCharacter(c)}\r\n        />\r\n      </div>\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport { CombatContextProvider } from './contexts/CombatContext'\nimport { PartyT } from './types'\nimport { makeParty } from './functions'\nimport { Combat } from './domain/Combat'\nimport { CombatLogContextProvider } from './contexts/CombatLogContext'\nimport { ModalContextProvider } from './contexts/ModalContext'\nimport { makeRoute } from './routes'\nimport { Party } from './domain/Party'\n\nconst CombatDomain = () => {\n  const [rawEnemyParty, setRawEnemyParty] = useState<PartyT>(makeParty(3))\n  return (\n    <CombatContextProvider\n      enemyParty={rawEnemyParty}\n      setEnemyParty={setRawEnemyParty}\n      onRequestNewParty={() => setRawEnemyParty(makeParty(3))}\n    >\n      <CombatLogContextProvider>\n        <ModalContextProvider>\n          <Combat />\n        </ModalContextProvider>\n      </CombatLogContextProvider>\n    </CombatContextProvider>\n  )\n}\n\nconst PartyDomain = () => {\n  return <Party />\n}\n\nexport const App = () => {\n  return (\n    <Switch>\n      {makeRoute('/party', PartyDomain)}\n      {makeRoute('/combat', CombatDomain)}\n      {makeRoute('/', CombatDomain)}\n    </Switch>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\nimport './index.css'\n\nimport { Provider as StyletronProvider, DebugEngine } from 'styletron-react'\nimport { Client as Styletron } from 'styletron-engine-atomic'\nimport { Provider as ReduxProvider } from 'react-redux'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { makeStore } from './state'\nimport { PartyContextProvider } from './contexts/PartyContext'\n\nconst debug = process.env.NODE_ENV === 'production' ? void 0 : new DebugEngine()\nconst engine: Styletron = new Styletron()\nconst store = makeStore()\n\nReactDOM.render(\n  <React.StrictMode>\n    <ReduxProvider store={store}>\n      <StyletronProvider value={engine} debug={debug} debugAfterHydration>\n        <PartyContextProvider>\n          <Router>\n            <App />\n          </Router>\n        </PartyContextProvider>\n      </StyletronProvider>\n    </ReduxProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createStore, combineReducers, compose, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport party from './party'\r\n\r\nexport const makeStore = () =>\r\n  createStore(combineReducers({ party }), compose(applyMiddleware(thunk)))\r\n"],"sourceRoot":""}