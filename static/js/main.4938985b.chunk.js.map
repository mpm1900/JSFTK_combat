{"version":3,"sources":["objects/Stats.ts","functions/Entity.ts","objects/Status.ts","objects/Traits.ts","functions/Stats.ts","functions/Traits.ts","functions/Roll.ts","util/getRandom.ts","util/noneg.ts","functions/Party.ts","functions/Skill.ts","objects/skills/smash.ts","objects/skills/shockwave.ts","objects/weapons/blacksmiths_hammer.ts","objects/skills/shot.ts","objects/skills/snipe_shot.ts","objects/weapons/hunting_bow.ts","objects/skills/surge.ts","objects/skills/area_blast.ts","objects/Weapon.ts","objects/weapons/scholars_book.ts","functions/Character.ts","functions/Weapon.ts","state/party/index.ts","state/util.ts","hooks/useActions.ts","contexts/PartyContext/index.tsx","contexts/CombatContext/index.tsx","components/Hover/index.tsx","elements/box.tsx","elements/flex.ts","elements/monospace.tsx","contexts/CombatLogContext/util.tsx","contexts/CombatLogContext/index.tsx","components/Tooltip/index.tsx","components/Gauge/index.tsx","components/PartyCharacter/index.tsx","contexts/ModalContext/reducer.ts","contexts/ModalContext/index.tsx","components/RoundResultRenderer/index.tsx","elements/button.tsx","components/CombatActions/index.tsx","components/CombatParty/index.tsx","domain/Combat.tsx","App.tsx","serviceWorker.ts","index.tsx","state/index.ts"],"names":["ZERO_STATS","vigor","strength","intelligence","perception","talent","agility","luck","armor","resistance","evasion","healthOffset","criticalChance","damageModifier","CLASS_STARTING_STATS","blacksmith","hunter","scholar","bard","makeEntity","name","id","v4","STATUS_EFFECTS","bleeding","type","canStack","duration","traits","commitChance","committedTraits","damage","stats","burning","frozen","poisoned","ZERO_TRAIT","combineStats","reduce","p","c","combineTraits","getTraitsFromObjects","parents","makeCheck","key","offset","resolveCheck","character","check","statValue","getCharacterStat","roll","DiceRoll","input","result","total","averageTotal","maxTotal","minTotal","output","getChecksProbability","checks","map","getRandom","items","Math","floor","random","length","noneg","value","checkForProcessedParty","party","processed","Error","characters","forEach","checkForProcessedCharacter","makeParty","characterCount","isParty","Array","fill","_","i","cClass","makeCharacter","findCharacterInParty","find","updateCharacter","characterId","updater","processParty","processCharacter","partyId","resolveSkillTarget","target","makeSkillTarget","isCharacter","undefined","e","getSkillDamageRange","skill","source","targets","min","max","rawDamage","weapon","damageResistances","getDamageResistance","round","getSkillDamage","console","log","getSkillResults","sourceResult","criticalHitResult","accuracyResult","accuracy","rollResults","rolls","passedCount","filter","r","perfect","results","every","didAllPass","accuracySuccess","criticalSuccess","pierce","perfectPierce","splashDamage","perfectSplash","addedStatus","perfectStatus","getSourceSkillResult","dodgeResult","dodgeSuccess","blockedDamage","totalDamage","getTargetSkillResult","SMASH","targetType","SHOCKWAVE","BLACKSMITHS_HAMMER","rarity","hands","skills","SHOT","SNIPE_SHOT","HUNTING_BOW","SURGE","AREA_BLAST","CLASS_STARTING_WEAPONS","getStatusEffects","status","getSkills","getTraits","combinedTrait","processWeapon","statusEffects","startingHealth","class","health","level","dead","characterClass","damageType","actionCreators","payload","actions","updateParty","dispatch","upsertCharacter","deleteCharacter","makeReducer","core","initialState","state","action","coreFn","usePartyActions","deps","useDispatch","useMemo","bindActionCreators","useActions","defaultContextValue","rawParty","findCharacter","findRawCharacter","PartyContext","React","createContext","PartyContextProvider","props","children","useSelector","Provider","defaultValue","enemyParty","activeCharacter","queue","selectedSkill","selectedTargets","roundResults","activeRound","isRunning","isDone","onSkillSelect","onTargetsSelect","start","next","commit","CombatContext","useCombatContext","useContext","CombatContextProvider","rawEnemyParty","setEnemyParty","resultCommitter","localUpdate","sourceParty","targetParty","splashDamageResistance","commitSkillResults","useState","setIsRunning","setIsDone","sort","a","b","setQueue","setRoundResults","setActiveRound","selectedTarget","setSelectedTarget","setSelectedSkill","useEffect","sourcePartyId","getTargetsOptions","execEnemyTurn","q","active","rest","alert","parties","Hover","delay","internalHovering","setInternalHovering","isHovering","setIsHovering","guid","setGuid","useLayoutEffect","setTimeout","onMouseEnter","preventDefault","stopPropagation","onMouseLeave","BoxContainer","style","substyle","tag","Element","border","display","boxSizing","background","padding","color","flex","boxShadow","FlexContainer","styled","flexDirection","$direction","$full","FullContainer","Monospace","fontFamily","fontWeight","Monodiv","Span","text","NameSpanBuilder","isUserParty","isEnemyParty","CombatLogContext","combatLog","CombatLogContextProvider","setCombatLog","deadLog","setDeadLog","NameSpan","line","dLog","latestRounds","baseRound","subTarget","Tooltip","direction","tagName","arrow","HoverToolTip","isOpen","Gauge","height","percentage","content","position","left","maxWidth","minWidth","textShadow","backgroundColor","alignItems","justifyContent","transition","lineHeight","right","top","fontSize","overflow","ResourceE","textAlign","Wrapper","$selected","$active","$hoverable","margin","$isHovering","PartyCharacter","hoverable","selected","onClick","opacity","borderWidth","cursor","width","borderRight","alt","src","paddingLeft","borderBottom","contents","callback","blocking","OPEN","CLOSE","reducer","coreFunction","ModalContext","open","close","setBlocking","setPayload","setContents","setCallback","setStyle","useModalContext","getContextValue","ModalContextProvider","reducerValue","useReducer","context","onRequestClose","bottom","borderColor","overlay","RoundResultRenderer","RoundResult","rounds","label","currentIndex","setCurrentIndex","updateRoundResult","index","marginRight","Button","outline","ConfirmButton","withStyle","borderTop","CombatActions","perfectChance","accuracyChance","marginTop","CombatParty","t","Combat","overflowY","App","setRawEnemyParty","Boolean","window","location","hostname","match","engine","Styletron","store","createStore","combineReducers","compose","applyMiddleware","thunk","ReactDOM","render","StrictMode","debug","debugAfterHydration","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4938985b.chunk.js","sourcesContent":["import { StatsT, CharacterClassT } from '../types'\r\n\r\nexport const ZERO_STATS: StatsT = {\r\n  vigor: 0,\r\n  strength: 0,\r\n  intelligence: 0,\r\n  perception: 0,\r\n  talent: 0,\r\n\r\n  agility: 0,\r\n  luck: 0,\r\n  armor: 0,\r\n  resistance: 0,\r\n  evasion: 0,\r\n\r\n  healthOffset: 0,\r\n  criticalChance: 0,\r\n  damageModifier: 0,\r\n}\r\n\r\nexport const CLASS_STARTING_STATS: Record<CharacterClassT, StatsT> = {\r\n  blacksmith: {\r\n    strength: 76,\r\n    vigor: 80,\r\n    intelligence: 40,\r\n    perception: 52,\r\n    talent: 72,\r\n    agility: 56,\r\n    luck: 50,\r\n    armor: 2,\r\n    resistance: 0,\r\n    evasion: 7,\r\n    healthOffset: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n  },\r\n  hunter: {\r\n    strength: 52,\r\n    vigor: 66,\r\n    intelligence: 46,\r\n    perception: 78,\r\n    talent: 64,\r\n    agility: 78,\r\n    luck: 50,\r\n    armor: 1,\r\n    resistance: 0,\r\n    evasion: 20,\r\n    healthOffset: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n  },\r\n  scholar: {\r\n    strength: 42,\r\n    vigor: 60,\r\n    intelligence: 78,\r\n    perception: 66,\r\n    talent: 70,\r\n    agility: 70,\r\n    luck: 50,\r\n    armor: 0,\r\n    resistance: 1,\r\n    evasion: 13,\r\n    healthOffset: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n  },\r\n  bard: {\r\n    strength: 44,\r\n    vigor: 50,\r\n    intelligence: 70,\r\n    perception: 68,\r\n    talent: 78,\r\n    agility: 68,\r\n    luck: 50,\r\n    armor: 0,\r\n    resistance: 1,\r\n    evasion: 11,\r\n    healthOffset: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n  },\r\n}\r\n","import { v4 } from 'uuid'\r\n\r\nexport const makeEntity = (name: string = '') => ({\r\n  id: v4(),\r\n  name,\r\n})\r\n","import { StatusTypeT, StatusT } from '../types'\r\nimport { makeEntity } from '../functions/Entity'\r\nimport { ZERO_STATS } from './Stats'\r\n\r\nconst STATUS_DURATION = 5\r\nexport const STATUS_EFFECTS: Record<StatusTypeT, StatusT> = {\r\n  bleeding: {\r\n    ...makeEntity('Bleeding'),\r\n    type: 'bleeding',\r\n    canStack: false,\r\n    duration: STATUS_DURATION,\r\n    traits: [],\r\n    commitChance: 50,\r\n    committedTraits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          healthOffset: -10,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  burning: {\r\n    ...makeEntity('Burning'),\r\n    type: 'burning',\r\n    canStack: false,\r\n    duration: STATUS_DURATION,\r\n    traits: [],\r\n    commitChance: 100,\r\n    committedTraits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          healthOffset: -10,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  frozen: {\r\n    ...makeEntity('Frozen'),\r\n    type: 'frozen',\r\n    canStack: false,\r\n    duration: STATUS_DURATION,\r\n    traits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          damageModifier: 0.25,\r\n        },\r\n      },\r\n    ],\r\n    commitChance: 0,\r\n    committedTraits: [],\r\n  },\r\n  poisoned: {\r\n    ...makeEntity('Poisoned'),\r\n    type: 'poisoned',\r\n    canStack: true,\r\n    duration: STATUS_DURATION,\r\n    traits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          strength: -5,\r\n          intelligence: -5,\r\n          perception: -5,\r\n          talent: -5,\r\n        },\r\n      },\r\n    ],\r\n    commitChance: 100,\r\n    committedTraits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          healthOffset: -5,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n}\r\n","import { TraitT } from '../types'\r\nimport { ZERO_STATS } from './Stats'\r\n\r\nexport const ZERO_TRAIT: TraitT = {\r\n  damage: 0,\r\n  duration: -1,\r\n  stats: ZERO_STATS,\r\n}\r\n","import { StatsT } from '../types'\r\nimport { ZERO_STATS } from '../objects'\r\n\r\nexport const combineStats = (...stats: StatsT[]): StatsT => {\r\n  return stats.reduce(\r\n    (p, c) => ({\r\n      vigor: p.strength + c.strength,\r\n      strength: p.strength + c.strength,\r\n      intelligence: p.intelligence + c.intelligence,\r\n      perception: p.perception + c.perception,\r\n      talent: p.talent + c.talent,\r\n      agility: p.agility + c.agility,\r\n      luck: p.luck + c.luck,\r\n      armor: p.armor + c.armor,\r\n      resistance: p.resistance + c.resistance,\r\n      evasion: p.evasion + c.evasion,\r\n      criticalChance: p.criticalChance + c.criticalChance,\r\n      damageModifier: p.damageModifier + c.damageModifier,\r\n      healthOffset: p.healthOffset + c.healthOffset,\r\n    }),\r\n    ZERO_STATS,\r\n  )\r\n}\r\n","import { TraitT, HasTraitsT, HasCommittedTraits } from '../types'\r\nimport { combineStats } from './Stats'\r\nimport { ZERO_TRAIT } from '../objects'\r\n\r\nexport const combineTraits = (...traits: TraitT[]): TraitT => {\r\n  return traits.reduce(\r\n    (p, c) => ({\r\n      damage: p.damage + c.damage,\r\n      stats: combineStats(p.stats, c.stats),\r\n      duration: -1,\r\n    }),\r\n    ZERO_TRAIT,\r\n  )\r\n}\r\n\r\nexport const getTraitsFromObjects = (parents: HasTraitsT[]) => {\r\n  return parents.reduce((p, c) => {\r\n    return [...p, ...c.traits]\r\n  }, [] as TraitT[])\r\n}\r\nexport const getCommittedTraitsFromObjects = (\r\n  parents: HasCommittedTraits[],\r\n) => {\r\n  return parents.reduce((p, c) => {\r\n    return [...p, ...c.committedTraits]\r\n  }, [] as TraitT[])\r\n}\r\n","import { DiceRoll } from 'rpg-dice-roller'\r\nimport { ProcessedCharacterT, CheckResultT, CheckT, StatsT } from '../types'\r\nimport { getCharacterStat } from './Character'\r\n\r\nexport const makeCheck = (key: keyof StatsT, offset?: number): CheckT => ({\r\n  key,\r\n  offset,\r\n})\r\n\r\nexport const resolveCheck = (\r\n  character: ProcessedCharacterT,\r\n  check: CheckT,\r\n): CheckResultT => {\r\n  const statValue = getCharacterStat(character, check)\r\n  const roll = new DiceRoll('1d100')\r\n  return {\r\n    input: check,\r\n    result: roll.total <= statValue,\r\n    total: roll.total,\r\n    averageTotal: roll.averageTotal,\r\n    maxTotal: roll.maxTotal,\r\n    minTotal: roll.minTotal,\r\n    output: roll.output,\r\n  }\r\n}\r\n\r\nexport const getChecksProbability = (\r\n  character: ProcessedCharacterT,\r\n  checks: CheckT[],\r\n): number => {\r\n  const statValues = checks.map((check) => getCharacterStat(character, check))\r\n  const result = statValues.reduce((p, c) => {\r\n    return p * (c / 100)\r\n  }, 1)\r\n  return result\r\n}\r\n\r\nexport const getPassedCount = (results: CheckResultT[]): number =>\r\n  results.filter((r) => r.result).length\r\n\r\nexport const didAllPass = (results: CheckResultT[]): boolean =>\r\n  results.every((r) => r.result)\r\n","export const getRandom = <T>(items: T[]) =>\r\n  items[Math.floor(Math.random() * items.length)]\r\n","export const noneg = (value: number) => (value > 0 ? value : 0)\r\n","import {\r\n  CharacterT,\r\n  PartyT,\r\n  ProcessedPartyT,\r\n  EntityT,\r\n  CharacterClassT,\r\n} from '../types'\r\nimport {\r\n  checkForProcessedCharacter,\r\n  processCharacter,\r\n  makeCharacter,\r\n} from './Character'\r\nimport { makeEntity } from './Entity'\r\nimport { getRandom } from '../util'\r\n\r\nexport const isParty = (e: EntityT) => (e as PartyT).isParty\r\n\r\nexport const checkForProcessedParty = (party: PartyT) => {\r\n  if ((party as ProcessedPartyT).processed) {\r\n    throw new Error('No Processed Parties Allowed')\r\n  }\r\n  party.characters.forEach((character) => {\r\n    checkForProcessedCharacter(character)\r\n  })\r\n}\r\n\r\nexport const makeParty = (characterCount: number = 0): PartyT => {\r\n  return {\r\n    ...makeEntity(),\r\n    isParty: true,\r\n    characters: Array(characterCount)\r\n      .fill(null)\r\n      .map((_, i) => {\r\n        const cClass = getRandom<CharacterClassT>([\r\n          'blacksmith',\r\n          'hunter',\r\n          'scholar',\r\n        ])\r\n        return {\r\n          ...makeCharacter(cClass),\r\n          name: `${cClass} ${i + 1}`,\r\n        }\r\n      }),\r\n  }\r\n}\r\n\r\nexport const findCharacterInParty = <\r\n  T extends PartyT = PartyT,\r\n  R extends CharacterT = CharacterT\r\n>(\r\n  party: T,\r\n  id: string,\r\n): R | undefined => {\r\n  return (party.characters as R[]).find((c) => c.id === id)\r\n}\r\n\r\nexport const updateCharacter = (\r\n  party: PartyT,\r\n  characterId: string,\r\n  updater: (character: CharacterT) => CharacterT,\r\n): PartyT => {\r\n  checkForProcessedParty(party)\r\n  return {\r\n    ...party,\r\n    characters: party.characters.map((c) =>\r\n      c.id === characterId ? updater(c) : c,\r\n    ),\r\n  }\r\n}\r\n\r\nexport const processParty = (party: PartyT): ProcessedPartyT => {\r\n  return {\r\n    ...party,\r\n    processed: true,\r\n    characters: party.characters.map((c) => ({\r\n      ...processCharacter(c),\r\n      partyId: party.id,\r\n    })),\r\n  }\r\n}\r\n","import {\r\n  ProcessedCharacterT,\r\n  SourceSkillResultT,\r\n  HasSkillsT,\r\n  SkillT,\r\n  DamageT,\r\n  TargetSkillResultT,\r\n  CharacterT,\r\n  PartyT,\r\n  SkillTargetT,\r\n  ProcessedPartyT,\r\n  TargetTypeT,\r\n} from '../types'\r\nimport { resolveCheck, getPassedCount, didAllPass } from './Roll'\r\nimport { getDamageResistance, isCharacter, processCharacter } from './Character'\r\nimport { updateCharacter, isParty } from './Party'\r\n\r\nexport const getSkillsFromObjects = (parents: HasSkillsT[]) => {\r\n  return parents.reduce((p, c) => {\r\n    return [...p, ...c.skills]\r\n  }, [] as SkillT[])\r\n}\r\n\r\nexport const resolveSkillTarget = (\r\n  target: SkillTargetT,\r\n): ProcessedCharacterT[] => {\r\n  switch (target.type) {\r\n    case 'single':\r\n      return target.character ? [target.character] : []\r\n    case 'ally':\r\n      return target.character ? [target.character] : []\r\n    case 'self':\r\n      return target.character ? [target.character] : []\r\n    case 'party':\r\n      return target.party?.characters || []\r\n    case 'group':\r\n      return target.party?.characters || []\r\n    default:\r\n      return []\r\n  }\r\n}\r\n\r\nexport const makeSkillTarget = (\r\n  type: TargetTypeT,\r\n  target: ProcessedCharacterT | ProcessedPartyT,\r\n): SkillTargetT => {\r\n  return {\r\n    type,\r\n    character: isCharacter(target)\r\n      ? (target as ProcessedCharacterT)\r\n      : undefined,\r\n    party: isParty(target) ? (target as ProcessedPartyT) : undefined,\r\n  }\r\n}\r\n\r\nexport const getSourceSkillResult = (\r\n  source: ProcessedCharacterT,\r\n  skill: SkillT,\r\n): SourceSkillResultT => {\r\n  const criticalHitResult = resolveCheck(source, {\r\n    offset: source.stats.criticalChance,\r\n  })\r\n  const accuracyResult = resolveCheck(source, skill.accuracy)\r\n  const rollResults = skill.rolls.map((check) => resolveCheck(source, check))\r\n  const passedCount = criticalHitResult.result\r\n    ? skill.rolls.length\r\n    : getPassedCount(rollResults)\r\n  const perfect = criticalHitResult.result ? true : didAllPass(rollResults)\r\n  const accuracySuccess =\r\n    criticalHitResult.result || perfect || accuracyResult.result\r\n  const rawDamage: DamageT = {\r\n    damage: accuracySuccess\r\n      ? source.weapon.damage.damage *\r\n        (1 + skill.damageModifier + source.stats.damageModifier)\r\n      : 0,\r\n    type: source.weapon.damage.type,\r\n  }\r\n  return {\r\n    rollResults,\r\n    skill,\r\n    source,\r\n    accuracySuccess,\r\n    criticalSuccess: criticalHitResult.result,\r\n    passedCount,\r\n    perfect,\r\n    rawDamage,\r\n    pierce: (perfect && skill.perfectPierce) || criticalHitResult.result,\r\n    splashDamage:\r\n      skill.perfectSplash && perfect\r\n        ? { type: rawDamage.type, damage: Math.floor(rawDamage.damage / 2) }\r\n        : { type: rawDamage.type, damage: 0 },\r\n    addedStatus: perfect ? skill.perfectStatus : [],\r\n  }\r\n}\r\n\r\nexport const getTargetSkillResult = (\r\n  target: ProcessedCharacterT,\r\n  sourceResult: SourceSkillResultT,\r\n): TargetSkillResultT => {\r\n  if (sourceResult.accuracySuccess) {\r\n    const dodgeResult = resolveCheck(target, { key: 'evasion' })\r\n    const damageResistances = sourceResult.pierce\r\n      ? 0\r\n      : getDamageResistance(target, sourceResult.rawDamage.type)\r\n    return {\r\n      ...sourceResult,\r\n      target,\r\n      dodgeSuccess: sourceResult.criticalSuccess ? false : dodgeResult.result,\r\n      blockedDamage: {\r\n        type: sourceResult.rawDamage.type,\r\n        damage: sourceResult.pierce ? 0 : damageResistances,\r\n      },\r\n      totalDamage: {\r\n        type: sourceResult.rawDamage.type,\r\n        damage: Math.round(sourceResult.rawDamage.damage - damageResistances),\r\n      },\r\n    }\r\n  } else {\r\n    return {\r\n      ...sourceResult,\r\n      target,\r\n      dodgeSuccess: false,\r\n      blockedDamage: sourceResult.rawDamage,\r\n      totalDamage: sourceResult.rawDamage,\r\n    }\r\n  }\r\n}\r\n\r\nexport const getSkillDamage = (\r\n  skill: SkillT,\r\n  source: ProcessedCharacterT,\r\n  target: ProcessedCharacterT,\r\n): DamageT => {\r\n  const rawDamage: DamageT = {\r\n    type: source.weapon.damage.type,\r\n    damage:\r\n      source.weapon.damage.damage *\r\n      (1 + skill.damageModifier + source.stats.damageModifier),\r\n  }\r\n  const damageResistances = getDamageResistance(target, rawDamage.type)\r\n  return {\r\n    type: rawDamage.type,\r\n    damage: Math.round(rawDamage.damage - damageResistances),\r\n  }\r\n}\r\nexport const getSkillDamageRange = (\r\n  skill: SkillT,\r\n  source: ProcessedCharacterT,\r\n  targets: ProcessedCharacterT[],\r\n) => {\r\n  let min: number | undefined = undefined\r\n  let max: number | undefined = undefined\r\n  targets.forEach((target) => {\r\n    const damage = getSkillDamage(skill, source, target).damage\r\n    if (max === undefined || damage > max) max = damage\r\n    if (min === undefined || damage < min) min = damage\r\n  })\r\n  console.log(min, max)\r\n  if (min === max) return `${max || 0}`\r\n  return `${min}-${max}`\r\n}\r\n\r\nexport const getSkillResults = (\r\n  skill: SkillT,\r\n  source: ProcessedCharacterT,\r\n  targets: ProcessedCharacterT[],\r\n): TargetSkillResultT[] => {\r\n  const sourceResult = getSourceSkillResult(source, skill)\r\n  return targets.map((target) => getTargetSkillResult(target, sourceResult))\r\n}\r\n\r\nexport const commitSkillResults = (party: PartyT, enemyParty: PartyT) => (\r\n  results: TargetSkillResultT[],\r\n) => {\r\n  const localUpdate = (\r\n    p: PartyT,\r\n    id: string,\r\n    updater: (c: CharacterT) => CharacterT,\r\n  ) => {\r\n    return updateCharacter(p, id, updater)\r\n  }\r\n  results.forEach((result) => {\r\n    const { source, target } = result\r\n    let sourceParty = party.id === source.partyId ? party : enemyParty\r\n    let targetParty = party.id === source.partyId ? enemyParty : party\r\n    targetParty = localUpdate(targetParty, result.target.id, (c) => {\r\n      return {\r\n        ...c,\r\n        stats: {\r\n          ...c.stats,\r\n          healthOffset: c.stats.healthOffset + result.totalDamage.damage,\r\n        },\r\n      }\r\n    })\r\n\r\n    if (result.splashDamage.damage > 0) {\r\n      targetParty.characters\r\n        .filter((c) => c.id !== result.target.id)\r\n        .forEach((character) => {\r\n          targetParty = localUpdate(targetParty, character.id, (c) => {\r\n            const splashDamageResistance = getDamageResistance(\r\n              processCharacter(character),\r\n              result.splashDamage.type,\r\n            )\r\n            return {\r\n              ...c,\r\n              stats: {\r\n                ...c.stats,\r\n                healthOffset:\r\n                  c.stats.healthOffset +\r\n                  (result.splashDamage.damage - splashDamageResistance),\r\n              },\r\n            }\r\n          })\r\n        })\r\n    }\r\n    if (sourceParty.id === party.id) {\r\n      party = sourceParty\r\n      enemyParty = targetParty\r\n    } else {\r\n      party = targetParty\r\n      enemyParty = sourceParty\r\n    }\r\n  })\r\n  return { party, enemyParty }\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const SMASH: SkillT = {\r\n  ...makeEntity('Smash'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  rolls: [makeCheck('strength'), makeCheck('strength'), makeCheck('strength')],\r\n  accuracy: makeCheck('strength'),\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const SHOCKWAVE: SkillT = {\r\n  ...makeEntity('Shockwave'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  rolls: [\r\n    makeCheck('strength'),\r\n    makeCheck('strength'),\r\n    makeCheck('strength'),\r\n    makeCheck('strength'),\r\n  ],\r\n  accuracy: makeCheck('strength', -10),\r\n  perfectSplash: true,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n}\r\n","import { WeaponT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { SMASH } from '../skills/smash'\r\nimport { SHOCKWAVE } from '../skills/shockwave'\r\n\r\nexport const BLACKSMITHS_HAMMER: WeaponT = {\r\n  ...makeEntity(`Blacksmith's Hammer`),\r\n  type: 'hammer',\r\n  rarity: 'common',\r\n  hands: 1,\r\n  damage: { type: 'physical', damage: 10 },\r\n  traits: [],\r\n  skills: [SMASH, SHOCKWAVE],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const SHOT: SkillT = {\r\n  ...makeEntity('Shot'),\r\n  // TODO Damage Modifier for flying, etc...\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  rolls: [\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n  ],\r\n  accuracy: makeCheck('perception'),\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const SNIPE_SHOT: SkillT = {\r\n  ...makeEntity('Snipe Shot'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  rolls: [\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n  ],\r\n  accuracy: makeCheck('perception', -10),\r\n  perfectSplash: false,\r\n  perfectPierce: true,\r\n  perfectStatus: [],\r\n}\r\n","import { WeaponT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\nimport { SHOT } from '../skills/shot'\r\nimport { SNIPE_SHOT } from '../skills/snipe_shot'\r\n\r\nexport const HUNTING_BOW: WeaponT = {\r\n  ...makeEntity(`Blacksmith's Hammer`),\r\n  type: 'bow',\r\n  rarity: 'common',\r\n  hands: 2,\r\n  damage: { type: 'physical', damage: 6 },\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        evasion: 3,\r\n      },\r\n      damage: 0,\r\n    },\r\n  ],\r\n  skills: [SHOT, SNIPE_SHOT],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const SURGE: SkillT = {\r\n  ...makeEntity('Surge'),\r\n  damageModifier: -0.2,\r\n  targetType: 'single',\r\n  rolls: [\r\n    makeCheck('intelligence'),\r\n    makeCheck('intelligence'),\r\n    makeCheck('intelligence'),\r\n  ],\r\n  accuracy: makeCheck('intelligence'),\r\n  perfectSplash: false,\r\n  perfectPierce: true,\r\n  perfectStatus: [],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/Roll'\r\n\r\nexport const AREA_BLAST: SkillT = {\r\n  ...makeEntity('Area Blast'),\r\n  damageModifier: -0.5,\r\n  targetType: 'group',\r\n  rolls: [\r\n    makeCheck('intelligence'),\r\n    makeCheck('intelligence'),\r\n    makeCheck('intelligence'),\r\n  ],\r\n  accuracy: makeCheck('intelligence', -5),\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n}\r\n","import { CharacterClassT, WeaponT } from '../types'\r\nimport { BLACKSMITHS_HAMMER } from './weapons/blacksmiths_hammer'\r\nimport { HUNTING_BOW } from './weapons/hunting_bow'\r\nimport { SCHOLARS_BOOK } from './weapons/scholars_book'\r\n\r\nexport const CLASS_STARTING_WEAPONS: Record<CharacterClassT, WeaponT> = {\r\n  blacksmith: BLACKSMITHS_HAMMER,\r\n  hunter: HUNTING_BOW,\r\n  scholar: SCHOLARS_BOOK,\r\n  bard: BLACKSMITHS_HAMMER,\r\n}\r\n","import { WeaponT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { SURGE } from '../skills/surge'\r\nimport { AREA_BLAST } from '../skills/area_blast'\r\n\r\nexport const SCHOLARS_BOOK: WeaponT = {\r\n  ...makeEntity(`Scholar's Book`),\r\n  type: 'tome',\r\n  rarity: 'common',\r\n  hands: 2,\r\n  damage: { type: 'magic', damage: 6 },\r\n  traits: [],\r\n  skills: [SURGE, AREA_BLAST],\r\n}\r\n","import {\r\n  CharacterT,\r\n  ProcessedCharacterT,\r\n  StatsT,\r\n  TraitT,\r\n  DamageTypeT,\r\n  StatusTypeT,\r\n  CheckT,\r\n  CharacterClassT,\r\n  EntityT,\r\n} from '../types'\r\nimport { STATUS_EFFECTS, CLASS_STARTING_STATS } from '../objects'\r\nimport {\r\n  combineTraits,\r\n  getTraitsFromObjects,\r\n  getCommittedTraitsFromObjects,\r\n} from './Traits'\r\nimport { processWeapon } from './Weapon'\r\nimport { getSkillsFromObjects } from './Skill'\r\nimport { makeEntity } from './Entity'\r\nimport { combineStats } from './Stats'\r\nimport { CLASS_STARTING_WEAPONS } from '../objects/Weapon'\r\n\r\nexport const checkForProcessedCharacter = (character: CharacterT) => {\r\n  if ((character as ProcessedCharacterT).processed) {\r\n    throw new Error('No Processed Characters Allowed')\r\n  }\r\n}\r\n\r\nexport const isCharacter = (e: EntityT) => (e as CharacterT).isCharacter\r\n\r\nexport const getStatusEffects = (character: CharacterT) => {\r\n  return character.status.map((status) => STATUS_EFFECTS[status.type])\r\n}\r\n\r\nexport const getTraits = (character: CharacterT): TraitT[] => {\r\n  checkForProcessedCharacter(character)\r\n  return [\r\n    ...character.traits,\r\n    ...character.weapon.traits,\r\n    ...getTraitsFromObjects(character.armor),\r\n    ...getTraitsFromObjects(getStatusEffects(character)),\r\n  ]\r\n}\r\n\r\nexport const getSkills = (character: CharacterT) => {\r\n  checkForProcessedCharacter(character)\r\n  return [...character.weapon.skills, ...getSkillsFromObjects(character.armor)]\r\n}\r\n\r\nexport const processCharacter = (\r\n  character: CharacterT,\r\n): ProcessedCharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  const traits = getTraits(character)\r\n  const combinedTrait = combineTraits(...traits)\r\n  const stats: StatsT = combineStats(character.stats, combinedTrait.stats)\r\n  const weapon = processWeapon(character.weapon)\r\n  const statusEffects = getStatusEffects(character)\r\n  const skills = getSkills(character)\r\n  const startingHealth =\r\n    25 + Math.floor(0.1 * CLASS_STARTING_STATS[character.class].vigor)\r\n  const health = Math.floor(\r\n    startingHealth + character.level + 0.1 * character.level * stats.vigor,\r\n  )\r\n  return {\r\n    ...character,\r\n    health,\r\n    stats,\r\n    weapon,\r\n    statusEffects,\r\n    skills,\r\n    dead: stats.healthOffset >= health,\r\n    processed: true,\r\n  }\r\n}\r\n\r\nexport const makeCharacter = (\r\n  characterClass: CharacterClassT,\r\n  partyId: string = '',\r\n): CharacterT => {\r\n  return {\r\n    ...makeEntity(),\r\n    isCharacter: true,\r\n    partyId,\r\n    level: 1,\r\n    class: characterClass,\r\n    stats: CLASS_STARTING_STATS[characterClass],\r\n    traits: [],\r\n    weapon: CLASS_STARTING_WEAPONS[characterClass],\r\n    armor: [],\r\n    status: [],\r\n  }\r\n}\r\n\r\nexport const commitTrait = (\r\n  character: CharacterT,\r\n  trait: TraitT,\r\n): CharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  return {\r\n    ...character,\r\n    stats: combineStats(character.stats, trait.stats),\r\n  }\r\n}\r\nexport const commitStatusEffects = (character: CharacterT): CharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  const statusEffects = getStatusEffects(character)\r\n  const traits = getCommittedTraitsFromObjects(statusEffects)\r\n  return traits.reduce(\r\n    (char, trait) => {\r\n      return commitTrait(char, trait)\r\n    },\r\n    { ...character },\r\n  )\r\n}\r\nexport const decrementStatusDurations = (character: CharacterT): CharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  return {\r\n    ...character,\r\n    status: character.status\r\n      .map((status) => ({ ...status, duration: status.duration - 1 }))\r\n      .filter((status) => status.duration !== 0),\r\n  }\r\n}\r\nexport const addStatus = (character: CharacterT, statusType: StatusTypeT) => {\r\n  const statusEffect = STATUS_EFFECTS[statusType]\r\n  const existingStatus = character.status.find((s) => s.type === statusType)\r\n  if (existingStatus && !statusEffect.canStack) {\r\n    return character\r\n  }\r\n  return {\r\n    ...character,\r\n    status: [\r\n      ...character.status,\r\n      { type: statusType, duration: statusEffect.duration },\r\n    ],\r\n  }\r\n}\r\nexport const addMultipleStatus = (\r\n  character: CharacterT,\r\n  statusTypes: StatusTypeT[],\r\n) => {\r\n  return statusTypes.reduce(\r\n    (char, statusType) => {\r\n      return addStatus(char, statusType)\r\n    },\r\n    { ...character },\r\n  )\r\n}\r\n\r\nexport const getCharacterStat = (character: CharacterT, statValue: CheckT) => {\r\n  const resolvedStatValue = statValue.key ? character.stats[statValue.key] : 0\r\n  return resolvedStatValue + (statValue.offset || 0)\r\n}\r\n\r\nexport const getDamageResistance = (\r\n  character: ProcessedCharacterT,\r\n  damageType: DamageTypeT,\r\n) => {\r\n  if (damageType === 'physical') return character.stats.armor\r\n  if (damageType === 'magic') return character.stats.resistance\r\n  return 0\r\n}\r\n","import { WeaponT, ProcessedWeaponT } from '../types'\r\n\r\nexport const processWeapon = (weapon: WeaponT): ProcessedWeaponT => {\r\n  const damage = weapon.traits.reduce((p, c) => {\r\n    return {\r\n      ...p,\r\n      damage: p.damage + c.damage,\r\n    }\r\n  }, weapon.damage)\r\n  return {\r\n    ...weapon,\r\n    damage,\r\n    processed: true,\r\n  }\r\n}\r\n","import { v4 } from 'uuid'\r\nimport { useSelector } from 'react-redux'\r\nimport { StateCoreT, StateActionT, StateT } from '../types'\r\nimport { PartyT, CharacterT } from '../../types'\r\nimport { Dispatch } from 'redux'\r\nimport { makeReducer } from '../util'\r\nimport { useActions } from '../../hooks/useActions'\r\nimport {\r\n  updateCharacter,\r\n  makeCharacter,\r\n  checkForProcessedParty,\r\n} from '../../functions'\r\n\r\nexport const UPDATE_PARTY = '@actions/parties/set-party'\r\nexport const UPSERT_CHARACTER = '@actions/parties/upsert-character'\r\nexport const DELETE_CHARACTER = '@actions/parties/delete-character'\r\nexport const UPSERT_ITEM = '@actions/parties/upsert-item'\r\nexport const DELETE_ITEM = '@actions/parties/delete-item'\r\nexport const UPSERT_MOD = '@actions/parties/upsert-mod'\r\nexport const DELETE_MOD = '@actions/parties/delete-mod'\r\n\r\nexport const actionCreators = {\r\n  updateParty: (party: PartyT): StateActionT => {\r\n    return {\r\n      type: UPDATE_PARTY,\r\n      payload: {\r\n        party,\r\n      },\r\n    }\r\n  },\r\n  upsertCharacter: (character: CharacterT): StateActionT => {\r\n    return {\r\n      type: UPSERT_CHARACTER,\r\n      payload: {\r\n        character,\r\n      },\r\n    }\r\n  },\r\n  deleteCharacter: (characterId: string): StateActionT => {\r\n    return {\r\n      type: DELETE_CHARACTER,\r\n      payload: {\r\n        characterId,\r\n      },\r\n    }\r\n  },\r\n}\r\n\r\nexport const actions = {\r\n  updateParty: (party: PartyT) => (dispatch: Dispatch) => {\r\n    checkForProcessedParty(party)\r\n    dispatch(actionCreators.updateParty(party))\r\n  },\r\n  upsertCharacter: (character: CharacterT) => (dispatch: Dispatch) => {\r\n    dispatch(actionCreators.upsertCharacter(character))\r\n  },\r\n  deleteCharacter: (characterId: string) => (dispatch: Dispatch) => {\r\n    dispatch(actionCreators.deleteCharacter(characterId))\r\n  },\r\n}\r\n\r\nexport const core: StateCoreT<PartyT> = {\r\n  [UPDATE_PARTY]: (state, action) => {\r\n    return {\r\n      ...action.payload.party,\r\n    }\r\n  },\r\n  [UPSERT_CHARACTER]: (state, action) => {\r\n    return updateCharacter(\r\n      state,\r\n      action.payload.character.id,\r\n      (c) => action.payload.character,\r\n    )\r\n  },\r\n  [DELETE_CHARACTER]: (state, action) => {\r\n    return {\r\n      ...state,\r\n      characters: state.characters.filter(\r\n        (c) => c.id !== action.payload.characterId,\r\n      ),\r\n    }\r\n  },\r\n}\r\n\r\nexport const PLAYER_PARTY_ID = v4()\r\nexport const INITIAL_STATE: PartyT = {\r\n  isParty: true,\r\n  id: PLAYER_PARTY_ID,\r\n  name: 'PlayerParty',\r\n  characters: [\r\n    { ...makeCharacter('blacksmith'), name: 'max m' },\r\n    { ...makeCharacter('hunter'), name: 'katie c' },\r\n    { ...makeCharacter('scholar'), name: 'milo w' },\r\n  ],\r\n}\r\nexport default makeReducer(core, INITIAL_STATE)\r\nexport const useParty = () => useSelector((state: StateT) => state.party)\r\nexport const usePartyActions = () =>\r\n  useActions(actions) as {\r\n    updateParty: (party: PartyT) => void\r\n    upsertCharacter: (character: CharacterT) => void\r\n    deleteCharacter: (characterId: string) => void\r\n  }\r\n","import { StateCoreT, StateReducerT } from './types'\r\n\r\nexport const makeReducer = (\r\n  core: StateCoreT,\r\n  initialState: any,\r\n): StateReducerT => {\r\n  return (state = initialState, action) => {\r\n    const coreFn = core[action.type]\r\n    if (coreFn) return coreFn(state, action)\r\n    return state\r\n  }\r\n}\r\n","import { useMemo } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\n\r\nexport const useActions = (actions: any, deps?: any[]) => {\r\n  const dispatch = useDispatch()\r\n  return useMemo(\r\n    () => bindActionCreators(actions, dispatch),\r\n    deps ? [dispatch, ...deps] : [dispatch],\r\n  )\r\n}\r\n","import React, { useMemo, useContext } from 'react'\r\nimport {\r\n  PartyT,\r\n  ProcessedPartyT,\r\n  CharacterT,\r\n  ProcessedCharacterT,\r\n} from '../../types'\r\nimport { usePartyActions, useParty } from '../../state/party'\r\nimport { findCharacterInParty, processParty, makeParty } from '../../functions'\r\n\r\nexport interface PartyContextT {\r\n  party: ProcessedPartyT\r\n  rawParty: PartyT\r\n  updateParty: (party: PartyT) => void\r\n  upsertCharacter: (character: CharacterT) => void\r\n  deleteCharacter: (characterId: string) => void\r\n  findCharacter: (characterId: string) => ProcessedCharacterT | undefined\r\n  findRawCharacter: (characterId: string) => CharacterT | undefined\r\n}\r\nconst defaultContextValue: PartyContextT = {\r\n  rawParty: makeParty(),\r\n  party: processParty(makeParty()),\r\n  updateParty: (party) => {},\r\n  upsertCharacter: (character) => {},\r\n  deleteCharacter: (characterId) => {},\r\n  findCharacter: (characterId) => undefined,\r\n  findRawCharacter: (characterId) => undefined,\r\n}\r\nexport const PartyContext = React.createContext<PartyContextT>(\r\n  defaultContextValue,\r\n)\r\n\r\nexport interface PartyContextProviderPropsT {\r\n  children: React.ReactNode | React.ReactNode[]\r\n}\r\nexport const PartyContextProvider = (props: PartyContextProviderPropsT) => {\r\n  const { children } = props\r\n  const actions = usePartyActions()\r\n  const rawParty = useParty()\r\n  const party = useMemo(() => processParty(rawParty), [rawParty])\r\n\r\n  const updateParty = (party: PartyT) => {\r\n    actions.updateParty(party)\r\n  }\r\n  const upsertCharacter = (character: CharacterT) => {\r\n    if (!character) return\r\n    if ((character as ProcessedCharacterT).processed) {\r\n      throw new Error('No processed Characters Allowed')\r\n    }\r\n    actions.upsertCharacter(character)\r\n  }\r\n  const deleteCharacter = (characterId: string) => {\r\n    actions.deleteCharacter(characterId)\r\n  }\r\n  const findCharacter = (characterId: string) => {\r\n    return findCharacterInParty<ProcessedPartyT, ProcessedCharacterT>(\r\n      party,\r\n      characterId,\r\n    )\r\n  }\r\n  const findRawCharacter = (characterId: string) => {\r\n    return findCharacterInParty(rawParty, characterId)\r\n  }\r\n\r\n  return (\r\n    <PartyContext.Provider\r\n      value={{\r\n        party,\r\n        rawParty,\r\n        updateParty,\r\n        upsertCharacter,\r\n        deleteCharacter,\r\n        findCharacter,\r\n        findRawCharacter,\r\n      }}\r\n    >\r\n      {children}\r\n    </PartyContext.Provider>\r\n  )\r\n}\r\n\r\nexport const usePartyContext = () => useContext(PartyContext)\r\n","import React, {\r\n  createContext,\r\n  useContext,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n} from 'react'\r\nimport {\r\n  ProcessedPartyT,\r\n  PartyT,\r\n  SkillT,\r\n  ProcessedCharacterT,\r\n  TargetSkillResultT,\r\n  SkillTargetT,\r\n} from '../../types'\r\nimport {\r\n  makeParty,\r\n  processParty,\r\n  getSkillResults,\r\n  commitSkillResults,\r\n  processCharacter,\r\n  makeCharacter,\r\n  resolveSkillTarget,\r\n  makeSkillTarget,\r\n} from '../../functions'\r\nimport { usePartyContext } from '../PartyContext'\r\nimport { getRandom } from '../../util'\r\n\r\nexport interface CombatContextT {\r\n  party: ProcessedPartyT\r\n  enemyParty: ProcessedPartyT\r\n  activeCharacter: ProcessedCharacterT\r\n  queue: ProcessedCharacterT[]\r\n  selectedSkill: SkillT | undefined\r\n  selectedTargets: ProcessedCharacterT[]\r\n  roundResults: TargetSkillResultT[][]\r\n  activeRound: TargetSkillResultT[] | undefined\r\n  isRunning: boolean\r\n  isDone: boolean\r\n  onSkillSelect: (skill: SkillT) => void\r\n  onTargetsSelect: (target: ProcessedCharacterT | ProcessedPartyT) => void\r\n  start: () => void\r\n  next: () => void\r\n  commit: () => void\r\n}\r\nconst defaultValue: CombatContextT = {\r\n  party: processParty(makeParty()),\r\n  enemyParty: processParty(makeParty()),\r\n  activeCharacter: processCharacter(makeCharacter('blacksmith')),\r\n  queue: [],\r\n  selectedSkill: undefined,\r\n  selectedTargets: [],\r\n  roundResults: [],\r\n  activeRound: undefined,\r\n  isRunning: false,\r\n  isDone: false,\r\n  onSkillSelect: (skill: SkillT) => {},\r\n  onTargetsSelect: (target: ProcessedCharacterT | ProcessedPartyT) => {},\r\n  start: () => {},\r\n  next: () => {},\r\n  commit: () => {},\r\n}\r\nexport const CombatContext = createContext<CombatContextT>(defaultValue)\r\nexport const useCombatContext = () => useContext(CombatContext)\r\n\r\nexport interface CombatContextProviderPropsT {\r\n  children: JSX.Element\r\n  rawEnemyParty: PartyT\r\n  enemyParty: ProcessedPartyT\r\n  setEnemyParty: (party: PartyT) => void\r\n}\r\nexport const CombatContextProvider = (props: CombatContextProviderPropsT) => {\r\n  const { children, enemyParty, rawEnemyParty, setEnemyParty } = props\r\n  const { party, rawParty, updateParty } = usePartyContext()\r\n  const resultCommitter = useMemo(\r\n    () => commitSkillResults(rawParty, rawEnemyParty),\r\n    [rawParty, rawEnemyParty],\r\n  )\r\n  const [isRunning, setIsRunning] = useState<boolean>(false)\r\n  const [isDone, setIsDone] = useState<boolean>(false)\r\n  const characters = useMemo(\r\n    () =>\r\n      [...party.characters, ...enemyParty.characters].filter((c) => !c.dead),\r\n    [party, enemyParty],\r\n  )\r\n  const [queue, setQueue] = useState<string[]>(\r\n    characters\r\n      .sort((a, b) => b.stats.agility - a.stats.agility)\r\n      .map((c) => c.id),\r\n  )\r\n  const [roundResults, setRoundResults] = useState<TargetSkillResultT[][]>([])\r\n  const [activeRound, setActiveRound] = useState<\r\n    TargetSkillResultT[] | undefined\r\n  >()\r\n  const [selectedTarget, setSelectedTarget] = useState<\r\n    SkillTargetT | undefined\r\n  >()\r\n  const [selectedSkill, setSelectedSkill] = useState<SkillT | undefined>()\r\n  const activeCharacter = useMemo(\r\n    () => characters.find((c) => c.id === queue[0]) as ProcessedCharacterT,\r\n    [queue, characters],\r\n  )\r\n\r\n  const getTargetsOptions = (\r\n    sourcePartyId: string,\r\n    skill: SkillT,\r\n  ): ProcessedCharacterT[] | ProcessedPartyT[] => {\r\n    const sourceParty = party.id === sourcePartyId ? party : enemyParty\r\n    const targetParty = party.id === sourcePartyId ? enemyParty : party\r\n    switch (skill.targetType) {\r\n      case 'single':\r\n        return targetParty.characters.filter((c) => !c.dead)\r\n      case 'ally':\r\n        return sourceParty.characters.filter((c) => !c.dead)\r\n      case 'group':\r\n        return [targetParty]\r\n      case 'party':\r\n        return [sourceParty]\r\n      case 'self':\r\n        return [activeCharacter]\r\n      default:\r\n        return []\r\n    }\r\n  }\r\n\r\n  const start = () => setIsRunning(true)\r\n\r\n  const next = () => {\r\n    const roundTarget = selectedTarget\r\n    if (!selectedSkill || !roundTarget) return\r\n    const source = activeCharacter\r\n    const results = getSkillResults(\r\n      selectedSkill,\r\n      source,\r\n      resolveSkillTarget(roundTarget).filter((c) => !c.dead),\r\n    )\r\n    setActiveRound(results)\r\n  }\r\n\r\n  const onSkillSelect = (skill: SkillT) => {\r\n    setSelectedSkill(skill)\r\n    if (skill.targetType !== selectedSkill?.targetType) {\r\n      setSelectedTarget(undefined)\r\n    }\r\n  }\r\n\r\n  const onTargetsSelect = (target: ProcessedCharacterT | ProcessedPartyT) => {\r\n    if (!selectedSkill) return\r\n    setSelectedTarget(makeSkillTarget(selectedSkill.targetType, target))\r\n  }\r\n\r\n  const commit = () => {\r\n    if (!activeRound) return\r\n    const parties = resultCommitter(activeRound)\r\n    setEnemyParty(parties.enemyParty)\r\n    updateParty(parties.party)\r\n    setSelectedSkill(undefined)\r\n    setSelectedTarget(undefined)\r\n    setRoundResults((r) => [...r, activeRound])\r\n    setActiveRound(undefined)\r\n    setQueue((q) => {\r\n      const [active, ...rest] = q\r\n      return [...rest, active].filter(\r\n        (id) => characters.find((c) => c.id === id) !== undefined,\r\n      )\r\n    })\r\n  }\r\n\r\n  const execEnemyTurn = (skill: SkillT, target: SkillTargetT) => {\r\n    const source = activeCharacter\r\n    const results = getSkillResults(skill, source, resolveSkillTarget(target))\r\n    setActiveRound(results)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!activeCharacter) {\r\n      if (queue.length > 0) {\r\n        setQueue((q) => {\r\n          const [active, ...rest] = q\r\n          return [...rest, active].filter(\r\n            (id) => characters.find((c) => c.id === id) !== undefined,\r\n          )\r\n        })\r\n      }\r\n    } else {\r\n      if (activeCharacter.partyId === enemyParty.id) {\r\n        const skill = getRandom(activeCharacter.skills)\r\n        const target = getRandom<ProcessedPartyT | ProcessedCharacterT>(\r\n          getTargetsOptions(activeCharacter.partyId, skill),\r\n        )\r\n\r\n        execEnemyTurn(skill, makeSkillTarget(skill.targetType, target))\r\n      }\r\n    }\r\n  }, [(activeCharacter || {}).id])\r\n\r\n  useEffect(() => {\r\n    if (isDone) return\r\n    if (enemyParty.characters.every((c) => c.dead)) {\r\n      alert('you win')\r\n      setIsDone(true)\r\n      return\r\n    }\r\n    if (party.characters.every((c) => c.dead)) {\r\n      setIsDone(true)\r\n      alert('you lose')\r\n      return\r\n    }\r\n  }, [party, enemyParty])\r\n\r\n  return (\r\n    <CombatContext.Provider\r\n      value={{\r\n        party,\r\n        enemyParty,\r\n        queue: queue\r\n          .map(\r\n            (id) => characters.find((c) => c.id === id) as ProcessedCharacterT,\r\n          )\r\n          .filter((c) => c !== undefined),\r\n        activeCharacter,\r\n        activeRound,\r\n        selectedSkill,\r\n        selectedTargets: selectedTarget\r\n          ? resolveSkillTarget(selectedTarget)\r\n          : [],\r\n        roundResults,\r\n        isDone,\r\n        isRunning,\r\n        onSkillSelect,\r\n        onTargetsSelect,\r\n        start,\r\n        next,\r\n        commit,\r\n      }}\r\n    >\r\n      {children}\r\n    </CombatContext.Provider>\r\n  )\r\n}\r\n","import React, { useState, useLayoutEffect } from 'react'\r\nimport { v4 } from 'uuid'\r\n\r\nexport interface HoverChildrenT {\r\n  isHovering: boolean\r\n}\r\nexport interface HoverPropsT {\r\n  delay?: number\r\n  children: (props: HoverChildrenT) => JSX.Element\r\n}\r\nexport const Hover = (props: HoverPropsT) => {\r\n  const { delay = 500, children } = props\r\n  const [internalHovering, setInternalHovering] = useState<boolean>(false)\r\n  const [isHovering, setIsHovering] = useState<boolean>(false)\r\n  const [guid, setGuid] = useState<string>(v4())\r\n  useLayoutEffect(() => {\r\n    const action = async () => {\r\n      if (internalHovering) {\r\n        setTimeout(() => {\r\n          setGuid(v4())\r\n        }, delay)\r\n      }\r\n    }\r\n    action()\r\n  }, [internalHovering])\r\n  useLayoutEffect(() => {\r\n    if (internalHovering) {\r\n      setIsHovering(true)\r\n    }\r\n  }, [guid])\r\n  const onMouseEnter = (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    setInternalHovering(true)\r\n  }\r\n  const onMouseLeave = (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    setInternalHovering(false)\r\n    setIsHovering(false)\r\n  }\r\n  return (\r\n    <div onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\r\n      {children({ isHovering })}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Hover } from '../components/Hover'\r\n\r\nexport interface BoxContainerPropsT extends React.HTMLProps<HTMLDivElement> {\r\n  substyle?: React.CSSProperties\r\n  tag?: any\r\n  to?: string\r\n}\r\nexport const BoxContainer = (props: BoxContainerPropsT) => {\r\n  const {\r\n    style = {},\r\n    substyle = {},\r\n    children,\r\n    tag: Element = 'div',\r\n    ...rest\r\n  } = props\r\n  return (\r\n    <div\r\n      style={{\r\n        border: '1px solid #000',\r\n        display: 'flex',\r\n        boxSizing: 'border-box',\r\n        ...style,\r\n      }}\r\n    >\r\n      <Element\r\n        style={{\r\n          border: substyle.border || '1px solid #555',\r\n          background: 'linear-gradient(0deg, #222222 0%, #2a2a2a 100%)',\r\n          padding: 10,\r\n          color: '#ccc',\r\n          flex: 1,\r\n          boxShadow: 'inset 0px 0px 2px black',\r\n          ...substyle,\r\n        }}\r\n        {...rest}\r\n      >\r\n        {children}\r\n      </Element>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const SmallBox = (props: BoxContainerPropsT) => (\r\n  <BoxContainer\r\n    {...props}\r\n    style={{\r\n      height: 40,\r\n      width: 40,\r\n      ...props.style,\r\n    }}\r\n    substyle={{\r\n      display: 'flex',\r\n      padding: 0,\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      background: '#111',\r\n      ...props.substyle,\r\n    }}\r\n  >\r\n    {props.children}\r\n  </BoxContainer>\r\n)\r\n\r\nexport const BoxButton = (props: BoxContainerPropsT) => {\r\n  return (\r\n    <Hover delay={0}>\r\n      {({ isHovering }) => (\r\n        <BoxContainer\r\n          {...props}\r\n          tag='button'\r\n          style={{\r\n            margin: 0,\r\n            ...(props.style || {}),\r\n          }}\r\n          substyle={{\r\n            borderColor: isHovering && !props.disabled ? '#999' : '#555',\r\n            padding: '4px',\r\n            cursor: props.disabled ? 'default' : 'pointer',\r\n            background: props.disabled ? '#444' : '#111',\r\n            boxShadow: props.disabled ? 'none' : undefined,\r\n            ...(props.substyle || {}),\r\n          }}\r\n        />\r\n      )}\r\n    </Hover>\r\n  )\r\n}\r\n","import { styled } from 'styletron-react'\r\n\r\nexport interface FlexContainerPropsT {\r\n  $direction?: 'row' | 'column' | 'column-reverse'\r\n  $full?: boolean\r\n}\r\nexport const FlexContainer = styled('div', (props: FlexContainerPropsT) => ({\r\n  display: 'flex',\r\n  flexDirection: props.$direction || 'row',\r\n  flex: props.$full ? 1 : 'default',\r\n}))\r\nexport const FullContainer = styled('div', () => ({\r\n  flex: 1,\r\n}))\r\n","import { styled } from 'styletron-react'\r\n\r\nexport const Monospace = styled('span', () => ({\r\n  fontFamily: 'Inconsolata, monospace',\r\n  fontWeight: 600,\r\n}))\r\nexport const Monodiv = styled('div', () => ({\r\n  fontFamily: 'Inconsolata, monospace',\r\n  fontWeight: 600,\r\n}))\r\n","import React from 'react'\r\nimport { CharacterT, PartyT, SkillT } from '../../types'\r\n\r\nexport const Span = (color: string, text: JSX.Element | string) => (\r\n  <span style={{ color, fontWeight: 'bold' }}>{text}</span>\r\n)\r\nexport const SkillSpan = (skill: SkillT) => Span('plum', skill.name)\r\n\r\nexport const NameSpanBuilder = (party: PartyT, enemyParty: PartyT) => (\r\n  character: CharacterT,\r\n) => {\r\n  const isUserParty = character.partyId === party.id\r\n  const isEnemyParty = character.partyId === enemyParty.id\r\n  const color = isUserParty\r\n    ? 'lightgreen'\r\n    : isEnemyParty\r\n    ? 'lightsalmon'\r\n    : 'white'\r\n\r\n  return Span(color, character.name)\r\n}\r\n","import React, { createContext, useContext, useState, useEffect } from 'react'\r\nimport { useCombatContext } from '../CombatContext'\r\nimport { Monospace } from '../../elements/monospace'\r\nimport { NameSpanBuilder, SkillSpan, Span } from './util'\r\nimport { getDamageResistance } from '../../functions'\r\n\r\nexport interface CombatLogContextT {\r\n  combatLog: JSX.Element[]\r\n}\r\nconst defualtValue: CombatLogContextT = {\r\n  combatLog: [],\r\n}\r\nexport const CombatLogContext = createContext<CombatLogContextT>(defualtValue)\r\nexport const useCombatLogContext = () => useContext(CombatLogContext)\r\n\r\ntype DeadLogT = Record<string, boolean | undefined>\r\n\r\nexport interface CombatLogContextProviderPropsT {\r\n  children: JSX.Element\r\n}\r\nexport const CombatLogContextProvider = (\r\n  props: CombatLogContextProviderPropsT,\r\n) => {\r\n  const { children } = props\r\n  const { roundResults, enemyParty, party } = useCombatContext()\r\n  const [combatLog, setCombatLog] = useState<JSX.Element[]>([])\r\n  const [deadLog, setDeadLog] = useState<DeadLogT>({})\r\n  const NameSpan = NameSpanBuilder(party, enemyParty)\r\n  const log = (line: JSX.Element) =>\r\n    setCombatLog((log) => [\r\n      ...log,\r\n      <Monospace style={{ display: 'inline-block', fontWeight: 'normal' }}>\r\n        {line}\r\n      </Monospace>,\r\n    ])\r\n\r\n  useEffect(() => {\r\n    const characters = [...enemyParty.characters, ...party.characters]\r\n    characters.forEach((character) => {\r\n      if (character.dead && !deadLog[character.id]) {\r\n        setDeadLog((dLog) => ({ ...dLog, [character.id]: true }))\r\n        log(<span>{Span('lightcoral', `${character.name} died.`)}</span>)\r\n      }\r\n    })\r\n  }, [enemyParty, party])\r\n\r\n  useEffect(() => {\r\n    if (roundResults.length === 0) return\r\n    const latestRounds = roundResults[roundResults.length - 1]\r\n    const baseRound = latestRounds[0]\r\n    if (!baseRound) return\r\n    log(\r\n      <span>\r\n        {NameSpan(baseRound.source)} uses {SkillSpan(baseRound.skill)}.\r\n      </span>,\r\n    )\r\n    if (!baseRound.accuracySuccess) {\r\n      {\r\n        log(<span>{baseRound.source.name}'s attack missed.</span>)\r\n      }\r\n    }\r\n    if (baseRound.criticalSuccess) {\r\n      log(<span>{Span('gold', 'Critical Hit!')}</span>)\r\n    }\r\n    if (baseRound.perfect) {\r\n      log(<span>{Span('gold', 'Perfect!')}</span>)\r\n    }\r\n    latestRounds.forEach((round) => {\r\n      const targetParty = party.id === round.source.partyId ? enemyParty : party\r\n      if (round.accuracySuccess) {\r\n        if (round.dodgeSuccess) {\r\n          log(<span>{NameSpan(round.target)} dodged the attack.</span>)\r\n        } else {\r\n          log(\r\n            <span>\r\n              {round.skill.name} deals{' '}\r\n              {Span('white', `${round.totalDamage.damage} damage`)} to{' '}\r\n              {NameSpan(round.target)}.\r\n            </span>,\r\n          )\r\n        }\r\n        if (round.splashDamage.damage > 0) {\r\n          targetParty.characters\r\n            .filter((c) => c.id !== round.target.id)\r\n            .forEach((subTarget) => {\r\n              const splashDamageResistance = getDamageResistance(\r\n                subTarget,\r\n                round.splashDamage.type,\r\n              )\r\n              log(\r\n                <span>\r\n                  {round.skill.name} deals{' '}\r\n                  {Span(\r\n                    'white',\r\n                    `${\r\n                      round.splashDamage.damage - splashDamageResistance\r\n                    } damage`,\r\n                  )}{' '}\r\n                  to {NameSpan(subTarget)}.\r\n                </span>,\r\n              )\r\n            })\r\n        }\r\n      }\r\n    })\r\n  }, [roundResults.length])\r\n\r\n  return (\r\n    <CombatLogContext.Provider value={{ combatLog }}>\r\n      {children}\r\n    </CombatLogContext.Provider>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport BaseTooltip, { TooltipProps } from 'react-tooltip-lite'\r\nimport { Hover } from '../Hover'\r\n\r\ninterface PropsT extends TooltipProps {\r\n  children: JSX.Element\r\n}\r\nexport const Tooltip = (props: PropsT) => {\r\n  const { ...rest } = props\r\n  return (\r\n    <BaseTooltip\r\n      direction='up'\r\n      tagName='div'\r\n      padding='0'\r\n      arrow={false}\r\n      {...rest}\r\n    />\r\n  )\r\n}\r\n\r\nexport const HoverToolTip = (props: PropsT) => {\r\n  return (\r\n    <Hover>\r\n      {({ isHovering }) => <Tooltip {...props} isOpen={isHovering} />}\r\n    </Hover>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Color from 'color'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\nimport { HoverToolTip } from '../Tooltip'\r\nimport { Monodiv } from '../../elements/monospace'\r\n\r\nexport interface GaugePropsT {\r\n  name?: string\r\n  color: string\r\n  height?: number\r\n  max: number\r\n  value: number\r\n  children?: React.ReactNode | React.ReactNode[]\r\n}\r\nexport const Gauge = (props: GaugePropsT) => {\r\n  const { name = '', value, max, color, height = 30, children } = props\r\n  const p = (value / max) * 100\r\n  const percentage = p > 100 ? 100 : p\r\n  return (\r\n    <HoverToolTip\r\n      direction='right'\r\n      content={<BoxContainer>{`${name} (${value} / ${max})`}</BoxContainer>}\r\n    >\r\n      <BoxContainer\r\n        substyle={{\r\n          padding: 0,\r\n          background: '#555',\r\n          height: height - 2,\r\n          position: 'relative',\r\n        }}\r\n      >\r\n        <FlexContainer\r\n          style={{\r\n            position: 'absolute',\r\n            left: 0,\r\n            boxSizing: 'border-box',\r\n            height: height - 2,\r\n            maxWidth: `${percentage}%`,\r\n            minWidth: `${percentage}%`,\r\n            boxShadow: 'inset 0px 0px 1px rgba(0,0,0,0.5)',\r\n            textShadow: '1px 1px 1px black',\r\n            backgroundColor: color,\r\n            color: 'white',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            transition: 'all 0.5s',\r\n          }}\r\n        ></FlexContainer>\r\n        <FullContainer\r\n          style={{\r\n            position: 'absolute',\r\n            height,\r\n            lineHeight: `${height - 2}px`,\r\n            right: 4,\r\n            top: 0,\r\n            fontSize: 10,\r\n            fontWeight: 'bold',\r\n            overflow: 'hidden',\r\n            textShadow: '0px 0px 3px black',\r\n          }}\r\n        >\r\n          <Monodiv>{children}</Monodiv>\r\n        </FullContainer>\r\n      </BoxContainer>\r\n    </HoverToolTip>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { ProcessedCharacterT } from '../../types'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\nimport { Gauge } from '../Gauge'\r\nimport { noneg } from '../../util'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { Monodiv } from '../../elements/monospace'\r\nimport { styled } from 'styletron-react'\r\n\r\nconst ResourceE = styled(Monodiv, () => ({\r\n  height: 15,\r\n  fontSize: '12px',\r\n  fontWeight: 'bolder',\r\n  padding: '0px 4px',\r\n  lineHeight: '15px',\r\n  flex: 1,\r\n  textAlign: 'center',\r\n  background: '#111',\r\n}))\r\n\r\nexport interface PartyCharacterProps {\r\n  character: ProcessedCharacterT\r\n  activeCharacter: ProcessedCharacterT\r\n  hoverable?: boolean\r\n  selected?: boolean\r\n  isHovering?: boolean\r\n  onClick?: () => void\r\n}\r\nconst Wrapper = styled('div', (props: any) => {\r\n  const { $selected, $active, $hoverable, $isHovering } = props\r\n  const hoverable = $hoverable && !$selected\r\n  return {\r\n    ':hover': {\r\n      boxShadow: hoverable ? '0px 0px 20px black' : undefined,\r\n    },\r\n    margin: 10,\r\n    boxShadow: $isHovering\r\n      ? '0px 0px 20px black'\r\n      : $selected\r\n      ? '0px 0px 10px black'\r\n      : $active\r\n      ? '0px 0px 20px white'\r\n      : 'none',\r\n    transition: 'all 0.1s',\r\n  }\r\n})\r\nexport const PartyCharacter = (props: PartyCharacterProps) => {\r\n  const {\r\n    character,\r\n    activeCharacter,\r\n    hoverable,\r\n    selected,\r\n    isHovering,\r\n    onClick,\r\n  } = props\r\n  const health = character.health - character.stats.healthOffset\r\n  return (\r\n    <Wrapper\r\n      $hoverable={hoverable && !character.dead}\r\n      $active={character.id === activeCharacter.id}\r\n      $selected={selected}\r\n      $isHovering={isHovering}\r\n      style={{\r\n        opacity: character.dead ? 0.5 : 1,\r\n      }}\r\n    >\r\n      <BoxContainer\r\n        onClick={() => (onClick && !character.dead ? onClick() : null)}\r\n        style={{\r\n          borderWidth: 2,\r\n          cursor: onClick ? 'pointer' : 'default',\r\n        }}\r\n        substyle={{ padding: 0, width: 380 }}\r\n      >\r\n        <FlexContainer style={{ border: '2px solid black' }}>\r\n          <FlexContainer style={{ borderRight: '2px solid black' }}>\r\n            <img\r\n              alt='profile'\r\n              height='115'\r\n              width='115'\r\n              src={`https://picsum.photos/seed/${character.name}/115/115`}\r\n              style={{\r\n                height: 115,\r\n                width: 115,\r\n              }}\r\n            />\r\n          </FlexContainer>\r\n          <FlexContainer $full $direction='column'>\r\n            <FlexContainer\r\n              style={{\r\n                padding: '2px 4px',\r\n                paddingLeft: 8,\r\n                background: 'rgba(255,255,255,0.2)',\r\n                borderBottom: '1px solid rgba(255,255,255,0.4)',\r\n              }}\r\n            >\r\n              <span\r\n                style={{\r\n                  fontWeight: 'bolder',\r\n                  textShadow: '0px 0px 2px black',\r\n                }}\r\n              >\r\n                {character.name}\r\n              </span>\r\n            </FlexContainer>\r\n            <FlexContainer>\r\n              <span\r\n                style={{\r\n                  fontWeight: 'bolder',\r\n                  padding: '2px 8px',\r\n                  fontSize: 42,\r\n                  height: 42,\r\n                  lineHeight: '42px',\r\n                }}\r\n              >\r\n                {health > 0 ? health : 'Dead'}\r\n              </span>\r\n            </FlexContainer>\r\n            <FullContainer />\r\n            <Gauge\r\n              name='Health'\r\n              color='#8f4e4d'\r\n              max={character.health}\r\n              value={noneg(health)}\r\n              height={12}\r\n            >\r\n              {noneg(health)}/{character.health}\r\n            </Gauge>\r\n            <Gauge\r\n              name='XP'\r\n              color='#5e8575'\r\n              max={3300}\r\n              value={1256}\r\n              height={12}\r\n            >\r\n              1256/3300\r\n            </Gauge>\r\n            <FlexContainer>\r\n              <ResourceE>S-{character.stats.strength}</ResourceE>\r\n              <ResourceE>V-{character.stats.vigor}</ResourceE>\r\n              <ResourceE>I-{character.stats.intelligence}</ResourceE>\r\n              <ResourceE>P-{character.stats.perception}</ResourceE>\r\n              <ResourceE>T-{character.stats.talent}</ResourceE>\r\n              <ResourceE>A-{character.stats.agility}</ResourceE>\r\n              <ResourceE>L-{character.stats.luck}</ResourceE>\r\n            </FlexContainer>\r\n          </FlexContainer>\r\n        </FlexContainer>\r\n      </BoxContainer>\r\n    </Wrapper>\r\n  )\r\n}\r\n","import { CSSProperties } from 'react'\r\n\r\nexport interface ModalContextStateT {\r\n  isOpen: boolean\r\n  contents: JSX.Element | null\r\n  callback: ((payload?: any) => void) | null\r\n  payload: any | null\r\n  blocking: boolean\r\n  style: CSSProperties\r\n}\r\nexport const initialState: ModalContextStateT = {\r\n  isOpen: false,\r\n  contents: null,\r\n  callback: null,\r\n  payload: null,\r\n  blocking: false,\r\n  style: {},\r\n}\r\n\r\nexport const OPEN = 'modalContext/OPEN'\r\nexport const CLOSE = 'modalContext/CLOSE'\r\nexport const SET_CONTENTS = 'modalContext/SET_CONTENTS'\r\nexport const SET_CALLBACK = 'modalContext/SET_CALLBACK'\r\nexport const SET_PAYLOAD = 'modalContext/SET_PAYLOAD'\r\nexport const SET_BLOCKING = 'modalContext/SET_BLOCKING'\r\nexport const SET_STYLE = 'modalContext/SET_STYLE'\r\n\r\nexport const actions = {\r\n  open: (\r\n    contents?: JSX.Element,\r\n    style?: CSSProperties,\r\n    blocking?: boolean,\r\n    callback?: (payload?: any) => void,\r\n  ) => ({\r\n    type: OPEN,\r\n    contents,\r\n    style,\r\n    blocking,\r\n    callback,\r\n  }),\r\n  close: () => ({ type: CLOSE }),\r\n  setPayload: (payload: any) => ({ type: SET_PAYLOAD, payload }),\r\n  setContents: (contents: JSX.Element | null) => ({\r\n    type: SET_CONTENTS,\r\n    contents,\r\n  }),\r\n  setCallback: (callback: (() => void) | null) => ({\r\n    type: SET_CALLBACK,\r\n    callback,\r\n  }),\r\n  setBlocking: (blocking: boolean) => ({ type: SET_BLOCKING, blocking }),\r\n  setStyle: (style: CSSProperties) => ({ type: SET_STYLE, style }),\r\n}\r\n\r\nconst core: Record<\r\n  string,\r\n  (state: ModalContextStateT, action: any) => ModalContextStateT\r\n> = {\r\n  [OPEN]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    isOpen: true,\r\n    contents: action.contents ? action.contents : state.contents,\r\n    style: action.style ? action.style : state.style || {},\r\n    blocking: action.blocking || false,\r\n    callback: action.callback ? action.callback : state.callback,\r\n  }),\r\n  [CLOSE]: (state: ModalContextStateT) => ({\r\n    ...state,\r\n    isOpen: false,\r\n  }),\r\n  [SET_PAYLOAD]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    payload: action.payload,\r\n  }),\r\n  [SET_CONTENTS]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    callback: null,\r\n    payload: null,\r\n    contents: action.contents,\r\n    blocking: false,\r\n    style: {},\r\n  }),\r\n  [SET_CALLBACK]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    callback: action.callback,\r\n  }),\r\n  [SET_BLOCKING]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    blocking: action.blocking,\r\n  }),\r\n  [SET_STYLE]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    style: action.style,\r\n  }),\r\n}\r\n\r\nexport const reducer = (\r\n  state: ModalContextStateT = initialState,\r\n  action: any,\r\n) => {\r\n  const coreFunction = core[action.type]\r\n  return coreFunction ? coreFunction(state, action) : state\r\n}\r\n","import React, { useContext, useReducer, useMemo, CSSProperties } from 'react'\r\nimport Modal from 'react-modal'\r\nimport { actions, reducer, initialState, ModalContextStateT } from './reducer'\r\n\r\nconst overlayStyles = () => ({\r\n  zIndex: 700,\r\n})\r\nconst contentStyles = (styles: CSSProperties): CSSProperties => ({\r\n  width: '50vw',\r\n  maxHeight: 'calc(100vh - 128px)',\r\n  marginLeft: 'auto',\r\n  marginRight: 'auto',\r\n  ...styles,\r\n})\r\n\r\nexport interface ModalContextT {\r\n  open: (\r\n    contents?: JSX.Element,\r\n    style?: CSSProperties,\r\n    blocking?: boolean,\r\n    callback?: (payload?: any) => void,\r\n  ) => void\r\n  close: (payload?: any) => void\r\n  setPayload: (payload: any) => void\r\n  setBlocking: (blocking: boolean) => void\r\n  setContents: (contents: JSX.Element) => void\r\n  setCallback: (callback: (payload?: any) => void) => void\r\n  setStyle: (style: CSSProperties) => void\r\n}\r\nconst defaultContext: ModalContextT = {\r\n  open: () => null,\r\n  close: () => null,\r\n  setBlocking: () => null,\r\n  setPayload: () => null,\r\n  setContents: () => null,\r\n  setCallback: () => null,\r\n  setStyle: () => null,\r\n}\r\nexport const ModalContext = React.createContext<ModalContextT>(defaultContext)\r\nexport const useModalContext = () => useContext(ModalContext)\r\n\r\nconst getContextValue = (\r\n  state: ModalContextStateT,\r\n  dispatch: React.Dispatch<any>,\r\n) => ({\r\n  isOpen: state.isOpen,\r\n  open: (\r\n    contents?: JSX.Element,\r\n    style?: CSSProperties,\r\n    blocking?: boolean,\r\n    callback?: (payload?: any) => void,\r\n  ) => {\r\n    dispatch(actions.open(contents, style, blocking, callback))\r\n  },\r\n  close: (payload?: any) => {\r\n    if (state.callback) state.callback(payload || state.payload)\r\n    dispatch(actions.close())\r\n  },\r\n  setPayload: (payload: any) => dispatch(actions.setPayload(payload)),\r\n  setContents: (contents: JSX.Element) =>\r\n    dispatch(actions.setContents(contents)),\r\n  setCallback: (callback: (payload?: any) => void) =>\r\n    dispatch(actions.setCallback(callback)),\r\n  setBlocking: (blocking: boolean) => dispatch(actions.setBlocking(blocking)),\r\n  setStyle: (style: CSSProperties) => dispatch(actions.setStyle(style)),\r\n})\r\n\r\nexport interface ModalContextProviderPropsT {\r\n  children: JSX.Element\r\n}\r\nexport const ModalContextProvider = (props: ModalContextProviderPropsT) => {\r\n  const { children } = props\r\n  const reducerValue = useReducer(reducer, initialState)\r\n  const [state] = reducerValue\r\n  const context = useMemo(() => getContextValue(...reducerValue), [\r\n    reducerValue,\r\n  ])\r\n\r\n  return (\r\n    <ModalContext.Provider value={context}>\r\n      {children}\r\n      <Modal\r\n        isOpen={state.isOpen}\r\n        onRequestClose={() => {\r\n          if (!state.blocking) context.close()\r\n        }}\r\n        style={{\r\n          content: {\r\n            backgroundColor: '#111',\r\n            color: 'white',\r\n            width: 400,\r\n            margin: '0 auto',\r\n            bottom: 'unset',\r\n            borderColor: '#555',\r\n          },\r\n          overlay: {\r\n            backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n          },\r\n        }}\r\n      >\r\n        {state.contents || <div />}\r\n      </Modal>\r\n    </ModalContext.Provider>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useCombatContext } from '../../contexts/CombatContext'\r\nimport { useModalContext } from '../../contexts/ModalContext'\r\nimport { TargetSkillResultT } from '../../types'\r\nimport { Span, NameSpanBuilder } from '../../contexts/CombatLogContext/util'\r\nimport { FlexContainer } from '../../elements/flex'\r\n\r\nexport const RoundResultRenderer = () => {\r\n  const { activeRound, commit } = useCombatContext()\r\n  const { open, close, setCallback } = useModalContext()\r\n\r\n  useEffect(() => {\r\n    if (activeRound) {\r\n      open(<RoundResult close={() => close(true)} />, {}, true, () => {\r\n        commit()\r\n      })\r\n    }\r\n  }, [activeRound, open, close, commit])\r\n\r\n  return null\r\n}\r\n\r\nexport interface RoundResultPropsT {\r\n  close: () => void\r\n}\r\nexport interface CheckKVT {\r\n  label: string\r\n  result: boolean | undefined\r\n}\r\nexport const RoundResult = (props: RoundResultPropsT) => {\r\n  const { close } = props\r\n  const { activeRound, party, enemyParty } = useCombatContext()\r\n  const NameSpan = NameSpanBuilder(party, enemyParty)\r\n  const rounds = activeRound || []\r\n  const round = rounds[0]\r\n  const [roundResults, setRoundResults] = useState<CheckKVT[]>(\r\n    !round\r\n      ? []\r\n      : [\r\n          ...round.rollResults.map((result, i) => ({\r\n            label: round.skill.rolls[i].key || '<NULL>',\r\n            result: undefined,\r\n          })),\r\n          {\r\n            label: 'accuracy',\r\n            result: undefined,\r\n          },\r\n        ],\r\n  )\r\n\r\n  const [currentIndex, setCurrentIndex] = useState<number>(0)\r\n  const updateRoundResult = (value: CheckKVT, index: number) =>\r\n    setRoundResults((r) => r.map((r, i) => (i === index ? value : r)))\r\n\r\n  useEffect(() => {\r\n    if (!round) return\r\n    if (currentIndex < roundResults.length - 1) {\r\n      setTimeout(() => {\r\n        updateRoundResult(\r\n          {\r\n            label: round.skill.rolls[currentIndex].key || '<NULL>',\r\n            result: round.rollResults[currentIndex].result,\r\n          },\r\n          currentIndex,\r\n        )\r\n        setCurrentIndex((i) => i + 1)\r\n      }, 200)\r\n    } else {\r\n      if (currentIndex === roundResults.length) {\r\n        setTimeout(() => {\r\n          close()\r\n        }, 600)\r\n      } else {\r\n        setTimeout(() => {\r\n          updateRoundResult(\r\n            {\r\n              label: 'accuracy',\r\n              result: round.accuracySuccess,\r\n            },\r\n            currentIndex,\r\n          )\r\n        }, 200)\r\n        setCurrentIndex((i) => i + 1)\r\n      }\r\n    }\r\n  }, [currentIndex])\r\n\r\n  if (!round) return null\r\n\r\n  const target = {\r\n    ...round.target,\r\n    name: rounds.length > 1 ? `${rounds.length} characters` : round.target.name,\r\n  }\r\n\r\n  return (\r\n    <FlexContainer $direction='column' style={{ textAlign: 'center' }}>\r\n      <h4 style={{ margin: '0 0 20px 0' }}>\r\n        {NameSpan(round.source)} uses {round.skill.name} on {NameSpan(target)}\r\n      </h4>\r\n      <FlexContainer style={{ justifyContent: 'center' }}>\r\n        {roundResults.map((result) => (\r\n          <FlexContainer $direction='column' style={{ marginRight: 10 }}>\r\n            <span>\r\n              {result.result === undefined\r\n                ? Span('rgba(255,255,255,0.4)', result.label)\r\n                : result.result === true\r\n                ? Span('lightgreen', result.label)\r\n                : Span('lightcoral', result.label)}\r\n            </span>\r\n          </FlexContainer>\r\n        ))}\r\n      </FlexContainer>\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { styled, withStyle } from 'styletron-react'\r\n\r\nexport interface ButtonPropsT {}\r\nexport const Button = styled('button', (props: ButtonPropsT) => {\r\n  return {\r\n    cursor: 'pointer',\r\n    background: '#222',\r\n    boxShadow: 'inset 0px 0px 3px black',\r\n    textShadow: '0px 1px 3px black',\r\n    border: '1px solid rgba(255,255,255,0.2)',\r\n    color: 'rgba(255,255,255,1)',\r\n    ':hover': {\r\n      border: '1px solid rgba(255,255,255,0.4)',\r\n    },\r\n    ':active': {\r\n      outline: 'none',\r\n      border: '1px solid rgba(255,255,255,0.7)',\r\n    },\r\n    ':focus': {\r\n      outline: 'none',\r\n    },\r\n    padding: '10px 30px',\r\n  }\r\n})\r\n\r\nexport const ConfirmButton = withStyle(Button, (props: ButtonPropsT) => {\r\n  return {\r\n    background:\r\n      'linear-gradient(0deg, rgba(157,0,0,1) 0%, rgba(110,0,0,1) 100%)',\r\n    fontWeight: 'bold',\r\n    borderTop: 'none',\r\n    padding: '10px 30px',\r\n    boxShadow: 'inset 0px 2px 8px black',\r\n    ':hover': {\r\n      borderTop: 'none',\r\n    },\r\n  }\r\n})\r\n","import React from 'react'\r\nimport { BoxContainer, BoxButton } from '../../elements/box'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { useCombatContext } from '../../contexts/CombatContext'\r\nimport {\r\n  getChecksProbability,\r\n  getSkillDamage,\r\n  getSkillDamageRange,\r\n} from '../../functions'\r\nimport { Button } from '../../elements/button'\r\n\r\nexport const CombatActions = () => {\r\n  const {\r\n    activeCharacter,\r\n    selectedSkill,\r\n    selectedTargets,\r\n    onSkillSelect,\r\n    next,\r\n  } = useCombatContext()\r\n\r\n  if (!activeCharacter) return null\r\n  const perfectChance = selectedSkill\r\n    ? getChecksProbability(activeCharacter, selectedSkill.rolls)\r\n    : 0\r\n  const rawAccuracyChance = selectedSkill\r\n    ? getChecksProbability(activeCharacter, [selectedSkill.accuracy])\r\n    : 0\r\n  const accuracyChance = 1 - (1 - perfectChance) * (1 - rawAccuracyChance)\r\n  const damage = selectedSkill\r\n    ? getSkillDamageRange(selectedSkill, activeCharacter, selectedTargets)\r\n    : '0'\r\n  return (\r\n    <BoxContainer substyle={{ color: 'rgba(255,255,255,0.8)', minWidth: 300 }}>\r\n      <h2 style={{ marginTop: 0, textAlign: 'center' }}>\r\n        {!selectedSkill\r\n          ? 'Choose a Skill'\r\n          : selectedTargets.length === 0\r\n          ? 'Choose a Target'\r\n          : 'Confirm Action'}\r\n      </h2>\r\n      <FlexContainer style={{ justifyContent: 'space-around' }}>\r\n        {activeCharacter.skills.map((skill) => (\r\n          <Button\r\n            onClick={() => onSkillSelect(skill)}\r\n            style={{\r\n              background: '#111',\r\n              borderColor:\r\n                selectedSkill && skill.id === selectedSkill.id\r\n                  ? 'white'\r\n                  : undefined,\r\n            }}\r\n          >\r\n            {skill.name}\r\n          </Button>\r\n        ))}\r\n      </FlexContainer>\r\n      {selectedSkill && (\r\n        <BoxContainer\r\n          style={{ marginTop: 10 }}\r\n          substyle={{ background: '#111' }}\r\n        >\r\n          <FlexContainer $direction='column' style={{ alignItems: 'center' }}>\r\n            <span>Target: {selectedSkill.targetType}</span>\r\n            <span>Perect: ({Math.floor(perfectChance * 100)}%)</span>\r\n            <span>Accuracy: ({Math.floor(accuracyChance * 100)}%)</span>\r\n            {damage !== '0' && <span>Base Damage: ({damage})</span>}\r\n          </FlexContainer>\r\n        </BoxContainer>\r\n      )}\r\n    </BoxContainer>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { ProcessedPartyT } from '../../types'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { PartyCharacter } from '../PartyCharacter'\r\nimport { useCombatContext } from '../../contexts/CombatContext'\r\nimport { BoxButton } from '../../elements/box'\r\nimport { Button, ConfirmButton } from '../../elements/button'\r\n\r\nexport interface CombatPartyPropsT {\r\n  party: ProcessedPartyT\r\n}\r\nexport const CombatParty = (props: CombatPartyPropsT) => {\r\n  const { party } = props\r\n  const {\r\n    activeCharacter,\r\n    selectedSkill,\r\n    selectedTargets,\r\n    onTargetsSelect,\r\n    next,\r\n  } = useCombatContext()\r\n\r\n  const [isHovering, setIsHovering] = useState<boolean>(false)\r\n  return (\r\n    <FlexContainer $direction='column'>\r\n      <FlexContainer\r\n        style={{\r\n          justifyContent: 'space-around',\r\n          cursor: selectedSkill?.targetType === 'group' ? 'pointer' : 'default',\r\n        }}\r\n        onMouseEnter={() => setIsHovering(true)}\r\n        onMouseLeave={() => setIsHovering(false)}\r\n        onClick={() => {\r\n          if (selectedSkill && selectedSkill.targetType === 'group') {\r\n            onTargetsSelect(party)\r\n          }\r\n        }}\r\n      >\r\n        {party.characters.map((c) => (\r\n          <div>\r\n            <PartyCharacter\r\n              hoverable={selectedSkill !== undefined}\r\n              isHovering={isHovering && selectedSkill?.targetType === 'group'}\r\n              selected={\r\n                selectedTargets.find((t) => t.id === c.id) !== undefined\r\n              }\r\n              onClick={() => {\r\n                if (selectedSkill && selectedSkill.targetType === 'single') {\r\n                  onTargetsSelect(c)\r\n                }\r\n              }}\r\n              activeCharacter={activeCharacter}\r\n              character={c}\r\n            />\r\n            {selectedSkill &&\r\n              selectedSkill.targetType === 'single' &&\r\n              selectedTargets.length > 0 &&\r\n              selectedTargets[0].id === c.id && (\r\n                <FlexContainer style={{ justifyContent: 'center' }}>\r\n                  <div style={{ boxShadow: '0px 2px 5px black' }}>\r\n                    <ConfirmButton onClick={() => next()}>\r\n                      Confirm Target\r\n                    </ConfirmButton>\r\n                  </div>\r\n                </FlexContainer>\r\n              )}\r\n          </div>\r\n        ))}\r\n      </FlexContainer>\r\n      {selectedSkill &&\r\n        selectedSkill.targetType === 'group' &&\r\n        selectedTargets.length > 0 && (\r\n          <FlexContainer style={{ justifyContent: 'center' }}>\r\n            <div style={{ boxShadow: '0px 2px 5px black' }}>\r\n              <ConfirmButton\r\n                onClick={() => next()}\r\n                onMouseEnter={() => setIsHovering(true)}\r\n                onMouseLeave={() => setIsHovering(false)}\r\n              >\r\n                Confirm Group Target\r\n              </ConfirmButton>\r\n            </div>\r\n          </FlexContainer>\r\n        )}\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useCombatContext } from '../contexts/CombatContext'\r\nimport { BoxContainer, BoxButton } from '../elements/box'\r\nimport { FlexContainer, FullContainer } from '../elements/flex'\r\nimport { useCombatLogContext } from '../contexts/CombatLogContext'\r\nimport { PartyCharacter } from '../components/PartyCharacter'\r\nimport { RoundResultRenderer } from '../components/RoundResultRenderer'\r\nimport { CombatActions } from '../components/CombatActions'\r\nimport { CombatParty } from '../components/CombatParty'\r\nimport { useModalContext } from '../contexts/ModalContext'\r\nimport { start } from 'repl'\r\n\r\nexport const Combat = () => {\r\n  const {\r\n    party,\r\n    enemyParty,\r\n    activeCharacter,\r\n    queue,\r\n    isDone,\r\n    isRunning,\r\n    start,\r\n  } = useCombatContext()\r\n  const { open, close } = useModalContext()\r\n  const { combatLog } = useCombatLogContext()\r\n  useEffect(() => {\r\n    if (!isRunning) {\r\n      open(\r\n        <div style={{ textAlign: 'center' }}>\r\n          <h1>Combat Start!</h1>\r\n        </div>,\r\n      )\r\n      setTimeout(() => {\r\n        close()\r\n        start()\r\n      }, 500)\r\n    }\r\n  }, [])\r\n  useEffect(() => {\r\n    if (isDone) {\r\n      open(\r\n        <div style={{ textAlign: 'center' }}>\r\n          <h4>Refresh to do combat again</h4>\r\n        </div>,\r\n      )\r\n    }\r\n  }, [isDone])\r\n  if (!isRunning) return null\r\n  if (!activeCharacter) return <span>refresh to do combat again</span>\r\n\r\n  return (\r\n    <FlexContainer style={{ height: '100vh' }}>\r\n      <FlexContainer $full $direction='column'>\r\n        <BoxContainer>\r\n          {queue.map((c) => (\r\n            <span>\r\n              {c.name} {`>`}\r\n            </span>\r\n          ))}\r\n        </BoxContainer>\r\n        <FlexContainer\r\n          $direction='column'\r\n          $full\r\n          style={{ padding: '30px 10px' }}\r\n        >\r\n          <CombatParty party={enemyParty} />\r\n          <FlexContainer $full>\r\n            <FullContainer />\r\n            <FlexContainer $direction='column'>\r\n              <FullContainer />\r\n              <CombatActions />\r\n              <RoundResultRenderer />\r\n              <FullContainer />\r\n            </FlexContainer>\r\n            <FullContainer />\r\n          </FlexContainer>\r\n          <FlexContainer style={{ justifyContent: 'space-around' }}>\r\n            {party.characters.map((c) => (\r\n              <div>\r\n                <PartyCharacter\r\n                  activeCharacter={activeCharacter}\r\n                  character={c}\r\n                />\r\n              </div>\r\n            ))}\r\n          </FlexContainer>\r\n        </FlexContainer>\r\n      </FlexContainer>\r\n\r\n      <BoxContainer\r\n        substyle={{\r\n          minWidth: 300,\r\n          fontSize: 12,\r\n          overflowY: 'auto',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n        }}\r\n      >\r\n        {combatLog.map((line) => line)}\r\n      </BoxContainer>\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React, { useState, useMemo } from 'react'\nimport { CombatContextProvider } from './contexts/CombatContext'\nimport { PartyT } from './types'\nimport { makeParty, processParty } from './functions'\nimport { Combat } from './domain/Combat'\nimport { CombatLogContextProvider } from './contexts/CombatLogContext'\nimport { ModalContextProvider } from './contexts/ModalContext'\n\nexport const App = () => {\n  const [rawEnemyParty, setRawEnemyParty] = useState<PartyT>(makeParty(3))\n  const enemyParty = useMemo(() => processParty(rawEnemyParty), [rawEnemyParty])\n  return (\n    <CombatContextProvider\n      enemyParty={enemyParty}\n      rawEnemyParty={rawEnemyParty}\n      setEnemyParty={setRawEnemyParty}\n    >\n      <CombatLogContextProvider>\n        <ModalContextProvider>\n          <Combat />\n        </ModalContextProvider>\n      </CombatLogContextProvider>\n    </CombatContextProvider>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\nimport './index.css'\n\nimport { Provider as StyletronProvider, DebugEngine } from 'styletron-react'\nimport { Client as Styletron } from 'styletron-engine-atomic'\nimport { Provider as ReduxProvider } from 'react-redux'\nimport { makeStore } from './state'\nimport { PartyContextProvider } from './contexts/PartyContext'\n\nconst debug = process.env.NODE_ENV === 'production' ? void 0 : new DebugEngine()\nconst engine: Styletron = new Styletron()\nconst store = makeStore()\n\nReactDOM.render(\n  <React.StrictMode>\n    <ReduxProvider store={store}>\n      <StyletronProvider value={engine} debug={debug} debugAfterHydration>\n        <PartyContextProvider>\n          <App />\n        </PartyContextProvider>\n      </StyletronProvider>\n    </ReduxProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createStore, combineReducers, compose, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport party from './party'\r\n\r\nexport const makeStore = () =>\r\n  createStore(combineReducers({ party }), compose(applyMiddleware(thunk)))\r\n"],"sourceRoot":""}