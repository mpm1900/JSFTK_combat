{"version":3,"sources":["icons/svg/delapouite/heart-beats.svg","icons/svg/delapouite/biceps.svg","icons/svg/lorc/brain.svg","icons/svg/delapouite/eye-target.svg","icons/svg/lorc/juggler.svg","icons/svg/lorc/sprint.svg","icons/svg/lorc/clover.svg","icons/svg/delapouite/convergence-target.svg","icons/svg/lorc/star-swirl.svg","icons/svg/sbed/targeted.svg","icons/svg/lorc/dodging.svg","icons/svg/lorc/shield-reflect.svg","icons/svg/lorc/high-shot.svg","icons/svg/delapouite/shield-impact.svg","icons/svg/lorc/fire-zone.svg","icons/svg/lorc/heavy-timer.svg","icons/svg/lorc/ubisoft-sun.svg","icons/svg/lorc/flat-hammer.svg","icons/svg/lorc/hammer-drop.svg","icons/svg/lorc/bordered-shield.svg","icons/svg/delapouite/skills.svg","icons/svg/lorc/knapsack.svg","icons/svg/lorc/split-cross.svg","assets/img/flat-forestred.jpg","util/getRandom.ts","util/noneg.ts","objects/Stats.ts","functions/Entity.ts","objects/Status.ts","objects/Traits.ts","functions/Stats.ts","functions/Traits.ts","functions/makeCheck.ts","objects/skills/smash.ts","objects/skills/shockwave.ts","objects/weapons/blacksmiths_hammer.ts","objects/skills/shot.ts","objects/skills/snipe_shot.ts","objects/weapons/hunting_bow.ts","objects/skills/surge.ts","objects/skills/area_blast.ts","objects/skills/Dazzle.ts","objects/weapons/scholars_book.ts","objects/Weapon.ts","objects/skills/taunt.ts","objects/armor/simple_iron_shield.ts","objects/armor/explorers_cloak.ts","objects/armor/explorers_hat.ts","objects/armor/fur_armor.ts","objects/armor/adventure_boots.ts","objects/armor/adventure_cloak.ts","objects/armor/fur_boots.ts","objects/Armor.ts","objects/skills/enemy/bite.ts","objects/skills/enemy/slap.ts","objects/skills/enemy/impale.ts","objects/enemies/index.ts","objects/enemies/timberwolf.ts","objects/enemies/vale_imp.ts","objects/enemies/beastman.ts","functions/Character.ts","functions/Weapon.ts","functions/Roll.ts","functions/Party.ts","objects/Skills.ts","functions/Damage.ts","functions/Skill.ts","objects/Party.ts","functions/CombatCommitter.ts","state/party/index.ts","state/util.ts","hooks/useActions.ts","contexts/PartyContext/index.tsx","types/CombatQueue.ts","contexts/CombatContext/index.tsx","functions/AI.ts","elements/flex.ts","elements/monospace.tsx","contexts/CombatLogContext/util.tsx","contexts/CombatLogContext/index.tsx","components/Hover/index.tsx","elements/box.tsx","components/Tooltip/index.tsx","components/Gauge/index.tsx","elements/badge.tsx","components/Icon/index.tsx","icons/maps.tsx","components/TagPreview/index.tsx","components/PartyCharacter/index.tsx","elements/button.tsx","components/CombatPlayerParty/index.tsx","contexts/ModalContext/reducer.ts","contexts/ModalContext/index.tsx","components/SkillChecks/index.tsx","components/RoundResultRenderer/index.tsx","components/SkillPreview/index.tsx","components/CombatActions/index.tsx","components/EnemyCharacter/index.tsx","components/CombatParty/index.tsx","components/CombatQueue/index.tsx","components/CombatLog/index.tsx","domain/Combat.tsx","App.tsx","serviceWorker.ts","index.tsx","state/index.ts"],"names":["module","exports","getRandom","items","Math","floor","random","length","noneg","value","ZERO_STATS","vigor","strength","intelligence","perception","talent","agility","luck","armor","resistance","evasion","healthOffset","health","healthRegen","criticalChance","damageModifier","CLASS_STARTING_STATS","blacksmith","hunter","scholar","bard","enemy","makeEntity","name","id","v4","STATUS_EFFECTS","bleeding","type","canStack","duration","traits","commitChance","committedTraits","damage","stats","burning","frozen","poisoned","TAG_EFFECTS","targeted","description","dazed","evasive","ZERO_TRAIT","combineStats","reduce","p","c","combineTraits","getTraitsFromObjects","parents","makeCheck","key","offset","SMASH","targetType","isBasicAttack","rolls","perfectSplash","perfectPierce","perfectStatus","perfectTags","SHOCKWAVE","BLACKSMITHS_HAMMER","rarity","twoHand","attackType","skills","SHOT","SNIPE_SHOT","HUNTING_BOW","SURGE","AREA_BLAST","DAZZLE","SCHOLARS_BOOK","CLASS_STARTING_WEAPONS","TAUNT","SIMPLE_IRON_SHIELD","EXPLORERS_CLOAK","EXPLORERS_HAT","FUR_ARMOR","ADVENTURE_BOOTS","ADVENTURE_CLOAK","FUR_BOOTS","CLASS_STARTING_ARMOR","BITE","SLAP","IMPALE","ALL_ENEMIES","isCharacter","partyId","level","class","tags","status","weapon","checkForProcessedCharacter","character","processed","Error","getStatusEffects","map","processCharacter","getTraits","combinedTrait","processWeapon","statusEffects","tag","baseTag","getTags","getSkillsFromObjects","getSkills","hVigor","startingHealth","rawStats","dead","makeCharacter","characterClass","makeEnemy","staicEnemy","decrementStatusDurations","filter","addMultipleStatus","statusTypes","char","statusType","statusEffect","find","s","findStatus","t","addStatus","getCharacterStat","statValue","getDamageResistance","damageType","findTag","tagType","hasTag","includes","addMultipleTags","addTag","resolveCheck","check","roll","DiceRoll","input","result","total","averageTotal","maxTotal","minTotal","output","isParty","e","checkForProcessedParty","party","characters","forEach","makeParty","characterCount","Array","fill","_","i","findCharacterInParty","updateCharacter","characterId","updater","processParty","PERFECT_DISPLAY_INFO","splash","pierce","getSplashDamage","rawDamage","resolveSkillTarget","target","makeSkillTarget","undefined","getPerfectText","skill","perfectKeys","base","getPerfectKeys","getSkillDamage","splashDamage","res","pre","text","source","damageResistances","round","getReflectedDamage","damageReflectTag","getSkillResults","targets","sourceResult","rollResults","passedCount","r","perfect","results","every","didAllPass","criticalHitResult","criticalSuccess","accuracySuccess","addedStatus","addedTags","getSourceSkillResult","dodgeResult","isEvasive","dodgeSuccess","totalDamage","reflectedDamage","healthRegenMaximum","regeneratedHealth","blockedDamage","willDie","getTargetSkillResult","PLAYER_PARTY_ID","localUpdater","commitSkillResults","enemyParty","index","sourceParty","targetParty","localUpdate","splashDamageResistance","actionCreators","payload","actions","updateParty","dispatch","upsertCharacter","deleteCharacter","core","state","action","jack","makeReducer","initialState","coreFn","usePartyActions","useDispatch","useMemo","bindActionCreators","useActions","defaultContextValue","rawParty","findCharacter","findRawCharacter","PartyContext","React","createContext","PartyContextProvider","props","children","useSelector","Provider","makeCombatQueue","sort","a","b","getMin","queue","Object","keys","Number","POSITIVE_INFINITY","consolidateQueue","min","getFirst","defaultValue","activeCharacter","selectedSkill","selectedTargets","roundResults","activeRound","isRunning","isDone","isRenderingResult","onSkillSelect","onTargetsSelect","start","next","commit","CombatContext","useCombatContext","useContext","CombatContextProvider","setEnemyParty","onRequestNewParty","resultCommitter","useState","setIsRunning","setIsDone","setIsRenderingResult","setQueue","roundId","setRoundId","setRoundResults","setActiveRound","selectedTarget","setSelectedTarget","setSelectedSkill","useCallback","useEffect","parties","updatedCharacters","validateQueue","shiftQueue","playerParty","targetedCharacters","getSkillTargetOptions","getAIAction","execEnemyTurn","alert","nextTarget","roundTarget","FlexContainer","styled","display","flexDirection","$direction","flex","$full","FullContainer","Monospace","fontFamily","fontWeight","Monodiv","Span","color","style","SkillSpan","CombatLogContext","combatLog","useCombatLogContext","CombatLogContextProvider","setCombatLog","deadLog","setDeadLog","NameSpan","isUserParty","isEnemyParty","NameSpanBuilder","log","line","setTimeout","dLog","latestRounds","baseRound","subTarget","Hover","delay","internalHovering","setInternalHovering","isHovering","setIsHovering","guid","setGuid","useLayoutEffect","onMouseEnter","preventDefault","stopPropagation","onMouseLeave","BoxContainer","substyle","Element","rest","border","boxSizing","background","padding","boxShadow","Tooltip","direction","tagName","arrow","HoverToolTip","isOpen","Gauge","max","height","percentage","content","borderLeft","position","borderColor","left","maxWidth","minWidth","textShadow","backgroundColor","alignItems","justifyContent","transition","lineHeight","right","top","fontSize","overflow","Div","transform","Badge","withWrapper","$absolute","$size","width","borderRadius","$color","$top","bottom","$bottom","$right","$left","HoverBadge","badgeProps","distance","Icon","src","size","shadow","onClick","loading","setLoading","svg","setSvg","fetch","then","className","dangerouslySetInnerHTML","__html","STATI_ICONS","Vigor","Strength","Brain","Awareness","Juggler","Agility","Clover","accuracy","Accuracy","TAG_ICONS","Dazed","Targeted","Evasive","DamageReflection","SKILL_ICONS","Shot","SnipeShot","Surge","AreaBast","Dazzle","Smash","Shockwave","Taunt","TagPreview","marginBottom","ResourceE","withStyle","textAlign","Wrapper","$selected","$active","$hoverable","margin","$isHovering","CharacterStat","statKey","getStatColor","marginRight","PartyCharacter","hoverable","selected","opacity","borderWidth","cursor","borderRight","alt","marginTop","paddingLeft","borderBottom","Inventory","Details","Button","outline","ConfirmButton","borderTop","CombatPlayerParty","contents","callback","blocking","styles","OPEN","CLOSE","reducer","coreFunction","ModalContext","open","close","setBlocking","setPayload","setContents","setCallback","setStyles","useModalContext","getContextValue","Modal","setAppElement","ModalContextProvider","reducerValue","useReducer","context","onRequestClose","modal","overlay","SkillChecks","label","SkillCheck","getColor","X","RoundResultRenderer","isModal","setIsOpen","RoundResult","rounds","stream","Kefir","sequentially","onValue","onEnd","later","SkillPreview","perfectChance","damageString","getSkillDamageRange","CombatActions","EnemyCharacter","CombatParty","CombatQueue","first","sortedIds","getSortedIds","bigList","count","NEGATIVE_INFINITY","getMax","widthCoef","CombatLog","scrollRef","useRef","current","scrollIntoView","behavior","ref","Combat","ForestBg","backgroundSize","App","rawEnemyParty","setRawEnemyParty","Boolean","window","location","hostname","match","engine","Styletron","store","createStore","combineReducers","compose","applyMiddleware","thunk","ReactDOM","render","StrictMode","debug","debugAfterHydration","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mFAAAA,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,wC,oBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,gD,oBCA3CD,EAAOC,QAAU,IAA0B,wC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,4C,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,2C,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,6C,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,4C,6OCA9BC,EAAY,SAAIC,GAAJ,OACvBA,EAAMC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,UCD5BC,EAAQ,SAACC,GAAD,OAAoBA,EAAQ,EAAIA,EAAQ,G,gBCEhDC,EAAqB,CAChCC,MAAO,EACPC,SAAU,EACVC,aAAc,EACdC,WAAY,EACZC,OAAQ,EAERC,QAAS,EACTC,KAAM,EACNC,MAAO,EACPC,WAAY,EACZC,QAAS,EAETC,aAAc,EACdC,OAAQ,EACRC,YAAa,EACbC,eAAgB,EAChBC,eAAgB,GAGLC,EAAwD,CACnEC,WAAY,CACVf,SAAU,GACVD,MAAO,GACPE,aAAc,GACdC,WAAY,GACZC,OAAQ,GACRC,QAAS,GACTC,KAAM,GACNC,MAAO,EACPC,WAAY,EACZC,QAAS,EACTC,aAAc,EACdC,OAAQ,EACRC,YAAa,EACbC,eAAgB,EAChBC,eAAgB,GAElBG,OAAQ,CACNhB,SAAU,GACVD,MAAO,GACPE,aAAc,GACdC,WAAY,GACZC,OAAQ,GACRC,QAAS,GACTC,KAAM,GACNC,MAAO,EACPC,WAAY,EACZC,QAAS,GACTC,aAAc,EACdC,OAAQ,EACRC,YAAa,EACbC,eAAgB,EAChBC,eAAgB,GAElBI,QAAS,CACPjB,SAAU,GACVD,MAAO,GACPE,aAAc,GACdC,WAAY,GACZC,OAAQ,GACRC,QAAS,GACTC,KAAM,GACNC,MAAO,EACPC,WAAY,EACZC,QAAS,GACTC,aAAc,EACdC,OAAQ,EACRC,YAAa,EACbC,eAAgB,EAChBC,eAAgB,GAElBK,KAAM,CACJlB,SAAU,GACVD,MAAO,GACPE,aAAc,GACdC,WAAY,GACZC,OAAQ,GACRC,QAAS,GACTC,KAAM,GACNC,MAAO,EACPC,WAAY,EACZC,QAAS,GACTC,aAAc,EACdC,OAAQ,EACRC,YAAa,EACbC,eAAgB,EAChBC,eAAgB,GAElBM,MAAOrB,G,SCzFIsB,EAAa,eAACC,EAAD,uDAAgB,GAAhB,MAAwB,CAChDC,GAAIC,cACJF,SCCWG,EAA+C,CAC1DC,SAAS,eACJL,EAAW,YADR,CAENM,KAAM,WACNC,UAAU,EACVC,SANoB,EAOpBC,OAAQ,GACRC,aAAc,GACdC,gBAAiB,CACf,CACEH,SAXgB,EAYhBI,OAAQ,EACRC,MAAM,eACDnC,EADA,CAEHW,cAAe,SAKvByB,QAAQ,eACHd,EAAW,WADT,CAELM,KAAM,UACNC,UAAU,EACVC,SAxBoB,EAyBpBC,OAAQ,GACRC,aAAc,IACdC,gBAAiB,CACf,CACEH,SA7BgB,EA8BhBI,OAAQ,EACRC,MAAM,eACDnC,EADA,CAEHW,cAAe,SAKvB0B,OAAO,eACFf,EAAW,UADV,CAEJM,KAAM,SACNC,UAAU,EACVC,SA1CoB,EA2CpBC,OAAQ,CACN,CACED,SA7CgB,EA8ChBI,OAAQ,EACRC,MAAM,eACDnC,EADA,CAEHe,eAAgB,QAItBiB,aAAc,EACdC,gBAAiB,KAEnBK,SAAS,eACJhB,EAAW,YADR,CAENM,KAAM,WACNC,UAAU,EACVC,SA5DoB,EA6DpBC,OAAQ,CACN,CACED,SA/DgB,EAgEhBI,OAAQ,EACRC,MAAM,eACDnC,EADA,CAEHE,UAAW,EACXC,cAAe,EACfC,YAAa,EACbC,QAAS,MAIf2B,aAAc,IACdC,gBAAiB,CACf,CACEH,SA7EgB,EA8EhBI,OAAQ,EACRC,MAAM,eACDnC,EADA,CAEHW,cAAe,SAOZ4B,EAAsC,CACjDC,SAAU,CACRZ,KAAM,WACNE,SAAU,EACVf,eAAgB,EAChB0B,YAAa,oDAEfC,MAAO,CACLd,KAAM,QACNE,SAAU,EACVf,eAAgB,EAChB0B,YAAa,wDAEfE,QAAS,CACPf,KAAM,UACNE,SAAU,EACVf,eAAgB,EAChB0B,YAAa,gEAEf,oBAAqB,CACnBb,KAAM,oBACNE,SAAU,EACVf,eAAgB,GAChB0B,YAAa,yDChHJG,EAAqB,CAChCV,OAAQ,EACRJ,UAAW,EACXK,MAAOnC,GCHI6C,EAAe,WAAiC,IAAD,uBAA5BV,EAA4B,yBAA5BA,EAA4B,gBAC1D,OAAOA,EAAMW,QACX,SAACC,EAAGC,GAAJ,MAAW,CACT/C,MAAO8C,EAAE9C,MAAQ+C,EAAE/C,MACnBC,SAAU6C,EAAE7C,SAAW8C,EAAE9C,SACzBC,aAAc4C,EAAE5C,aAAe6C,EAAE7C,aACjCC,WAAY2C,EAAE3C,WAAa4C,EAAE5C,WAC7BC,OAAQ0C,EAAE1C,OAAS2C,EAAE3C,OACrBC,QAASyC,EAAEzC,QAAU0C,EAAE1C,QACvBC,KAAMwC,EAAExC,KAAOyC,EAAEzC,KACjBC,MAAOuC,EAAEvC,MAAQwC,EAAExC,MACnBC,WAAYsC,EAAEtC,WAAauC,EAAEvC,WAC7BC,QAASqC,EAAErC,QAAUsC,EAAEtC,QACvBI,eAAgBiC,EAAEjC,eAAiBkC,EAAElC,eACrCC,eAAgBgC,EAAEhC,eAAiBiC,EAAEjC,eACrCJ,aAAcoC,EAAEpC,aAAeqC,EAAErC,aACjCC,OAAQmC,EAAEnC,OAASoC,EAAEpC,OACrBC,YAAakC,EAAElC,YAAcmC,EAAEnC,eAEjCb,IClBSiD,EAAgB,WAAkC,IAAD,uBAA7BlB,EAA6B,yBAA7BA,EAA6B,gBAC5D,OAAOA,EAAOe,QACZ,SAACC,EAAGC,GAAJ,MAAW,CACTd,OAAQa,EAAEb,OAASc,EAAEd,OACrBC,MAAOU,EAAaE,EAAEZ,MAAOa,EAAEb,OAC/BL,UAAW,KAEbc,IAISM,EAAuB,SAACC,GACnC,OAAOA,EAAQL,QAAO,SAACC,EAAGC,GACxB,MAAM,GAAN,mBAAWD,GAAX,YAAiBC,EAAEjB,WAClB,KChBQqB,EAAY,SAACC,EAAmBC,GAApB,MAAiD,CACxED,MACAC,WCAWC,EAAa,eACrBjC,EAAW,SADU,CAExBP,eAAgB,EAChByC,WAAY,SACZtB,QAAQ,EACRuB,eAAe,EACfC,MAAO,CAACN,EAAU,YAAaA,EAAU,YAAaA,EAAU,aAChEO,eAAe,EACfC,eAAe,EACfC,cAAe,GACfC,YAAa,KCVFC,EAAiB,eACzBzC,EAAW,aADc,CAE5BP,eAAgB,EAChByC,WAAY,SACZtB,QAAQ,EACRuB,eAAe,EACfC,MAAO,CACLN,EAAU,YAAa,IACvBA,EAAU,YAAa,IACvBA,EAAU,YAAa,IACvBA,EAAU,YAAa,KAEzBO,eAAe,EACfC,eAAe,EACfC,cAAe,GACfC,YAAa,KCdFE,EAA2B,eACnC1C,EAAW,uBADwB,CAEtCM,KAAM,SACNqC,OAAQ,SACRC,SAAS,EACTC,WAAY,QACZjC,OAAQ,CAAEN,KAAM,WAAYM,OAAQ,IACpCH,OAAQ,GACRqC,OAAQ,CAACb,EAAOQ,KCTLM,EAAY,eACpB/C,EAAW,QADS,CAGvBP,eAAgB,EAChByC,WAAY,SACZtB,QAAQ,EACRuB,eAAe,EACfC,MAAO,CACLN,EAAU,cACVA,EAAU,cACVA,EAAU,eAEZO,eAAe,EACfC,eAAe,EACfC,cAAe,GACfC,YAAa,KCfFQ,EAAkB,eAC1BhD,EAAW,cADe,CAE7BP,eAAgB,EAChByC,WAAY,SACZtB,QAAQ,EACRuB,eAAe,EACfC,MAAO,CACLN,EAAU,cAAe,IACzBA,EAAU,cAAe,IACzBA,EAAU,cAAe,KAE3BO,eAAe,EACfC,eAAe,EACfC,cAAe,GACfC,YAAa,KCZFS,EAAoB,eAC5BjD,EAAW,uBADiB,CAE/BM,KAAM,MACNqC,OAAQ,SACRC,SAAS,EACTC,WAAY,SACZjC,OAAQ,CAAEN,KAAM,WAAYM,OAAQ,GACpCH,OAAQ,CACN,CACED,UAAW,EACXK,MAAM,eACDnC,EADA,CAEHU,QAAS,IAEXwB,OAAQ,IAGZkC,OAAQ,CAACC,EAAMC,KCnBJE,EAAa,eACrBlD,EAAW,SADU,CAExBP,gBAAiB,GACjByC,WAAY,SACZtB,QAAQ,EACRuB,eAAe,EACfC,MAAO,CACLN,EAAU,gBACVA,EAAU,gBACVA,EAAU,iBAEZO,eAAe,EACfC,eAAe,EACfC,cAAe,GACfC,YAAa,KCdFW,EAAkB,eAC1BnD,EAAW,cADe,CAE7BP,gBAAiB,GACjByC,WAAY,QACZtB,QAAQ,EACRuB,eAAe,EACfC,MAAO,CACLN,EAAU,gBAAiB,GAC3BA,EAAU,gBAAiB,GAC3BA,EAAU,gBAAiB,IAE7BO,eAAe,EACfC,eAAe,EACfC,cAAe,GACfC,YAAa,KCdFY,EAAc,eACtBpD,EAAW,UADW,CAEzBP,eAAgB,EAChByC,WAAY,SACZtB,QAAQ,EACRuB,eAAe,EACfC,MAAO,CACLN,EAAU,gBACVA,EAAU,gBACVA,EAAU,iBAEZO,eAAe,EACfC,eAAe,EACfC,cAAe,GACfC,YAAa,CAAC,CAAElC,KAAM,QAASE,SAAU,MCZ9B6C,EAAsB,eAC9BrD,EAAW,kBADmB,CAEjCM,KAAM,OACNqC,OAAQ,SACRC,SAAS,EACTC,WAAY,SACZjC,OAAQ,CAAEN,KAAM,QAASM,OAAQ,GACjCH,OAAQ,GACRqC,OAAQ,CAACI,EAAOC,EAAYC,KCTjBE,EAGR,CACH3D,WAAY+C,EACZ9C,OAAQqD,EACRpD,QAASwD,EACTvD,KAAM4C,GCRKa,EAAa,eACrBvD,EAAW,SADU,CAExBP,eAAgB,EAChByC,WAAY,OACZtB,QAAQ,EACRuB,eAAe,EACfC,MAAO,CAACN,EAAU,SAAUA,EAAU,UACtCO,eAAe,EACfC,eAAe,EACfC,cAAe,GACfC,YAAa,CACX,CACElC,KAAM,WACNE,SAAU,MCZHgD,EAA0B,eAClCxD,EAAW,sBADuB,CAErC2C,OAAQ,SACRrC,KAAM,SACNG,OAAQ,CACN,CACED,UAAW,EACXK,MAAM,eACDnC,EADA,CAEHQ,MAAO,IAET0B,OAAQ,IAGZkC,OAAQ,CAACS,KCfEE,EAAuB,eAC/BzD,EAAW,oBADoB,CAElC2C,OAAQ,WACRrC,KAAM,cACNG,OAAQ,CACN,CACED,UAAW,EACXK,MAAM,eACDnC,EADA,CAEHQ,MAAO,EACPC,WAAY,EACZC,QAAS,EACTN,WAAY,EACZC,QAAS,IAEX6B,OAAQ,IAGZkC,OAAQ,KClBGY,EAAqB,eAC7B1D,EAAW,kBADkB,CAEhC2C,OAAQ,SACRrC,KAAM,MACNG,OAAQ,CACN,CACED,UAAW,EACXK,MAAM,eACDnC,EADA,CAEHS,WAAY,EACZC,QAAS,EACTN,WAAY,IAEd8B,OAAQ,IAGZkC,OAAQ,KChBGa,EAAiB,eACzB3D,EAAW,aADc,CAE5B2C,OAAQ,WACRrC,KAAM,cACNG,OAAQ,CACN,CACED,UAAW,EACXK,MAAM,eACDnC,EADA,CAEHQ,MAAO,EACPC,WAAY,EACZG,OAAQ,EACRC,YAAa,EACbZ,MAAO,IAETiC,OAAQ,IAGZkC,OAAQ,KClBGc,EAAuB,eAC/B5D,EAAW,mBADoB,CAElC2C,OAAQ,SACRrC,KAAM,WACNG,OAAQ,CACN,CACED,UAAW,EACXK,MAAM,eACDnC,EADA,CAEHQ,MAAO,EACPE,QAAS,EACTJ,QAAS,IAEX4B,OAAQ,IAGZkC,OAAQ,KChBGe,EAAuB,eAC/B7D,EAAW,mBADoB,CAElC2C,OAAQ,WACRrC,KAAM,cACNG,OAAQ,CACN,CACED,UAAW,EACXK,MAAM,eACDnC,EADA,CAEHQ,MAAO,EACPC,WAAY,EACZL,WAAY,EACZC,QAAS,IAEX6B,OAAQ,IAGZkC,OAAQ,KCjBGgB,EAAiB,eACzB9D,EAAW,aADc,CAE5B2C,OAAQ,SACRrC,KAAM,WACNG,OAAQ,CACN,CACED,UAAW,EACXK,MAAM,eACDnC,EADA,CAEHQ,MAAO,EACPC,WAAY,EACZI,YAAa,EACbZ,MAAO,IAETiC,OAAQ,IAGZkC,OAAQ,KCZGiB,EAA0D,CACrEpE,WAAY,CAAC6D,EAAoBG,EAAWG,GAC5ClE,OAAQ,CAACiE,EAAiBD,GAC1B/D,QAAS,CAAC4D,EAAiBC,GAC3B5D,KAAM,GACNC,MAAO,ICVIiE,EAAY,eACpBhE,EAAW,QADS,CAEvBP,eAAgB,EAChByC,WAAY,SACZtB,QAAQ,EACRuB,eAAe,EACfC,MAAO,CACLN,EAAU,cACVA,EAAU,cACVA,EAAU,eAEZO,eAAe,EACfC,eAAe,EACfC,cAAe,GACfC,YAAa,KCdFyB,EAAY,eACpBjE,EAAW,QADS,CAEvBP,eAAgB,EAChByC,WAAY,SACZtB,QAAQ,EACRuB,eAAe,EACfC,MAAO,CACLN,EAAU,cACVA,EAAU,cACVA,EAAU,eAEZO,eAAe,EACfC,eAAe,EACfC,cAAe,GACfC,YAAa,KCdF0B,EAAc,eACtBlE,EAAW,UADW,CAEzBP,eAAgB,EAChByC,WAAY,SACZtB,QAAQ,EACRuB,eAAe,EACfC,MAAO,CAACN,EAAU,YAAaA,EAAU,YAAaA,EAAU,aAChEO,eAAe,EACfC,eAAe,EACfC,cAAe,GACfC,YAAa,KCTF2B,EAAoC,CCDvB,WACxB,OAAO,eACFnE,EAAW,cADhB,CAEEoE,aAAa,EACbC,QAAS,GACTC,MAAO,EACPC,MAAO,QACP1D,MAAO,CACLlC,OAAQ,GACRC,SAAU,GACVC,aAAc,GACdC,WAAY,GACZC,OAAQ,GACRC,QAAS,GACTC,KAAM,GACNC,MAAO,EACPC,WAAY,EACZC,QAAS,GACTC,aAAc,EACdC,QAAS,EACTC,YAAa,EACbC,eAAgB,EAChBC,eAAgB,GAElBgB,OAAQ,GACR+D,KAAM,GACNtF,MAAO,GACPuF,OAAQ,GACRC,OAAO,eACF1E,EAAW,cADV,CAEJ2C,OAAQ,SACRrC,KAAM,aACNsC,SAAS,EACTC,WAAY,QACZjC,OAAQ,CACNA,OAAQ,EACRN,KAAM,YAERG,OAAQ,GACRqC,OAAQ,CAACkB,QCvCS,WACtB,OAAO,eACFhE,EAAW,YADhB,CAEEoE,aAAa,EACbC,QAAS,GACTC,MAAO,EACPC,MAAO,QACP1D,MAAO,CACLlC,OAAQ,GACRC,SAAU,GACVC,aAAc,GACdC,WAAY,GACZC,OAAQ,GACRC,QAAS,GACTC,KAAM,GACNC,MAAO,EACPC,WAAY,EACZC,QAAS,GACTE,OAAQ,EACRD,aAAc,EACdE,YAAa,EACbC,eAAgB,EAChBC,eAAgB,GAElBgB,OAAQ,GACR+D,KAAM,CACJ,CACEhE,UAAW,EACXF,KAAM,YAGVpB,MAAO,GACPuF,OAAQ,GACRC,OAAO,eACF1E,EAAW,aADV,CAEJ2C,OAAQ,SACRrC,KAAM,YACNsC,SAAS,EACTC,WAAY,QACZjC,OAAQ,CACNA,OAAQ,EACRN,KAAM,YAERG,OAAQ,GACRqC,OAAQ,CAACmB,QC5CS,WACtB,OAAO,eACFjE,EAAW,YADhB,CAEEoE,aAAa,EACbC,QAAS,GACTC,MAAO,EACPC,MAAO,QACP1D,MAAO,CACLlC,OAAQ,GACRC,SAAU,GACVC,aAAc,GACdC,WAAY,GACZC,OAAQ,GACRC,QAAS,GACTC,KAAM,GACNC,MAAO,EACPC,WAAY,EACZC,QAAS,GACTC,aAAc,EACdC,OAAQ,EACRC,YAAa,EACbC,eAAgB,EAChBC,eAAgB,GAElBgB,OAAQ,GACR+D,KAAM,GACNtF,MAAO,GACPuF,OAAQ,GACRC,OAAO,eACF1E,EAAW,kBADV,CAEJ2C,OAAQ,SACRrC,KAAM,QACNsC,SAAS,EACTC,WAAY,QACZjC,OAAQ,CACNA,OAAQ,EACRN,KAAM,YAERG,OAAQ,GACRqC,OAAQ,CAACoB,SCZFS,EAA6B,SAACC,GACzC,GAAKA,EAAkCC,UACrC,MAAM,IAAIC,MAAM,oCAMPC,EAAmB,SAACH,GAC/B,OAAOA,EAAUH,OAAOO,KAAI,SAACP,GAAD,OAAYrE,EAAeqE,EAAOnE,UA4BnD2E,EAAmB,SAC9BL,GAEAD,EAA2BC,GAC3B,IAAMnE,EApBiB,SAACmE,GAQxB,OAPAD,EAA2BC,GAClB,sBACJA,EAAUnE,QADN,YAEJmE,EAAUF,OAAOjE,QAFb,YAGJmB,EAAqBgD,EAAU1F,QAH3B,YAIJ0C,EAAqBmD,EAAiBH,MAc5BM,CAAUN,GACnBO,EAAgBxD,EAAa,WAAb,cAAiBlB,IACjCI,EAAgBU,EAAaqD,EAAU/D,MAAOsE,EAActE,OAC5D6D,ECzEqB,SAACA,GAC5B,IAAM9D,EAAS8D,EAAOjE,OAAOe,QAAO,SAACC,EAAGC,GACtC,OAAO,eACFD,EADL,CAEEb,OAAQa,EAAEb,OAASc,EAAEd,WAEtB8D,EAAO9D,QACV,OAAO,eACF8D,EADL,CAEE9D,SACAiE,WAAW,ID+DEO,CAAcR,EAAUF,QACjCW,EAAgBN,EAAiBH,GACjCJ,EAnCe,SAACI,GACtB,OAAOA,EAAUJ,KAAKQ,KAAI,SAACM,GACzB,IAAMC,EAAUtE,EAAYqE,EAAIhF,MAChC,OAAO,eACFiF,EADL,CAEE/E,SAAU8E,EAAI9E,cA8BLgF,CAAQZ,GACf9B,EAfiB,SAAC8B,GAExB,OADAD,EAA2BC,GACrB,GAAN,mBAAWA,EAAUF,OAAO5B,QAA5B,YAAuC2C,GAAqBb,EAAU1F,SAavDwG,CAAUd,GACnBe,EACJjG,EAAqBkF,EAAUL,OAAO5F,OAASiG,EAAU/D,MAAMlC,MAC3DiH,EAAiB,GAAKxH,KAAKC,MAAM,GAAMsH,GACvCrG,EACJlB,KAAKC,MACHuH,EAAiBhB,EAAUN,MAAQ,GAAMM,EAAUN,MAAQzD,EAAMlC,OAC/DkC,EAAMvB,OAEZ,OAAO,eACFsF,EADL,CAEEtF,SACAuB,QACAgF,SAAUjB,EAAU/D,MACpB6D,SACAW,gBACAb,OACA1B,SACAgD,KAAMjF,EAAMxB,cAAgBC,EAC5BuF,WAAW,KAIFkB,GAAgB,SAC3BC,GAEgB,IADhB3B,EACe,uDADG,GAElB,OAAO,eACFrE,IADL,CAEEoE,aAAa,EACbC,UACAC,MAAO,EACPC,MAAOyB,EACPnF,MAAOnB,EAAqBsG,GAC5BvF,OAAQ,GACR+D,KAAM,GACNE,OAAQpB,EAAuB0C,GAC/B9G,MAAO6E,EAAqBiC,GAC5BvB,OAAQ,MAICwB,GAAY,WACvB,IAAMC,EAAahI,EAAUiG,GAC7B,OAAI+B,EAAmBA,IAChBH,GAAc7H,EAAU,CAAC,aAAc,SAAU,cAwB7CiI,GAA2B,SAACvB,GAEvC,OADAD,EAA2BC,GACpB,eACFA,EADL,CAEEJ,KAAMI,EAAUJ,KACbQ,KAAI,SAACM,GAAD,sBAAeA,EAAf,CAAoB9E,SAAU8E,EAAI9E,SAAW,OACjD4F,QAAO,SAACd,GAAD,OAA0B,IAAjBA,EAAI9E,YACvBiE,OAAQG,EAAUH,OACfO,KAAI,SAACP,GAAD,sBAAkBA,EAAlB,CAA0BjE,SAAUiE,EAAOjE,SAAW,OAC1D4F,QAAO,SAAC3B,GAAD,OAAgC,IAApBA,EAAOjE,eA6BpB6F,GAAoB,SAC/BzB,EACA0B,GAEA,OAAOA,EAAY9E,QACjB,SAAC+E,EAAMC,GACL,OA1BmB,SAAC5B,EAAuB4B,GAC/C,IAAMC,EAAerG,EAAeoG,GAEpC,OANwB,SAAC5B,EAAuB4B,GAChD,OAAO5B,EAAUH,OAAOiC,MAAK,SAACC,GAAD,OAAOA,EAAErG,OAASkG,KAIxBI,CAAWhC,EAAW4B,KACtBC,EAAalG,SAC3B,eACFqE,EADL,CAEEH,OAAO,GAAD,mBACDG,EAAUH,OAAO2B,QAAO,SAACS,GAAD,OAAOA,EAAEvG,OAASkG,MADzC,CAEJ,CAAElG,KAAMkG,EAAYhG,SAAUiG,EAAajG,cAI1C,eACFoE,EADL,CAEEH,OAAO,GAAD,mBACDG,EAAUH,QADT,CAEJ,CAAEnE,KAAMkG,EAAYhG,SAAUiG,EAAajG,cAUpCsG,CAAUP,EAAMC,KAFpB,eAIA5B,KAIImC,GAAmB,SAACnC,EAAuBoC,GAEtD,OAD0BA,EAAUjF,IAAM6C,EAAU/D,MAAMmG,EAAUjF,KAAO,IAC/CiF,EAAUhF,QAAU,IAGrCiF,GAAsB,SACjCrC,EACAsC,GAEA,MAAmB,aAAfA,EAAkCtC,EAAU/D,MAAM3B,MACnC,UAAfgI,EAA+BtC,EAAU/D,MAAM1B,WAC5C,GAGIgI,GAAU,SAACvC,EAAuBwC,GAAxB,OACrBxC,EAAUJ,KAAKkC,MAAK,SAACG,GAAD,OAAOA,EAAEvG,OAAS8G,MAE3BC,GAAS,SAACzC,EAAuBwC,GAAxB,OACpBxC,EAAUJ,KAAKQ,KAAI,SAAC6B,GAAD,OAAOA,EAAEvG,QAAMgH,SAASF,IAmBhCG,GAAkB,SAC7B3C,EACAJ,GAEA,OAAOA,EAAKhD,QACV,SAAC+E,EAAWjB,GACV,OAvBgB,SACpBV,EACAU,GAIA,OAFoB6B,GAAQvC,EAAWU,EAAIhF,MAGlC,eACFsE,EADL,CAEEJ,KAAK,GAAD,mBAAMI,EAAUJ,KAAK4B,QAAO,SAACS,GAAD,OAAOA,EAAEvG,OAASgF,EAAIhF,SAAlD,CAAyDgF,MAG1D,eACFV,EADL,CAEEJ,KAAK,GAAD,mBAAMI,EAAUJ,MAAhB,CAAsBc,MASjBkC,CAAOjB,EAAMjB,KAFjB,eAIAV,KE9OI6C,GAAe,SAC1B7C,EACA8C,GAEA,IAAMV,EAAYD,GAAiBnC,EAAW8C,GACxCC,EAAO,IAAIC,WAAS,SAC1B,MAAO,CACLC,MAAOH,EACPI,OAAQH,EAAKI,OAASf,EACtBe,MAAOJ,EAAKI,MACZC,aAAcL,EAAKK,aACnBC,SAAUN,EAAKM,SACfC,SAAUP,EAAKO,SACfC,OAAQR,EAAKQ,SCTJC,GAAU,SAACC,GAAD,OAAgBA,GAAMA,EAAaD,SAE7CE,GAAyB,SAACC,GACrC,GAAKA,EAA0B1D,UAC7B,MAAM,IAAIC,MAAM,gCAElByD,EAAMC,WAAWC,SAAQ,SAAC7D,GACxBD,EAA2BC,OAIlB8D,GAAY,WAAyC,IAAxCC,EAAuC,uDAAd,EACjD,OAAO,eACF3I,IADL,CAEEoI,SAAS,EACTI,WAAYI,MAAMD,GACfE,KAAK,MACL7D,KAAI,SAAC8D,EAAGC,GACP,OAAO9C,WAKF+C,GAAuB,SAIlCT,EACArI,GAEA,OAAQqI,EAAMC,WAAmB9B,MAAK,SAAChF,GAAD,OAAOA,EAAExB,KAAOA,MAG3C+I,GAAkB,SAC7BV,EACAW,EACAC,GAGA,OADAb,GAAuBC,GAChB,eACFA,EADL,CAEEC,WAAYD,EAAMC,WAAWxD,KAAI,SAACtD,GAAD,OAC/BA,EAAExB,KAAOgJ,EAAcC,EAAQzH,GAAKA,QAK7B0H,GAAe,SAACb,GAC3B,OAAO,eACFA,EADL,CAEE1D,WAAW,EACX2D,WAAYD,EAAMC,WAAWxD,KAAI,SAACtD,GAAD,sBAC5BuD,EAAiBvD,GADW,CAE/B2C,QAASkE,EAAMrI,WC1DRmJ,GAAoD,CAC/DC,OAAQ,gBACRC,OAAQ,qBACRlJ,SAAU,QACVS,QAAS,OACTC,OAAQ,SACRC,SAAU,SACVE,SAAU,gBACVE,MAAO,OACPC,QAAS,iBACT,oBAAqB,qBCXVmI,GAAkB,SAACC,GAC9B,MAAO,CACLnJ,KAAMmJ,EAAUnJ,KAChBM,OAAQxC,KAAKC,MAAMoL,EAAU7I,OAAS,KCc7B6E,GAAuB,SAAC5D,GACnC,OAAOA,EAAQL,QAAO,SAACC,EAAGC,GACxB,MAAM,GAAN,mBAAWD,GAAX,YAAiBC,EAAEoB,WAClB,KAGQ4G,GAAqB,SAChCC,GAC2B,IAAD,IAC1B,OAAQA,EAAOrJ,MACb,IAAK,SAEL,IAAK,OAEL,IAAK,OACH,OAAOqJ,EAAO/E,UAAY,CAAC+E,EAAO/E,WAAa,GACjD,IAAK,QACH,OAAO,UAAA+E,EAAOpB,aAAP,eAAcC,aAAc,GACrC,IAAK,QACH,OAAO,UAAAmB,EAAOpB,aAAP,eAAcC,aAAc,GACrC,QACE,MAAO,KAIAoB,GAAkB,SAC7BtJ,EACAqJ,GAEA,MAAO,CACLrJ,OACAsE,WNbwByD,EMaDsB,ENbgBtB,GAAMA,EAAiBjE,YMczDuF,OACDE,GACJtB,MAAOH,GAAQuB,GAAWA,OAA6BE,GNhBhC,IAACxB,GMmIfyB,GAAiB,SAC5BC,EACAnF,GAEA,IAAMoF,EAdsB,SAACD,GAC7B,IAAIE,EAAmB,sBAClBF,EAAMxH,eADY,YAElBwH,EAAMvH,YAAYwC,KAAI,SAAC6B,GAAD,OAAOA,EAAEvG,UAIpC,OAFIyJ,EAAM1H,gBAAe4H,EAAI,sBAAOA,GAAP,CAAa,YACtCF,EAAMzH,gBAAe2H,EAAI,sBAAOA,GAAP,CAAa,YACnCA,EAOaC,CAAeH,GAC7BN,EAAYU,GAAeJ,EAAOnF,GAClCwF,EAAeZ,GAAgBC,GAErC,OAAOO,EAAYxI,QAAO,SAAC6I,EAAKtI,EAAKgH,GACnC,IAAIuB,EAAG,UAAMD,GAAN,OAAYtB,EAAI,EAAI,IAAM,IAC3BwB,EAAOlB,GAAqBtH,GAClC,OAAQA,GACN,IAAK,SACH,MAAM,GAAN,OAAUuI,EAAV,YAAiBlM,KAAKC,MACnB+L,EAAaxJ,OAAS6I,EAAU7I,OAAU,KAD7C,aAEM2J,GACR,QACE,MAAM,GAAN,OAAUD,EAAV,YAAiBC,MAEpB,KAGQJ,GAAiB,SAC5BJ,EACAS,EACAb,GAEA,IAAMF,EAAqB,CACzBnJ,KAAMkK,EAAO9F,OAAO9D,OAAON,KAC3BM,OACE4J,EAAO9F,OAAO9D,OAAOA,QACpB,EAAImJ,EAAMtK,eAAiB+K,EAAO3J,MAAMpB,iBAEvCgL,EAAoBd,EACtB1C,GAAoB0C,EAAQF,EAAUnJ,MACtC,EACJ,MAAO,CACLA,KAAMmJ,EAAUnJ,KAChBM,OAAQpC,EAAMJ,KAAKsM,MAAMjB,EAAU7I,OAAS6J,MAInCE,GAAqB,SAChClB,EACAe,EACAb,GAEA,IAAMiB,EAAmBzD,GAAQwC,EAAQ,qBACzC,OAAIiB,GAAiD,UAA7BJ,EAAO9F,OAAO7B,WAC7B,eACF4G,EADL,CAEE7I,OAAQgK,EAAiBnL,eACrBrB,KAAKsM,MAAMjB,EAAU7I,OAASgK,EAAiBnL,gBAC/CrB,KAAKsM,MAAyB,GAAnBjB,EAAU7I,UAGpB,eACF6I,EADL,CAEE7I,OAAQ,KAsBDiK,GAAkB,SAC7Bd,EACAS,EACAM,GAEA,IAAMC,EApM4B,SAClCP,EACAT,GAEA,IAAMiB,EAAcjB,EAAM3H,MAAM4C,KAAI,SAAC0C,GAAD,OAAWD,GAAa+C,EAAQ9C,MAC9DuD,EAA6BD,EJ7B3B5E,QAAO,SAAC8E,GAAD,OAAOA,EAAEpD,UAAQvJ,OI8B1B4M,EJ5BkB,SAACC,GAAD,OACxBA,EAAQC,OAAM,SAACH,GAAD,OAAOA,EAAEpD,UI2BPwD,CAAWN,GACrBO,EAAoB9D,GAAa+C,EAAQ,CAC7CxI,OAAQwI,EAAO3J,MAAMrB,iBAEjBgM,IAAkBL,GAAUI,EAAkBzD,OAC9C2D,EAAkBR,GAAe,EAEjCxB,EAAqB,CACzB7I,OAAQxC,KAAKsM,MACVO,EAAcd,GAAeJ,EAAOS,GAAQ5J,OAAUoK,EAAYzM,QAErE+B,KAAMkK,EAAO9F,OAAO9D,OAAON,MAEvB8J,EACJL,EAAM1H,eAAiB8I,EACnB3B,GAAgBC,GAChB,CAAEnJ,KAAMmJ,EAAUnJ,KAAMM,OAAQ,GACtC,MAAO,CACLoK,cACAjB,QACAS,SACAiB,kBACAD,kBACAP,cACAE,UACA1B,YACAF,OAAS4B,GAAWpB,EAAMzH,eAAkBiJ,EAAkBzD,OAC9DsC,eACAsB,YAAaP,EAAUpB,EAAMxH,cAAgB,GAC7CoJ,UAAWR,EAAUpB,EAAMvH,YAAc,IAiKtBoJ,CAAqBpB,EAAQT,GAClD,OAAOe,EAAQ9F,KAAI,SAAC2E,GAAD,OA9Je,SAClCA,EACAoB,GAEA,GAAIA,EAAaU,gBAAiB,CAChC,IAAMI,EAAcpE,GAAakC,EAAQ,CAAE5H,IAAK,YAC1C0I,EAAoBM,EAAaxB,OACnC,EACAtC,GAAoB0C,EAAQoB,EAAatB,UAAUnJ,MACjDwL,EAAYzE,GAAOsC,EAAQ,WAC3BoC,GAAehB,EAAaS,kBAE9BK,EAAY/D,QAAWgE,IAAcf,EAAaI,SAChDa,EAAc,CAClB1L,KAAMyK,EAAatB,UAAUnJ,KAC7BM,OAAQmL,EACJ,EACAvN,EAAMJ,KAAKsM,MAAMK,EAAatB,UAAU7I,OAAS6J,KAEjDwB,EAAkBtB,GACtBqB,EACAjB,EAAaP,OACbb,GAEIuC,EACJnB,EAAaP,OAAO3J,MAAMxB,aAAe4M,EAAgBrL,OACrDuL,EACJD,EAAqBnB,EAAaP,OAAO3J,MAAMtB,YAC3CwL,EAAaP,OAAO3J,MAAMtB,YAC1B2M,EAEN,OAAO,eACFnB,EADL,CAEEpB,SACAoC,eACAK,cAAe,CACb9L,KAAMyK,EAAatB,UAAUnJ,KAC7BM,OAAQmK,EAAaxB,OAAS,EAAIkB,GAEpCwB,kBACAD,cACAG,oBACAE,QAAS1C,EAAOrK,QAAUqK,EAAO9I,MAAMxB,aAAe2M,EAAYpL,SAGpE,OAAO,eACFmK,EADL,CAEEpB,SACAoC,cAAc,EACdE,gBAAiBlB,EAAatB,UAC9B2C,cAAerB,EAAatB,UAC5BuC,YAAajB,EAAatB,UAC1B0C,kBAAmB3N,EACjBuM,EAAaP,OAAO3J,MAAMxB,cACvB0L,EAAaP,OAAO3J,MAAMxB,aACzB0L,EAAaP,OAAO3J,MAAMtB,cAEhC8M,SAAS,IAqGkBC,CAAqB3C,EAAQoB,OC5PjDwB,GAAkBpM,cCSzBqM,GAAe,SACnB/K,EACAvB,EACAiJ,GAEA,OAAOF,GAAgBxH,EAAGvB,EAAIiJ,IAOnBsD,GAAqB,SAAClE,EAAemE,GAAhB,OAAuC,SACvEtB,GAuGA,OArGAA,EAAQ3C,SAAQ,SAACX,EAAQ6E,GAAW,IAC1BnC,EAAmB1C,EAAnB0C,OAAQb,EAAW7B,EAAX6B,OACZiD,EAAc,CAACrE,EAAOmE,GAAYhG,MACpC,SAACjF,GAAD,OAAOA,EAAEvB,KAAOsK,EAAOnG,WAErBwI,EAAc,CAACtE,EAAOmE,GAAYhG,MACpC,SAACjF,GAAD,OAAOA,EAAEvB,KAAOyJ,EAAOtF,WAEnByI,EAAc,SAClBrL,EACAvB,EACAiJ,GAEI1H,EAAEvB,KAAO0M,EAAY1M,GAIrBuB,EAAEvB,KAAO2M,EAAY3M,KACvB2M,EAAcL,GAAa/K,EAAGvB,EAAIiJ,IAJlCyD,EAAcJ,GAAa/K,EAAGvB,EAAIiJ,IAStC2D,EAAYD,EAAalD,EAAOzJ,IAAI,SAACwB,GACnC,ORqMJkD,EQrM4B,eAEjBlD,EAFgB,CAGnBb,MAAM,eACDa,EAAEb,MADF,CAEHxB,aAAcqC,EAAEb,MAAMxB,aAAeyI,EAAOkE,YAAYpL,WRiMlE6D,EQ9LMqD,EAAO4D,YR+LblH,EQ9LMsD,EAAO6D,URgMNpE,GAAgBlB,GAAkBzB,EAAWH,GAASD,GAL/B,IAC9BI,EACAH,EACAD,KQ1LMsD,EAAOsC,aAAaxJ,OAAS,GAC/BiM,EAAYrE,WACTpC,QAAO,SAAC1E,GAAD,OAAOA,EAAExB,KAAO4H,EAAO6B,OAAOzJ,MACrCuI,SAAQ,SAAC7D,GACRkI,EAAYD,EAAajI,EAAU1E,IAAI,SAACwB,GACtC,IAAMqL,EAAyB9F,GAC7BhC,EAAiBL,GACjBkD,EAAOsC,aAAa9J,MAEtB,OAAO,eACFoB,EADL,CAEEb,MAAM,eACDa,EAAEb,MADF,CAEHxB,aACEqC,EAAEb,MAAMxB,cACPyI,EAAOsC,aAAaxJ,OAASmM,aAOxCjF,EAAOmE,gBAAgBrL,OAAS,IAAMkH,EAAOuE,SAC/CS,EAAYF,EAAapC,EAAOtK,IAAI,SAACwB,GAEnC,OAAO,eACFA,EADL,CAEEb,MAAM,eACDa,EAAEb,MADF,CAEHxB,aAAcqC,EAAEb,MAAMxB,aAAeyI,EAAOmE,gBAAgBrL,cAMhE+L,IAAUvB,EAAQ7M,OAAS,GACzBuJ,EAAOqE,kBAAoB,GAC7BW,EAAYF,EAAapC,EAAOtK,IAAI,SAACwB,GACnC,OAAO,eACFA,EADL,CAEEb,MAAM,eACDa,EAAEb,MADF,CAEHxB,aAAcb,EACZkD,EAAEb,MAAMxB,aAAeyI,EAAOqE,0BAQtCS,EAAY1M,KAAOqM,GACrBhE,EAAQqE,EAERF,EAAaE,EAEXC,EAAY3M,KAAOqM,GACjBK,EAAY1M,KAAOqM,KACrBhE,EAAQsE,GAGVH,EAAaG,KAGV,CACLtE,MAAM,eACDA,EADA,CAEHC,WAAYD,EAAMC,WAAWxD,KAAI,SAACtD,GAAD,OAAOyE,GAAyBzE,QAEnEgL,WAAW,eACNA,EADK,CAERlE,WAAYkE,EAAWlE,WAAWxD,KAAI,SAACtD,GAAD,OAAOyE,GAAyBzE,W,0BChH/DsL,GACE,SAACzE,GACZ,MAAO,CACLjI,KAXsB,6BAYtB2M,QAAS,CACP1E,WALKyE,GASM,SAACpI,GAChB,MAAO,CACLtE,KAlB0B,oCAmB1B2M,QAAS,CACPrI,eAbKoI,GAiBM,SAAC9D,GAChB,MAAO,CACL5I,KAzB0B,oCA0B1B2M,QAAS,CACP/D,iBAMKgE,GAAU,CACrBC,YAAa,SAAC5E,GAAD,OAAmB,SAAC6E,GAC/B9E,GAAuBC,GACvB6E,EAASJ,GAA2BzE,MAEtC8E,gBAAiB,SAACzI,GAAD,OAA2B,SAACwI,GAC3CA,EAASJ,GAA+BpI,MAE1C0I,gBAAiB,SAACpE,GAAD,OAAyB,SAACkE,GACzCA,EAASJ,GAA+B9D,OAI/BqE,IAAwB,oBAhDT,8BAiDV,SAACC,EAAOC,GACtB,OAAO,eACFA,EAAOR,QAAQ1E,UAHa,eA/CL,qCAqDV,SAACiF,EAAOC,GAC1B,OAAOxE,GACLuE,EACAC,EAAOR,QAAQrI,UAAU1E,IACzB,SAACwB,GAAD,OAAO+L,EAAOR,QAAQrI,gBAVS,eA9CL,qCA2DV,SAAC4I,EAAOC,GAC1B,OAAO,eACFD,EADL,CAEEhF,WAAYgF,EAAMhF,WAAWpC,QAC3B,SAAC1E,GAAD,OAAOA,EAAExB,KAAOuN,EAAOR,QAAQ/D,oBAjBF,GAsB/BwE,GAAI,eAAQ3H,GAAc,cAAtB,CAAqC9F,KAAM,SAWtC0N,GC7FY,SACzBJ,EACAK,GAEA,OAAO,WAAmC,IAAlCJ,EAAiC,uDAAzBI,EAAcH,EAAW,uCACjCI,EAASN,EAAKE,EAAOnN,MAC3B,OAAIuN,EAAeA,EAAOL,EAAOC,GAC1BD,GDsFIG,CAAYJ,GAVU,CACnCnF,SAAS,EACTlI,GAAIqM,GACJtM,KAAM,cACNuI,WAAY,CAAC,eACNkF,IADK,eAEL3H,GAAc,UAFT,CAEoB9F,KAAM,QAF1B,eAGL8F,GAAc,WAHT,CAGqB9F,KAAM,cAK5B6N,GAAkB,kBE7FL,SAACZ,GACzB,IAAME,EAAWW,eACjB,OAAOC,mBAAQ,kBAAMC,aAAmBf,EAASE,KAAW,CAC1DA,EACAF,IF0FFgB,CAAWhB,KG/EPiB,GAAqC,CACzCC,SAAU1F,KACVH,MAAOa,GAAaV,MACpByE,YAAa,SAAC5E,KACd8E,gBAAiB,SAACzI,KAClB0I,gBAAiB,SAACpE,KAClBmF,cAAe,SAACnF,KAChBoF,iBAAkB,SAACpF,MAERqF,GAAeC,IAAMC,cAChCN,IAMWO,GAAuB,SAACC,GAAuC,IAClEC,EAAaD,EAAbC,SACF1B,EAAUY,KACVM,EH0DsBS,cAAY,SAACrB,GAAD,OAAmBA,EAAMjF,SGzD3DA,EAAQyF,mBAAQ,kBAAM5E,GAAagF,KAAW,CAACA,IAyBrD,OACE,kBAACG,GAAaO,SAAd,CACErQ,MAAO,CACL8J,QACA6F,WACAjB,YA5Bc,SAAC5E,GACnB2E,EAAQC,YAAY5E,IA4BhB8E,gBA1BkB,SAACzI,GACvB,GAAKA,EAAL,CACA,GAAKA,EAAkCC,UACrC,MAAM,IAAIC,MAAM,mCAElBoI,EAAQG,gBAAgBzI,KAsBpB0I,gBApBkB,SAACpE,GACvBgE,EAAQI,gBAAgBpE,IAoBpBmF,cAlBgB,SAACnF,GACrB,OAAOF,GACLT,EACAW,IAgBEoF,iBAbmB,SAACpF,GACxB,OAAOF,GAAqBoF,EAAUlF,MAenC0F,ICrEMG,GAAkB,SAC7BvG,GAKA,OAHyBA,EAAWwG,MAClC,SAACC,EAAGC,GAAJ,OAAUA,EAAErO,MAAM7B,QAAUiQ,EAAEpO,MAAM7B,WAEdwC,QACtB,SAAC0J,EAAGxJ,EAAGqH,GAAP,sBACKmC,EADL,gBAEGxJ,EAAExB,GAAK,IAAMwB,EAAEb,MAAM7B,YAExB,KAWSmQ,GAAS,SAACC,GACrB,OAAOC,OAAOC,KAAKF,GAAO5N,QAAO,SAAC0J,EAAWhL,GAC3C,OAAIkP,EAAMlP,GAAMgL,EAAUkE,EAAMlP,GACzBgL,IACNqE,OAAOC,oBAGCC,GAAmB,SAC9BL,GAEkB,IADlB5G,EACiB,uDADmB,GAEhCkH,EAAMP,GAAOC,GACjB,OAAOC,OAAOC,KAAKF,GAAO5N,QAAO,SAAC0J,EAAGhL,GACnC,IAAM0E,EAAY4D,EAAW9B,MAAK,SAAChF,GAAD,OAAOA,EAAExB,KAAOA,KAC5C8B,EAAS4C,GAAayC,GAAOzC,EAAW,SAAW,EAAI8K,EAC7D,OAAO,eACFxE,EADL,gBAEGhL,EAAKkP,EAAMlP,GAAM8B,MAEnB,KAkBQ2N,GAAW,SAACP,GACvB,IAAIM,EAAMH,OAAOC,kBACbzN,EAAMsN,OAAOC,KAAKF,GAAO,GAO7B,OANAC,OAAOC,KAAKF,GAAO3G,SAAQ,SAACvI,GACtBwP,EAAMN,EAAMlP,KACdwP,EAAMN,EAAMlP,GACZ6B,EAAM7B,MAGH6B,GCnBH6N,GAA+B,CACnCrH,MAAOa,GAAaV,MACpBgE,WAAYtD,GAAaV,MACzBmH,gBAAiB5K,EAAiBc,GAAc,eAChDyC,WAAY,GACZ4G,MAAO,GACPU,mBAAejG,EACfkG,gBAAiB,GACjBC,aAAc,GACdC,iBAAapG,EACbqG,WAAW,EACXC,QAAQ,EACRC,mBAAmB,EACnBC,cAAe,SAACtG,KAChBuG,gBAAiB,SAAC3G,KAClB4G,MAAO,aACPC,KAAM,aACNC,OAAQ,cAEGC,GAAgBjC,wBAA8BmB,IAC9Ce,GAAmB,kBAAMC,qBAAWF,KAQpCG,GAAwB,SAAClC,GAAwC,IACpEC,EAA+CD,EAA/CC,SAAUkC,EAAqCnC,EAArCmC,cAAeC,EAAsBpC,EAAtBoC,kBAD0C,EFHxCH,qBAAWrC,IEKtChG,EAFmE,EAEnEA,MAAO6F,EAF4D,EAE5DA,SAAUjB,EAFkD,EAElDA,YACnB6D,EAAkBhD,mBACtB,kBAAMvB,GAAmB2B,EAAUO,EAAMjC,cACzC,CAAC0B,EAAUO,EAAMjC,aAEbA,EAAasB,mBAAQ,kBAAM5E,GAAauF,EAAMjC,cAAa,CAC/DiC,EAAMjC,aARmE,EAUzCuE,oBAAkB,GAVuB,mBAUpEf,EAVoE,KAUzDgB,EAVyD,OAW/CD,oBAAkB,GAX6B,mBAWpEd,EAXoE,KAW5DgB,EAX4D,OAYzBF,oBAAkB,GAZO,mBAYpEb,EAZoE,KAYjDgB,EAZiD,KAarE5I,EAAawF,mBACjB,uCAAUzF,EAAMC,YAAhB,YAA+BkE,EAAWlE,eAC1C,CAACD,EAAOmE,IAfiE,EAiBjDuE,mBACxBlC,GAAgB,GAAD,mBAAKxG,EAAMC,YAAX,YAA0BkE,EAAWlE,eAlBqB,mBAiBpE4G,EAjBoE,KAiB7DiC,EAjB6D,OAoB7CJ,mBAAiB9Q,eApB4B,mBAoBpEmR,EApBoE,KAoB3DC,EApB2D,OAqBnCN,mBAAiC,IArBE,mBAqBpEjB,EArBoE,KAqBtDwB,EArBsD,OAsBrCP,qBAtBqC,mBAsBpEhB,EAtBoE,KAsBvDwB,EAtBuD,OAyB/BR,qBAzB+B,mBAyBpES,EAzBoE,KAyBpDC,EAzBoD,OA4BjCV,qBA5BiC,mBA4BpEnB,EA5BoE,KA4BrD8B,GA5BqD,KA6BrE/B,GAAkB7B,mBACtB,kBACExF,EAAW9B,MACT,SAAChF,GAAD,OAAQA,EAAEoE,MAAQpE,EAAExB,KAAOyP,GAASP,QAExC,CAACA,EAAO5G,IAGJ+H,GAAQsB,uBAAY,WACxBV,GAAU,GACVD,GAAa,KACZ,CAACrB,KAGJiC,qBAAU,WACH5B,EAGHmB,EAAStC,GAAgB,GAAD,mBAAKxG,EAAMC,YAAX,YAA0BkE,EAAWlE,eAF7D+H,OAID,CAACL,IAEJ,IA6BMO,GAASoB,uBAAY,WACzB,GAAK5B,EAAL,CACA,IAAM8B,EAAUf,EAAgBf,GAChCuB,GAAgB,SAACtG,GAAD,4BAAWA,GAAX,CAAc+E,OAC9Ba,EAAciB,EAAQrF,YACtBS,EAAY4E,EAAQxJ,OACpBkJ,OAAe5H,GACf,IAAMmI,EAAoB,sBACrBD,EAAQxJ,MAAMC,YADO,YAErBuJ,EAAQrF,WAAWlE,aACtBxD,KAAI,SAACtD,GAAD,OAAOuD,EAAiBvD,MAC9B2P,EDhFyB,SAC3BjC,EACA5G,GAEA,OAAOiH,GACLjH,EAAWhH,QAAO,SAAC0J,EAAGxJ,GACpB,OAAOA,EAAEoE,KAAOoF,EAAT,eAAkBA,EAAlB,gBAAsBxJ,EAAExB,GAAKkP,EAAM1N,EAAExB,QAC3C,KC0ED+R,CD7HoB,SACxB7C,EACAxK,EACA4D,GASA,OAPYiH,GAAiB,eAEtBL,EAFqB,gBAGvBxK,EAAU1E,GAAK,IAAM0E,EAAU/D,MAAM7B,UAExCwJ,GCoHI0J,CAAW9C,EAAOa,EAAY,GAAGzF,OAAQwH,GACzCA,IAGJT,EAAWpR,eACXiR,GAAqB,MACpB,CAACnB,EAAab,IAkDjB,OAvCA0C,qBAAU,WACR,GAAIjC,GACF,GAAIA,GAAgBxL,UAAYqI,EAAWxM,GAAI,CAAC,IAAD,EC5L1B,SACzBsK,EACA2H,EACAzF,GAEA,IAAM3C,EAAQ7L,EAAUsM,EAAO1H,QACzBsP,EAAqBD,EAAY3J,WAAWpC,QAAO,SAAC1E,GAAD,OACvDA,EAAE8C,KAAKQ,KAAI,SAAC6B,GAAD,OAAOA,EAAEvG,QAAMgH,SAAS,eAWrC,MAAO,CAAEyC,QAAOJ,OARO,WAArBI,EAAM7H,WACFkQ,EAAmB7T,OAAS,EAC1BL,EAAUkU,GACVlU,EAAUiU,EAAY3J,YACxBtK,ET2O6B,SACnCsM,EACAoC,EACAC,EACA9C,GAEA,OAAQA,EAAM7H,YACZ,IAAK,SACH,OAAO2K,EAAYrE,WAAWpC,QAAO,SAAC1E,GAAD,OAAQA,EAAEoE,QACjD,IAAK,OACH,OAAO8G,EAAYpE,WAAWpC,QAAO,SAAC1E,GAAD,OAAQA,EAAEoE,QACjD,IAAK,QACH,MAAO,CAAC+G,GACV,IAAK,QACH,MAAO,CAACD,GACV,IAAK,OACH,MAAO,CAACpC,GACV,QACE,MAAO,IS5PH6H,CAAsB7H,EAAQkC,EAAYyF,EAAapI,KD8K/BuI,CACxBzC,GACAtH,EACAmE,GAHM3C,EADqC,EACrCA,MAAOJ,EAD8B,EAC9BA,QAZC,SAACI,EAAeJ,GACpC,IAAMyB,EAAUP,GACdd,EACA8F,GACAnG,GAAmBC,IAErB8H,EAAerG,GAYXmH,CAAcxI,EAAOH,GAAgBG,EAAM7H,WAAYyH,SAEvDiI,GAAiB/B,GAAgB/M,OAAO,MAG3C,CAACwO,IAEJQ,qBAAU,WACR,IAAI3B,EACJ,OAAIzD,EAAWlE,WAAW6C,OAAM,SAAC3J,GAAD,OAAOA,EAAEoE,SACvC0M,MAAM,WACNzB,IACAS,EAAgB,IAChBI,QAAiB/H,QACjBqH,GAAa,IAGX3I,EAAMC,WAAW6C,OAAM,SAAC3J,GAAD,OAAOA,EAAEoE,SAClC0M,MAAM,iBACNrB,GAAU,SAFZ,IAKC,CAAC5I,EAAOmE,IAEXoF,qBAAU,WACJjC,IAAmBA,GAAgB/M,OAAO,IAC5C8O,GAAiB/B,GAAgB/M,OAAO,MAEzC,CAAC+M,KAGF,kBAACa,GAAc5B,SAAf,CACErQ,MAAO,CACL8J,QACAmE,aACAlE,aACA4G,QACAS,mBACAI,cACAH,gBACAC,gBAAiB2B,EACbhI,GAAmBgI,GACnB,GACJ1B,eACAG,SACAD,YACAE,oBACAC,cAlGgB,SAACtG,GACrB6H,GAAiB7H,GACbA,EAAM7H,cAAN,OAAqB4N,QAArB,IAAqBA,OAArB,EAAqBA,EAAe5N,aACtCyP,OAAkB9H,IAgGhByG,gBA5FkB,SAAC3G,GAClBmG,GACL6B,EAAkB/H,GAAgBkG,EAAc5N,WAAYyH,KA2FxD4G,SACAC,KAtHO,SAACiC,GACZ,GAAK3C,EAAL,CACA,IAAM4C,EAAcD,EAChB7I,GAAgBkG,EAAc5N,WAAYuQ,GAC1Cf,EACJ,GAAK5B,GAAkB4C,EAAvB,CACA,IAAMtH,EAAUP,GACdiF,EACAD,GACAnG,GAAmBgJ,GAAatM,QAAO,SAAC1E,GAAD,OAAQA,EAAEoE,SAEnD2L,EAAerG,GACfwG,QAAiB/H,GACjB8H,OAAkB9H,GAClBuH,GAAqB,MAyGjBX,YAGD7B,I,QE3PM+D,GAAgBC,aAAO,OAAO,SAACjE,GAAD,MAAiC,CAC1EkE,QAAS,OACTC,cAAenE,EAAMoE,YAAc,MACnCC,KAAMrE,EAAMsE,MAAQ,EAAI,cAEbC,GAAgBN,aAAO,OAAO,iBAAO,CAChDI,KAAM,MCVKG,GAAYP,aAAO,QAAQ,iBAAO,CAC7CQ,WAAY,yBACZC,WAAY,QAEDC,GAAUV,aAAO,OAAO,iBAAO,CAC1CQ,WAAY,yBACZC,WAAY,QCLDE,GAAO,SAACC,EAAejJ,GAAhB,OAClB,0BAAMkJ,MAAO,CAAED,QAAOH,WAAY,SAAW9I,IAElCmJ,GAAY,SAAC3J,GAAD,OAAmBwJ,GAAK,OAAQxJ,EAAM9J,OCOlD0T,GAAmBlF,wBAHQ,CACtCmF,UAAW,KAGAC,GAAsB,kBAAMjD,qBAAW+C,KAOvCG,GAA2B,SACtCnF,GACI,IACIC,EAAaD,EAAbC,SADL,EAEsD+B,KAAjDV,EAFL,EAEKA,YAAaD,EAFlB,EAEkBA,aAActD,EAFhC,EAEgCA,WAAYnE,EAF5C,EAE4CA,MAF5C,EAG+B0I,mBAAwB,IAHvD,mBAGI2C,EAHJ,KAGeG,EAHf,OAI2B9C,mBAAmB,IAJ9C,mBAII+C,EAJJ,KAIaC,EAJb,KAKGC,EDpBuB,SAAC3L,EAAemE,GAAhB,OAAuC,SACpE9H,GAEA,IAAMuP,EAAcvP,EAAUP,UAAYkE,EAAMrI,GAC1CkU,EAAexP,EAAUP,UAAYqI,EAAWxM,GAOtD,OAAOqT,GANOY,EACV,aACAC,EACA,cACA,QAEexP,EAAU3E,OCSZoU,CAAgB9L,EAAOmE,GAClC4H,EAAM,SAACC,GAAD,OACVR,GAAa,SAACO,GAAD,4BACRA,GADQ,CAEX,kBAACnB,GAAD,CAAWM,MAAO,CAAEZ,QAAS,eAAgBQ,WAAY,WACtDkB,SAwHP,OApHAzC,qBAAU,WACR,IAAMtJ,EAAU,sBAAOkE,EAAWlE,YAAlB,YAAiCD,EAAMC,aACvDgM,YAAW,WACThM,EAAWC,SAAQ,SAAC7D,GACdA,EAAUkB,OAASkO,EAAQpP,EAAU1E,MACvC+T,GAAW,SAACQ,GAAD,sBAAgBA,EAAhB,gBAAuB7P,EAAU1E,IAAK,OACjDoU,EAAI,8BAAOf,GAAK,aAAD,UAAkB3O,EAAU3E,KAA5B,mBAGlB,KACF,CAACyM,EAAYnE,IAEhBuJ,qBAAU,WACJ7B,GAAeA,EAAY,IAC7BqE,EACE,8BACGJ,EAASjE,EAAY,GAAGzF,QAD3B,QACyC,IACtCkJ,GAAUzD,EAAY,GAAGlG,OAF5B,QAMH,CAACkG,IAEJ6B,qBAAU,WACR,GAA4B,IAAxB9B,EAAazR,OAAjB,CACA,IAAMmW,EAAe1E,EAAaA,EAAazR,OAAS,GAClDoW,EAAYD,EAAa,GAC1BC,IAEAA,EAAUlJ,kBACTkJ,EAAU5K,MAAMnJ,OAEhB0T,EAAI,8BAAOK,EAAUnK,OAAOvK,KAAxB,sBAGNqU,EAAI,8BAAOZ,GAAUiB,EAAU5K,OAA3B,cAGJ4K,EAAUnJ,iBACZ8I,EAAI,8BAAOf,GAAK,OAAQ,mBAEtBoB,EAAUxJ,SACZmJ,EAAI,8BAAOf,GAAK,OAAQ,cAE1BmB,EAAajM,SAAQ,SAACiC,GACpB,IAAMmC,EAActE,EAAMrI,KAAOwK,EAAMF,OAAOnG,QAAUqI,EAAanE,EACjEmC,EAAMe,kBACJf,EAAMqB,aACRuI,EAAI,8BAAOJ,EAASxJ,EAAMf,QAAtB,wBACKe,EAAMsB,YAAYpL,OAAS,EACpC0T,EACE,8BACGZ,GAAUhJ,EAAMX,OADnB,SACiC,IAC9BwJ,GAAK,QAAD,UAAa7I,EAAMsB,YAAYpL,OAA/B,YAFP,MAE2D,IACxDsT,EAASxJ,EAAMf,QAHlB,MAMOe,EAAMX,MAAMnJ,QACrB0T,EACE,8BACGZ,GAAUhJ,EAAMX,OADnB,qBAC6CmK,EAASxJ,EAAMf,QAD5D,MAMAe,EAAMN,aAAaxJ,OAAS,GAC9BiM,EAAYrE,WACTpC,QAAO,SAAC1E,GAAD,OAAOA,EAAExB,KAAOwK,EAAMf,OAAOzJ,KAAOwB,EAAEoE,QAC7C2C,SAAQ,SAACmM,GACR,IAAM7H,EAAyB9F,GAC7B2N,EACAlK,EAAMN,aAAa9J,MAErBgU,EACE,8BACGZ,GAAUhJ,EAAMX,OADnB,SACiC,IAC9BwJ,GACC,QADG,UAGD7I,EAAMN,aAAaxJ,OAASmM,EAH3B,mBAKF,IAPL,MAQMmH,EAASU,GARf,SAcJlK,EAAMuB,gBAAgBrL,OAAS,GACjC0T,EACE,8BACGJ,EAASxJ,EAAMf,QADlB,aACqC,IAClC4J,GAAK,QAAD,UAAa7I,EAAMuB,gBAAgBrL,OAAnC,cAKX8J,EAAMiB,UAAUlD,SAAQ,SAACnD,GACvBgP,EACE,8BACGJ,EAASxJ,EAAMf,QADlB,WACmCrE,EAAIhF,KADvC,KAC+CgF,EAAI9E,SADnD,oBAOJmU,EAAUxI,kBAAoB,GAChCmI,EACE,8BACGJ,EAASS,EAAUnK,QADtB,WACuCmK,EAAUxI,kBAAmB,IADpE,8BAMH,CAAC6D,EAAazR,SAGf,kBAACoV,GAAiB7E,SAAlB,CAA2BrQ,MAAO,CAAEmV,cACjChF,I,wCCjJMiG,GAAQ,SAAClG,GAAwB,IAAD,EACTA,EAA1BmG,aADmC,MAC3B,IAD2B,EACtBlG,EAAaD,EAAbC,SADsB,EAEKqC,oBAAkB,GAFvB,mBAEpC8D,EAFoC,KAElBC,EAFkB,OAGP/D,oBAAkB,GAHX,mBAGpCgE,EAHoC,KAGxBC,EAHwB,OAInBjE,mBAAiB9Q,eAJE,mBAIpCgV,EAJoC,KAI9BC,EAJ8B,KAK3CC,2BAAgB,YACF,yCAAG,uBAAApG,EAAA,sDACT8F,GACFP,YAAW,WACTY,EAAQjV,iBACP2U,GAJQ,2CAAH,qDAOZrH,KACC,CAACsH,IACJM,2BAAgB,WACVN,GACFG,GAAc,KAEf,CAACC,IAYJ,OACE,yBAAKG,aAZc,SAACjN,GACpBA,EAAEkN,iBACFlN,EAAEmN,kBACFR,GAAoB,IASaS,aAPd,SAACpN,GACpBA,EAAEkN,iBACFlN,EAAEmN,kBACFR,GAAoB,GACpBE,GAAc,KAIXtG,EAAS,CAAEqG,iBCnCLS,GAAe,SAAC/G,GAA+B,IAAD,EAOrDA,EALF8E,aAFuD,MAE/C,GAF+C,IAOrD9E,EAJFgH,gBAHuD,MAG5C,GAH4C,EAIvD/G,EAGED,EAHFC,SAJuD,EAOrDD,EAFFrJ,IAAKsQ,OALkD,MAKxC,MALwC,EAMpDC,EANoD,aAOrDlH,EAPqD,uCAQzD,OACE,yBACE8E,MAAK,aACHqC,OAAQ,iBACRjD,QAAS,OACTkD,UAAW,cACRtC,IAGL,kBAACmC,EAAD,eACEnC,MAAK,aACHqC,OAAQH,EAASG,QAAU,iBAC3BE,WAAY,kDACZC,QAAS,GACTzC,MAAO,OACPR,KAAM,EACNkD,UAAW,2BACRP,IAEDE,GAEHjH,K,qBC9BIuH,GAAU,SAACxH,GAAmB,IAC9BkH,EAD6B,iBACpBlH,GACpB,OACE,kBAAC,KAAD,eACEyH,UAAU,KACVC,QAAQ,MACRJ,QAAQ,IACRK,OAAO,GACHT,KAKGU,GAAe,SAAC5H,GAC3B,OACE,kBAAC,GAAD,MACG,gBAAGsG,EAAH,EAAGA,WAAH,OAAoB,kBAAC,GAAD,iBAAatG,EAAb,CAAoB6H,OAAQvB,SCR1CwB,GAAQ,SAAC9H,GAAwB,IAAD,EACqBA,EAAxD1O,YADmC,MAC5B,GAD4B,EACxBxB,EAA6CkQ,EAA7ClQ,MAAOiY,EAAsC/H,EAAtC+H,IAAKlD,EAAiC7E,EAAjC6E,MADY,EACqB7E,EAA1BgI,cADK,MACI,GADJ,EACQ/H,EAAaD,EAAbC,SAC7CnN,EAAKhD,EAAQiY,EAAO,IACpBE,EAAanV,EAAI,IAAM,IAAMA,EACnC,OACE,kBAAC,GAAD,CACE2U,UAAU,QACVS,QAAS,kBAAC,GAAD,eAAkB5W,EAAlB,aAA2BxB,EAA3B,cAAsCiY,EAAtC,OAET,kBAAC,GAAD,CACEjD,MAAO,CAAEqD,WAAY,QACrBnB,SAAU,CACRM,QAAS,EACTD,WAAY,OACZW,OAAQA,EAAS,EACjBI,SAAU,WACVC,YAAa,8BAGf,kBAACrE,GAAD,CACEc,MAAO,CACLsD,SAAU,WACVE,KAAM,EACNlB,UAAW,aACXY,OAAQA,EAAS,EACjBO,SAAS,GAAD,OAAKN,EAAL,KACRO,SAAS,GAAD,OAAKP,EAAL,KACRV,UAAW,oCACXkB,WAAY,oBACZC,gBAAiB7D,EACjBA,MAAO,QACP8D,WAAY,SACZC,eAAgB,SAChBC,WAAY,cAGhB,kBAACtE,GAAD,CACEO,MAAO,CACLsD,SAAU,WACVJ,SACAc,WAAW,GAAD,OAAKd,EAAS,EAAd,MACVe,MAAO,EACPC,IAAK,EACLC,SAAU,GACVvE,WAAY,OACZwE,SAAU,SACVT,WAAY,sBAGd,kBAAC9D,GAAD,KAAU1E,OC5DdkJ,GAAMlF,aAAO,MAAO,CACxBmF,UAAW,iCAEAC,GAAQC,aAAYH,IAAK,SAAClC,GAAD,OAAa,SAACjH,GAClD,OACE,yBACE8E,MAAO,CACLsD,UAA8B,IAApBpI,EAAMuJ,UAAsB,WAAa,WACnDlC,WAAY,OACZC,QAAS,MACTH,OAAQ,kCACRI,UAAW,oBACXS,OAAQhI,EAAMwJ,OAAS,OACvBC,MAAOzJ,EAAMwJ,OAAS,OACtBtF,QAAS,OACTyE,WAAY,SACZC,eAAgB,SAChBE,WAAY,OACZpE,WAAY,SACZgF,aAAc,MACdN,UAAW,8BACXvE,MAAO7E,EAAM2J,QAAU,QACvBX,IAAKhJ,EAAM4J,KACXC,OAAQ7J,EAAM8J,QACdf,MAAO/I,EAAM+J,OACbzB,KAAMtI,EAAMgK,QAGd,kBAAC/C,EAAYjH,QAWNiK,GAAa,SAACjK,GAA6B,IAC9CC,EAA6CD,EAA7CC,SAAUiI,EAAmClI,EAAnCkI,QAASgC,EAA0BlK,EAA1BkK,WAAYzC,EAAczH,EAAdyH,UACvC,OACE,yBACE3C,MAAO,CACLsD,SAAU,WACVY,IAAKkB,EAAWN,KAChBC,OAAQK,EAAWJ,QACnBxB,KAAM4B,EAAWF,MACjBjB,MAAOmB,EAAWH,SAGpB,kBAAC,GAAD,CACEI,SAAU,EACV1C,UAAWA,GAAa,QAExBS,QAASA,GAAW,+BAEpB,kBAACmB,GAAD,CAAOE,WAAW,EAAOI,OAAQO,EAAWP,QACzC1J,MCrDEmK,GAAO,SAAC,GAOF,IANjBC,EAMgB,EANhBA,IACAC,EAKgB,EALhBA,KAKgB,IAJhBxF,aAIgB,MAJR,GAIQ,MAHhB5K,YAGgB,MAHT,QAGS,EAFhBqQ,EAEgB,EAFhBA,OACAC,EACgB,EADhBA,QACgB,EACclI,oBAAS,GADvB,mBACTmI,EADS,KACAC,EADA,OAEMpI,mBAAS,IAFf,mBAETqI,EAFS,KAEJC,EAFI,KAahB,OATAzH,qBAAU,WACJkH,GACFQ,MAAMR,GACHS,MAAK,SAACpP,GAAD,OAASA,EAAIE,UAClBkP,MAAK,SAAClP,GAAD,OAAUgP,EAAOhP,MACtBkP,MAAK,kBAAMJ,GAAW,QAE1B,CAACL,IAEII,EAUN,8BATA,yBACEM,UAAS,eAAUR,EAAS,SAAW,IACvCC,QAAS,WACHA,GAASA,KAEf1F,MAAK,eAAOA,EAAP,CAAckD,OAAQsC,EAAMb,MAAOa,EAAMpQ,SAC9C8Q,wBAAyB,CAAEC,OAAQN,M,oaCH5BO,GAAkE,CAC7Elb,MAAOmb,KACPlb,SAAUmb,KACVlb,aAAcmb,KACdlb,WAAYmb,KACZlb,OAAQmb,KACRlb,QAASmb,KACTlb,KAAMmb,KACNC,SAAUC,MAGCC,GAAmC,cAC9CnZ,MAAOoZ,KACPtZ,SAAUuZ,KACVpZ,QAASqZ,MACR,oBAAsBC,MAGZC,IAAmC,oBAC7C7X,EAAK7C,GAAK2a,MADmC,eAE7C7X,EAAW9C,GAAK4a,MAF6B,eAG7C5X,EAAMhD,GAAK6a,MAHkC,eAI7C5X,EAAWjD,GAAK8a,MAJ6B,eAK7C5X,EAAOlD,GAAK+a,MALiC,eAM7ChZ,EAAM/B,GAAKgb,MANkC,eAO7CzY,EAAUvC,GAAKib,MAP8B,eAQ7C5X,EAAMrD,GAAKkb,MARkC,G,0CCvCnCC,GAAa,SAAC1M,GAA6B,IAC9CrJ,EAAmBqJ,EAAnBrJ,IAAK8Q,EAAczH,EAAdyH,UACb,OACE,kBAAC,GAAD,CACEA,UAAWA,GAAa,SACxBS,QACE,kBAAC,GAAD,CAAcpD,MAAO,CAAEyD,SAAU,MAC/B,kBAACvE,GAAD,CAAeI,WAAW,UACxB,4BAAQU,MAAO,CAAE6H,aAAc,IAC5BhW,EAAIhF,KADP,IACcgF,EAAI9E,SAAW,EAAf,WAAuB8E,EAAI9E,SAA3B,KAAyC,IAEtD8E,EAAInE,aAAe,8BAAOmE,EAAInE,gBAKrC,kBAAC,GAAD,CAAM+X,QAAM,EAACF,IAAKuB,GAAUjV,EAAIhF,MAAO2Y,KAAM,OCb7CsC,GAAYC,aAAUlI,IAAS,SAAC3E,GAAD,MAAiB,CACpDgI,OAAQ,GACRnD,MAAO7E,EAAM2J,OACbV,SAAU,OACVvE,WAAY,SACZ4C,QAAS,UACTwB,WAAY,OACZzE,KAAM,EACNyI,UAAW,SACXzF,WAAY,OACZnD,QAAS,WAWL6I,GAAU9I,aAAO,OAAO,SAACjE,GAAgB,IACrCgN,EAAgDhN,EAAhDgN,UAAWC,EAAqCjN,EAArCiN,QAASC,EAA4BlN,EAA5BkN,WAE5B,MAAO,CACLC,OAAQ,GACR/E,SAAU,WACVb,UALsDvH,EAAhBoN,YAMlC,qBACAJ,EACA,qBACAC,EACA,qBACA,OACJ,SAAU,CACR1F,UAZc2F,IAAeF,EAYN,0BAAuB9R,GAEhD2N,WAAY,eAQVwE,GAAgB,SAACrN,GAAgC,IAC7CsN,EAAuBtN,EAAvBsN,QAASrX,EAAc+J,EAAd/J,UACjB,OACE,kBAAC2W,GAAD,CAAWjD,OAAQ4D,GAAatX,EAAWqX,IACzC,kBAAC,GAAD,CACEjD,IAAKa,GAAYoC,IAAY,GAC7BpT,KAAMqT,GAAatX,EAAWqX,GAC9BhD,KAAM,GACNxF,MAAO,CAAE0I,YAAa,KAEvBvX,EAAU/D,MAAMob,KAKjBC,GAAe,SACnBtX,EACA7C,GAEA,IAAMkN,EAAIrK,EAAU/D,MAAMkB,GACpBmN,EAAItK,EAAUiB,SAAS9D,GAC7B,OAAIkN,EAAIC,EAAU,aACdA,EAAID,EAAU,aACX,yBAGImN,GAAiB,SAACzN,GAAgC,IAE3D/J,EAME+J,EANF/J,UACAiL,EAKElB,EALFkB,gBACAwM,EAIE1N,EAJF0N,UACAC,EAGE3N,EAHF2N,SACArH,EAEEtG,EAFFsG,WACAkE,EACExK,EADFwK,QAEI7Z,EAASsF,EAAUtF,OAASsF,EAAU/D,MAAMxB,aAClD,OACE,kBAACqc,GAAD,CACEG,WAAYQ,IAAczX,EAAUkB,KACpC8V,QAAShX,EAAU1E,KAAO2P,EAAgB3P,GAC1Cyb,UAAWW,EACXP,YAAa9G,EACbxB,MAAO,CACL8I,QAAS3X,EAAUkB,KAAO,GAAM,IAGlC,kBAAC,GAAD,CACEqT,QAAS,kBAAOA,IAAYvU,EAAUkB,KAAOqT,IAAY,MACzD1F,MAAO,CACL+I,YAAa,EACbC,OAAQtD,EAAU,UAAY,WAEhCxD,SAAU,CAAEM,QAAS,EAAGkB,SAAU,MAElC,kBAACxE,GAAD,CAAec,MAAO,CAAEqC,OAAQ,oBAC9B,kBAACnD,GAAD,CAAec,MAAO,CAAEiJ,YAAa,oBACnC,yBACEC,IAAI,UACJhG,OAAO,MACPyB,MAAM,MACNY,IAAG,qCAAgCpU,EAAU3E,KAA1C,YACHwT,MAAO,CACLkD,OAAQ,IACRyB,MAAO,QAIb,kBAACzF,GAAD,CAAeM,OAAK,EAACF,WAAW,UAC9B,kBAACJ,GAAD,CACEc,MAAO,CACLmJ,WAAY,EACZT,aAAc,EACdlG,QAAS,QACT4G,YAAa,EACb7G,WAAY,OACZW,OAAQ,GACRc,WAAY,OACZqF,aAAc,kCACd5G,UAAW,sBAGb,0BACEzC,MAAO,CACLJ,WAAY,SACZ+D,WAAY,sBAGbxS,EAAU3E,OAGf,kBAAC0S,GAAD,KACE,0BACEc,MAAO,CACLJ,WAAY,SACZ4C,QAAS,EACT2B,SAAU,GACVjB,OAAQ,GACRc,WAAY,OACZjE,MAAO,YAGRlU,EAAS,EAAIA,EAAS,GAEzB,kBAAC4T,GAAD,MACA,kBAACP,GAAD,CAAeI,WAAW,UACxB,kBAACJ,GAAD,KACE,kBAAC,GAAD,CACEqG,IAAK+D,KACLlU,KAAM,wBACNoQ,KAAM,GACNC,QAAM,EACNzF,MAAO,CAAEwC,QAAS,EAAGwG,OAAQ,aAE/B,kBAAC,GAAD,CACEzD,IAAKgE,KACLnU,KAAM,wBACNoQ,KAAM,GACNC,QAAM,EACNzF,MAAO,CAAEwC,QAAS,EAAGwG,OAAQ,gBAKrC,kBAACvJ,GAAD,MACA,kBAAC,GAAD,CACEjT,KAAK,SACLuT,MAAM,UACNkD,IAAK9R,EAAUtF,OACfb,MAAOD,EAAMc,GACbqX,OAAQ,IAEPnY,EAAMc,GAPT,IAOmBsF,EAAUtF,QAE7B,kBAAC,GAAD,CACEW,KAAK,KACLuT,MAAM,UACNkD,IAAK,KACLjY,MAAO,KACPkY,OAAQ,IALV,aASA,kBAAC,GAAD,CACEkC,WAAY,CAAEJ,QAAS,OAAQE,MAAO,SACtC9B,QAAS,kBAAC,GAAD,yBAET,8BAAOjS,EAAUN,QAEnB,kBAACqO,GAAD,KACE,kBAAC,GAAD,CAAesJ,QAAQ,WAAWrX,UAAWA,IAC7C,kBAAC,GAAD,CAAeqX,QAAQ,QAAQrX,UAAWA,IAC1C,kBAAC,GAAD,CAAeqX,QAAQ,eAAerX,UAAWA,IACjD,kBAAC,GAAD,CAAeqX,QAAQ,aAAarX,UAAWA,IAC/C,kBAAC,GAAD,CAAeqX,QAAQ,SAASrX,UAAWA,IAC3C,kBAAC,GAAD,CAAeqX,QAAQ,UAAUrX,UAAWA,IAC5C,kBAAC,GAAD,CAAeqX,QAAQ,OAAOrX,UAAWA,QAKjD,kBAAC+N,GAAD,CACEc,MAAO,CACLsD,SAAU,WACVY,IAAK,QACLD,MAAO,QAGR9S,EAAUJ,KAAKQ,KAAI,SAACM,GAAD,OAClB,kBAAC,GAAD,CAAY8Q,UAAU,KAAK9Q,IAAKA,QAGpC,kBAAC,GAAD,CACEuT,WAAY,CAAEJ,QAAS,OAAQE,MAAO,QAASL,OAAQ,aACvDzB,QAAS,kBAAC,GAAD,eAET,8BAAOjS,EAAU/D,MAAM3B,QAEzB,kBAAC,GAAD,CACE2Z,WAAY,CAAEJ,QAAS,OAAQE,MAAO,QAASL,OAAQ,QACvDzB,QAAS,kBAAC,GAAD,0BAET,8BAAOjS,EAAU/D,MAAM1B,aAEzB,kBAAC,GAAD,CACE0Z,WAAY,CAAEJ,QAAS,QAASE,MAAO,QAASL,OAAQ,cACxDzB,QAAS,kBAAC,GAAD,iBAET,8BAAOjS,EAAU/D,MAAMzB,UAEzB,kBAAC4Y,GAAD,CACES,QAAQ,QACRE,MAAM,OACNR,MAAM,OACNG,OACmC,aAAjC1T,EAAUF,OAAO9D,OAAON,KACpB,wBACA,OAENmT,MAAO,CAAEmE,SAAU,KAElBhT,EAAUF,OAAO9D,OAAOA,UC/PpBqc,GAASrK,aAAO,UAAU,SAACjE,GACtC,MAAO,CACL8N,OAAQ,UACRzG,WAAY,OACZE,UAAW,0BACXkB,WAAY,oBACZtB,OAAQ,kCACRtC,MAAO,sBACP,SAAU,CACRsC,OAAQ,mCAEV,UAAW,CACToH,QAAS,OACTpH,OAAQ,mCAEV,SAAU,CACRoH,QAAS,QAEXjH,QAAS,gBAIAkH,GAAgB3B,aAAUyB,IAAQ,SAACtO,GAAyB,IAC/DoE,EAAepE,EAAfoE,WACR,MAAO,CAGLqK,UAA0B,SAAfrK,EAAwB,YAASlJ,EAC5CiT,aAA6B,OAAf/J,EAAsB,YAASlJ,EAC7CoM,QAAS,YACTC,UAAW,0BACX,SAAU,CACRkH,UAA0B,SAAfrK,EAAwB,YAASlJ,EAC5CiT,aAA6B,OAAf/J,EAAsB,YAASlJ,OC5BtCwT,GAAoB,SAAC1O,GAAoC,IAC5DpG,EAAUoG,EAAVpG,MAD2D,EAQ/DoI,KALFd,EAHiE,EAGjEA,gBACAC,EAJiE,EAIjEA,cAEAQ,GANiE,EAKjEP,gBALiE,EAMjEO,iBACAE,EAPiE,EAOjEA,KAPiE,EAU/BS,oBAAkB,GAVa,mBAUhDiE,GAVgD,WAWnE,OACE,kBAACvC,GAAD,CAAeI,WAAW,UACxB,kBAACJ,GAAD,CACEc,MAAO,CACL8D,eAAgB,eAChBD,WAAY,WACZmF,OAAsC,WAAjB,OAAb3M,QAAa,IAAbA,OAAA,EAAAA,EAAe5N,YAAyB,UAAY,WAE9DoT,aAAc,kBAAMJ,GAAc,IAClCO,aAAc,kBAAMP,GAAc,IAClCiE,QAAS,WACHrJ,GAA8C,UAA7BA,EAAc5N,YACjCoO,EAAgB/H,KAInBA,EAAMC,WAAWxD,KAAI,SAACtD,GAAD,OACpB,yBAAKK,IAAKL,EAAExB,IACT4P,IACEpO,EAAEoE,OAC4B,SAA7BgK,EAAc5N,YACdR,EAAExB,KAAO2P,EAAgB3P,IACI,SAA7B4P,EAAc5N,aACd,kBAACyQ,GAAD,CAAec,MAAO,CAAE8D,eAAgB,WACtC,yBAAK9D,MAAO,CAAEyC,UAAW,sBACvB,kBAACiH,GAAD,CAAehE,QAAS,kBAAM3I,EAAK9O,IAAIqR,WAAW,MAAlD,oBAMR,kBAAC,GAAD,CAAgBlD,gBAAiBA,EAAiBjL,UAAWlD,SAIlEoO,GAA8C,UAA7BA,EAAc5N,YAC9B,kBAACyQ,GAAD,CAAec,MAAO,CAAE8D,eAAgB,WACtC,yBAAK9D,MAAO,CAAEyC,UAAW,sBACvB,kBAACiH,GAAD,CACEhE,QAAS,kBAAM3I,EAAKjI,IACpB+M,aAAc,kBAAMJ,GAAc,IAClCO,aAAc,kBAAMP,GAAc,KAHpC,4B,oBCjDCtH,GAAmC,CAC9C4I,QAAQ,EACR8G,SAAU,KACVC,SAAU,KACVtQ,QAAS,KACTuQ,UAAU,EACVC,OAAQ,IAGGC,GAAO,oBACPC,GAAQ,qBAORzQ,GACL,SACJoQ,EACAG,EACAD,EACAD,GAJI,MAKA,CACJjd,KAAMod,GACNJ,WACAG,SACAD,WACAD,aAXSrQ,GAaJ,iBAAO,CAAE5M,KAAMqd,KAbXzQ,GAcC,SAACD,GAAD,MAAmB,CAAE3M,KAlBR,2BAkB2B2M,YAdzCC,GAeE,SAACoQ,GAAD,MAAmC,CAC9Chd,KAtBwB,4BAuBxBgd,aAjBSpQ,GAmBE,SAACqQ,GAAD,MAAoC,CAC/Cjd,KAzBwB,4BA0BxBid,aArBSrQ,GAuBE,SAACsQ,GAAD,MAAwB,CAAEld,KA1Bb,4BA0BiCkd,aAvBhDtQ,GAwBA,SAACuQ,GAAD,MAA2B,CAAEnd,KA1BjB,yBA0BkCmd,WAGrDlQ,IAGL,oBACEmQ,IAAO,SAAClQ,EAA2BC,GAA5B,sBACHD,EADG,CAENgJ,QAAQ,EACR8G,SAAU7P,EAAO6P,SAAW7P,EAAO6P,SAAW9P,EAAM8P,SACpDG,OAAQhQ,EAAOgQ,OAAShQ,EAAOgQ,OAASjQ,EAAMiQ,QAAU,GACxDD,SAAU/P,EAAO+P,WAAY,EAC7BD,SAAU9P,EAAO8P,SAAW9P,EAAO8P,SAAW/P,EAAM+P,cAPvD,eASEI,IAAQ,SAACnQ,GAAD,sBACJA,EADI,CAEPgJ,QAAQ,OAXX,eAlC0B,4BA+CV,SAAChJ,EAA2BC,GAA5B,sBACVD,EADU,CAEbP,QAASQ,EAAOR,aAfnB,eApC2B,6BAqDV,SAACO,EAA2BC,GAA5B,sBACXD,EADW,CAEd+P,SAAU,KACVtQ,QAAS,KACTqQ,SAAU7P,EAAO6P,SACjBE,UAAU,EACV/J,MAAO,QAvBV,eAnC2B,6BA4DV,SAACjG,EAA2BC,GAA5B,sBACXD,EADW,CAEd+P,SAAU9P,EAAO8P,cA3BpB,eAjC2B,6BA8DV,SAAC/P,EAA2BC,GAA5B,sBACXD,EADW,CAEdgQ,SAAU/P,EAAO+P,cA/BpB,eAhCwB,0BAiEV,SAAChQ,EAA2BC,GAA5B,sBACRD,EADQ,CAEXiQ,OAAQhQ,EAAOgQ,YAnClB,GAuCYG,GAAU,WAGjB,IAFJpQ,EAEG,uDAFyBI,GAC5BH,EACG,uCACGoQ,EAAetQ,GAAKE,EAAOnN,MACjC,OAAOud,EAAeA,EAAarQ,EAAOC,GAAUD,GC1EzCsQ,GAAetP,IAAMC,cATI,CACpCsP,KAAM,kBAAM,MACZC,MAAO,kBAAM,MACbC,YAAa,kBAAM,MACnBC,WAAY,kBAAM,MAClBC,YAAa,kBAAM,MACnBC,YAAa,kBAAM,MACnBC,UAAW,kBAAM,QAGNC,GAAkB,kBAAM1N,qBAAWkN,KAO1CS,GAAkB,SACtB/Q,EACAJ,GAFsB,MAGlB,CACJoJ,OAAQhJ,EAAMgJ,OACduH,KAAM,SACJT,EACAG,EACAD,EACAD,GAEAnQ,EAASF,GAAaoQ,EAAUG,EAAQD,EAAUD,KAEpDS,MAAO,SAAC/Q,GACFO,EAAM+P,UAAU/P,EAAM+P,SAAStQ,GAAWO,EAAMP,SACpDG,EAASF,OAEXgR,WAAY,SAACjR,GAAD,OAAkBG,EAASF,GAAmBD,KAC1DkR,YAAa,SAACb,GAAD,OACXlQ,EAASF,GAAoBoQ,KAC/Bc,YAAa,SAACb,GAAD,OACXnQ,EAASF,GAAoBqQ,KAC/BU,YAAa,SAACT,GAAD,OAAuBpQ,EAASF,GAAoBsQ,KACjEa,UAAW,SAACZ,GAAD,OAA0BrQ,EAASF,GAAkBuQ,OAElEe,KAAMC,cAAc,SAIb,IAAMC,GAAuB,SAAC/P,GAAuC,IAClEC,EAAaD,EAAbC,SACF+P,EAAeC,qBAAWhB,GAAShQ,IAClCJ,EAHkE,YAGzDmR,EAHyD,MAInEE,EAAU7Q,mBAAQ,kBAAMuQ,GAAe,WAAf,cAAmBI,MAAe,CAC9DA,IAGF,OACE,kBAACb,GAAahP,SAAd,CAAuBrQ,MAAOogB,GAC3BjQ,EACD,kBAAC,KAAD,CACE4H,OAAQhJ,EAAMgJ,OACdsI,eAAgB,WACTtR,EAAMgQ,UAAUqB,EAAQb,SAE/BvK,MAAO,CACLoD,QAAQ,aACNQ,gBAAiB,OACjB7D,MAAO,QACP4E,MAAO,IACP0D,OAAQ,SACRtD,OAAQ,QACRxB,YAAa,QACVxJ,EAAMiQ,OAAOsB,OAElBC,QAAQ,aACN3H,gBAAiB,sBACd7J,EAAMiQ,OAAOuB,WAInBxR,EAAM8P,UAAY,iC,8BCpFd2B,GAAc,SAACtQ,GAA8B,IAChD5E,EAAU4E,EAAV5E,MACR,OACE,kBAAC4I,GAAD,CACEc,MAAO,CAAE8D,eAAgB,SAAUtB,QAAS,iBAE3ClM,EAAM3H,MAAM4C,KAAI,SAAC2C,EAAMoB,GAAP,OACf,kBAAC,GAAD,CACEhH,IAAKgH,EACLrB,MAAO,CAAEwX,MAAOvX,EAAK5F,KAAO,WAAY+F,YAAQ+B,UAU7CsV,GAAa,SAACxQ,GAAwB,IACzCjH,EAAUiH,EAAVjH,MACR,OACE,yBACE+L,MAAO,CACLwC,QAAS,WACTsG,aAA0B1S,IAAjBnC,EAAMI,OAAuB,GAAM,IAG9C,kBAACkQ,GAAD,CAAOE,WAAW,EAAOC,MAAO,IAC9B,kBAAC,GAAD,CACEa,IAAKa,GAAanS,EAAMwX,OAA0B,aAAe,GACjErW,KAAMuW,GAAS1X,EAAMI,QACrBmR,KAAM,MAEU,IAAjBvR,EAAMI,QACL,kBAAC,GAAD,CACEkR,IAAKqG,KACLxW,KAAM,aACNoQ,KAAM,GACNxF,MAAO,CAAEsD,SAAU,WAAYY,IAAK,QAQ1CyH,GAAW,SAACtX,GAChB,OAAe,IAAXA,EAAwB,QACC,yBClDlBwX,GAAsB,SAAC3Q,GAAsC,IAAD,EAC5CA,EAAnB4Q,eAD+D,WAEvC5O,KAAxBV,EAF+D,EAE/DA,YAAaQ,EAFkD,EAElDA,OAFkD,EAG/C6N,KAAhBP,EAH+D,EAG/DA,KAAMC,EAHyD,EAGzDA,MAHyD,EAI3C/M,oBAAS,GAJkC,mBAIhEuF,EAJgE,KAIxDgJ,EAJwD,KA6BvE,OAvBA1N,qBAAU,WACJ7B,IAAgBuG,IAClBgJ,GAAU,GACND,GACFxB,EACE,kBAAC,GAAD,CACEC,MAAO,WACLA,GAAM,GACNwB,GAAU,GACV/O,OAGJ,CACEuO,QAAS,CACPhJ,WAAY,iBAGhB,MAIL,CAACuJ,EAAS/I,EAAQvG,EAAa8N,EAAMC,EAAOvN,KAE1C8O,GAAWtP,GAAeA,EAAY,GAEvC,kBAAC0C,GAAD,CAAec,MAAO,CAAEkD,OAAQ,MAC9B,kBAAC,GAAD,CACEqH,MAAO,WACLwB,GAAU,GACV/O,QAMH,MAUIgP,GAAc,SAAC9Q,GAA8B,IAChDqP,EAAUrP,EAAVqP,MACA/N,EAAgBU,KAAhBV,YAF+C,EAG3BgB,oBAAS,GAHkB,mBAGhDd,EAHgD,KAGxCgB,EAHwC,KAIjDuO,EAASzP,GAAe,GACxBvF,EAAQgV,EAAO,GALkC,EAMfzO,mBACrCvG,EAEGA,EAAMM,YAAYhG,KAAI,SAAC8C,EAAQiB,GAAT,MAAgB,CACpCmW,MAAOxU,EAAMX,MAAM3H,MAAM2G,GAAGhH,KAAO,SACnC+F,YAAQ+B,MAHV,IARiD,mBAMhDmG,EANgD,KAMlCwB,EANkC,KAgDvD,GA9BAM,qBAAU,WACR,IAAM6N,EAASC,KAAMC,aACnB,IACA7P,EAAahL,KAAI,SAACkG,EAAGnC,GAAJ,sBAAgBmC,EAAhB,CAAmByB,MAAO5D,QAE7C4W,EAAOG,SAAQ,SAAChY,GARQ,IAACrJ,EAAiBkO,EAAjBlO,EAUrB,CACEygB,MAAOpX,EAAOoX,MACdpX,OACmB,aAAjBA,EAAOoX,MACHxU,EAAMe,gBACNf,EAAMM,YAAYlD,EAAO6E,OAAO7E,QAfF6E,EAiBtC7E,EAAO6E,MAhBX6E,GAAgB,SAACtG,GAAD,OAAOA,EAAElG,KAAI,SAACkG,EAAGnC,GAAJ,OAAWA,IAAM4D,EAAQlO,EAAQyM,WAmB9DyU,EAAOI,OAAM,WACXH,KAAMI,MAAM,SAAKnW,GAAWiW,SAAQ,WAClC3O,GAAU,WAGb,IAEHW,qBAAU,WACJ3B,GACF6N,MAED,CAAC7N,EAAQ6N,KAEPtT,EAAO,OAAO,KAEP,eACPA,EAAMf,OADC,CAEV1J,KAAMyf,EAAOnhB,OAAS,EAAhB,UAAuBmhB,EAAOnhB,OAA9B,eAAoDmM,EAAMf,OAAO1J,OAGzE,OACE,kBAAC0S,GAAD,CAAeI,WAAW,SAASU,MAAO,CAAEgI,UAAW,WACrD,kBAAC9I,GAAD,CAAec,MAAO,CAAE8D,eAAgB,iBACrCvH,EAAahL,KAAI,SAAC8C,EAAQiB,GAAT,OAChB,kBAAC,GAAD,CAAYhH,IAAKgH,EAAGrB,MAAOI,UCxGxBmY,GAAe,SAACtR,GAA+B,IjCK1D/J,EiCJQmF,EAA2B4E,EAA3B5E,MAAOS,EAAoBmE,EAApBnE,OAAQM,EAAY6D,EAAZ7D,QACjBoV,GjCGNtb,EiCH2C4F,EAAQT,EAAM3H,MjCM/B4C,KAAI,SAAC0C,GAAD,OAAWX,GAAiBnC,EAAW8C,MAC3ClG,QAAO,SAACC,EAAGC,GACnC,OAAOD,GAAKC,EAAI,OACf,IiCRGd,EAASuJ,GAAeJ,EAAOS,GAC/B2V,E7BkN2B,SACjCpW,EACAS,EACAM,GAEA,IAAI4E,OAA0B7F,EAC1B6M,OAA0B7M,EAC9B,OAAKiB,GACLA,EAAQrC,SAAQ,SAACkB,GACf,IAAM/I,EAASuJ,GAAeJ,EAAOS,EAAQb,GAAQ/I,aACzCiJ,IAAR6M,GAAqB9V,EAAS8V,KAAKA,EAAM9V,SACjCiJ,IAAR6F,GAAqB9O,EAAS8O,KAAKA,EAAM9O,MAE3C8O,IAAQgH,EAAW,GAAN,OAAUA,GAAO,GAC5B,GAAN,OAAUhH,EAAV,YAAiBgH,IAPG,GAAN,OAAUvM,GAAeJ,EAAOS,GAAQ5J,Q6BzNjCwf,CACnBrW,EACAS,EACmB,IAAnBM,EAAQvM,YAAesL,EAAYiB,GAE/Bd,EAAcF,GAAeC,EAAOS,GAC1C,OACE,kBAAC,GAAD,CACEiJ,MAAO,CAAEmJ,UAAW,GAAI7F,SAAU,YAClCpB,SAAU,CAAEK,WAAY,SAExB,kBAACrD,GAAD,CAAeI,WAAW,SAASU,MAAO,CAAE6D,WAAY,WACtD,kBAAC3E,GAAD,CAAec,MAAO,CAAEmJ,WAAY,KAClC,kBAAC1J,GAAD,MACA,kBAAC,GAAD,CACEyC,SAAU,CACRM,QAAS,WACTD,WAAY,OACZ3C,WAAY,WAGbtJ,EAAM9J,MAET,kBAACiT,GAAD,OAEF,0BAAMO,MAAO,CAAED,MAAO,wBAAyBoJ,UAAW,IAA1D,WACWxe,KAAKC,MAAsB,IAAhB6hB,GADtB,KAC8C,IAC3ClW,EAAYzL,OAAS,GAAK,IAF7B,IAEmCyL,GAEnC,kBAAC2I,GAAD,CAAeM,OAAK,EAACQ,MAAO,CAAE2E,MAAO,OAAQkD,aAAc,IACxD1a,EAAOA,OAAS,GACf,kBAAC+R,GAAD,CACEM,OAAK,EACLF,WAAW,SACXU,MAAO,CAAE6D,WAAY,SAAU6E,YAAa,KAE5C,0BACE1I,MAAO,CACLD,MAAuB,aAAhB5S,EAAON,KAAsB,YAAc,OAClD+S,WAAY,SACZuE,SAAU,KAGXuI,GAEH,0BAAM1M,MAAO,CAAED,MAAO,0BAAtB,YAGJ,kBAACb,GAAD,CACEM,OAAK,EACLF,WAAW,SACXU,MAAO,CAAE6D,WAAY,WAErB,0BACE7D,MAAO,CACLJ,WAAY,SACZuE,SAAU,KAGXpN,EAAO3J,MAAMkJ,EAAM3H,MAAM,GAAGL,KAAO,aACjCgI,EAAM3H,MAAM,GAAGJ,QAAU,GAP9B,KAUA,0BAAMyR,MAAO,CAAED,MAAO,0BAAtB,mBAKJ,kBAACb,GAAD,CAAec,MAAO,CAAE6H,cAAe,KACrC,kBAACpI,GAAD,MACA,kBAAC,GAAD,CACEyC,SAAU,CAAEM,QAAS,WAAYD,WAAY,OAAQ4B,SAAU,KAE9D7N,EAAM7H,YAET,kBAACgR,GAAD,UCrFGmN,GAAgB,WAAO,IAAD,EAM7B1P,KAJFd,EAF+B,EAE/BA,gBACAC,EAH+B,EAG/BA,cACAC,EAJ+B,EAI/BA,gBACAM,EAL+B,EAK/BA,cAGF,OAAKR,GAAmBA,EAAgBxL,UAAYkI,GAIlD,kBAACoG,GAAD,CAAeI,WAAW,SAASU,MAAO,CAAE0D,SAAU,MACnDrH,GAAiB,kBAAC,GAAD,CAAa/F,MAAO+F,IACtC,kBAAC6C,GAAD,CAAec,MAAO,CAAE8D,eAAgB,WACrC1H,EAAgB/M,OAAOkC,KAAI,SAAC+E,GAAD,OAC1B6Q,GAAY7Q,EAAM7J,IAChB,kBAAC,GAAD,CAAO4U,MAAO,IACX,gBAAGG,EAAH,EAAGA,WAAH,OACC,kBAAC,GAAD,CACE+D,IAAK4B,GAAY7Q,EAAM7J,IACvB+Y,KAAM,GACNC,QAAQ,EACRzF,MAAO,CACLgJ,OAAQ,UACRxG,QAAS,UAEXkD,QAAS,kBAAM9I,EAActG,IAC7BlB,KACEkB,EAAM7J,MAAN,OAAa4P,QAAb,IAAaA,OAAb,EAAaA,EAAe5P,IACxB,cACA+U,EACA,QACA,6BAMZ,kBAACgI,GAAD,CACElb,IAAKgI,EAAM7J,GACXiZ,QAAS,kBAAM9I,EAActG,IAC7B0J,MAAO,CACLuC,WAAY,OACZgB,YACElH,GAAiB/F,EAAM7J,KAAO4P,EAAc5P,GACxC,aACA2J,IAGPE,EAAM9J,UAKd6P,GACC,kBAAC,GAAD,CACE/F,MAAO+F,EACPtF,OAAQqF,EACR/E,QAASiF,KAlDR,MCCL2L,GAAU9I,aAAO,OAAO,SAACjE,GAAgB,IACrCgN,EAAgDhN,EAAhDgN,UAAWC,EAAqCjN,EAArCiN,QAASC,EAA4BlN,EAA5BkN,WAE5B,MAAO,CACLC,OAAQ,GACR5F,UAJsDvH,EAAhBoN,YAKlC,qBACAJ,EACA,qBACAC,EACA,qBACA,OACJ,SAAU,CACR1F,UAXc2F,IAAeF,EAWN,0BAAuB9R,GAEhD2N,WAAY,eAGH8I,GAAiB,SAAC3R,GAAiC,IAE5D/J,EAME+J,EANF/J,UACAiL,EAKElB,EALFkB,gBACAwM,EAIE1N,EAJF0N,UACAC,EAGE3N,EAHF2N,SACArH,EAEEtG,EAFFsG,WACAkE,EACExK,EADFwK,QAEI7Z,EAASsF,EAAUtF,OAASsF,EAAU/D,MAAMxB,aAClD,OACE,yBACE8Z,QAAS,kBAAOA,IAAYvU,EAAUkB,KAAOqT,IAAY,MACzD1F,MAAO,CACL+I,YAAa,EACbpE,MAAO,IACPrB,SAAU,WACV0F,OAAQtD,EAAU,UAAY,UAC9B3F,MAAO,wBACP+I,QAAS3X,EAAUkB,KAAO,GAAM,IAGlC,kBAAC6M,GAAD,CAAec,MAAO,CAAE6D,WAAY,WAClC,kBAAC3E,GAAD,CAAec,MAAO,CAAEqC,OAAQ,oBAC9B,kBAAC,GAAD,CACE+F,WAAYQ,IAAczX,EAAUkB,KACpC8V,QAAShX,EAAU1E,KAAO2P,EAAgB3P,GAC1Cyb,UAAWW,EACXP,YAAa9G,EACbxB,MAAO,CACLkD,OAAQ,GACRyB,MAAO,KAGT,yBACEuE,IAAI,UACJhG,OAAO,KACPyB,MAAM,KACNY,IAAG,qCAAgCpU,EAAU3E,KAA1C,UACHwT,MAAO,CACLkD,OAAQ,GACRyB,MAAO,QAKf,kBAACzF,GAAD,CAAeM,OAAK,EAACF,WAAW,UAC9B,kBAACJ,GAAD,CACEc,MAAO,CACL8D,eAAgB,aAGlB,0BACE9D,MAAO,CACLwC,QAAS,UACTwF,UAAW,QACX7D,SAAU,GACVH,WAAY,OACZzB,WAAY,kBACZoB,WAAY,sBAGbxS,EAAU3E,OAGf,yBAAKwT,MAAO,CAAEyC,UAAW,iCACvB,kBAAC,GAAD,CACEjW,KAAK,SACLuT,MAAM,UACNkD,IAAK9R,EAAUtF,OACfb,MAAOD,EAAMc,GACbqX,OAAQ,IAEPnY,EAAMc,GAPT,IAOmBsF,EAAUtF,SAG/B,kBAAC0Y,GAAD,CAAOW,MAAM,OAAOF,QAAQ,OAAON,MAAM,OAAOG,OAAO,cACpD1T,EAAUN,OAEb,kBAACqO,GAAD,CACEc,MAAO,CACLsD,SAAU,WACVyB,OAAQ,QACRvB,KAAM,SAGPrS,EAAUJ,KAAKQ,KAAI,SAACM,GAAD,OAClB,kBAAC,GAAD,CAAYA,IAAKA,QAGrB,kBAACqN,GAAD,CACEc,MAAO,CACLsD,SAAU,WACVyB,OAAQ,OACRd,MAAO,MACPU,MAAO,GACPd,WAAY,WAGd,kBAACpE,GAAD,MACCtO,EAAU/D,MAAM3B,MAAQ,GACvB,kBAAC8Y,GAAD,CACEE,WAAW,EACXQ,OAAO,MACPP,MAAM,OACNG,OAAO,aAEN1T,EAAU/D,MAAM3B,OAGpB0F,EAAU/D,MAAM1B,WAAa,GAC5B,kBAAC6Y,GAAD,CAAOE,WAAW,EAAOC,MAAM,OAAOG,OAAO,QAC1C1T,EAAU/D,MAAM1B,YAGrB,kBAAC+T,GAAD,QAGJ,0BACEO,MAAO,CACLJ,WAAY,SACZuE,SAAU,GACVjB,OAAQ,GACRc,WAAY,OACZL,WAAY,qBACZ5D,MAAO,YAGRlU,EAAS,EAAIA,EAAS,MC5JpBihB,GAAc,SAAC5R,GAA8B,IAChDpG,EAAUoG,EAAVpG,MAD+C,EAQnDoI,KALFd,EAHqD,EAGrDA,gBACAC,EAJqD,EAIrDA,cAEAQ,GANqD,EAKrDP,gBALqD,EAMrDO,iBACAE,EAPqD,EAOrDA,KAPqD,EAUnBS,oBAAkB,GAVC,mBAUpCiE,GAVoC,WAWvD,OACE,kBAACvC,GAAD,CAAeI,WAAW,UACxB,kBAACJ,GAAD,CACEc,MAAO,CACL8D,eAAgB,eAChBkF,OAAsC,WAAjB,OAAb3M,QAAa,IAAbA,OAAA,EAAAA,EAAe5N,YAAyB,UAAY,WAE9DoT,aAAc,kBAAMJ,GAAc,IAClCO,aAAc,kBAAMP,GAAc,IAClCiE,QAAS,WACHrJ,GAA8C,UAA7BA,EAAc5N,YACjCoO,EAAgB/H,KAInBA,EAAMC,WAAWxD,KAAI,SAACtD,GAAD,OACpB,yBAAKK,IAAKL,EAAExB,IACV,kBAAC,GAAD,CAYE2P,gBAAiBA,EACjBjL,UAAWlD,IAEZoO,GAC8B,WAA7BA,EAAc5N,aACbR,EAAEoE,MACH+J,EAAgBxL,UAAYkI,IAC1B,kBAACoG,GAAD,CACEc,MAAO,CAAE8D,eAAgB,SAAUqF,WAAY,KAE/C,yBAAKnJ,MAAO,CAAEyC,UAAW,sBACvB,kBAACiH,GAAD,CAAehE,QAAS,kBAAM3I,EAAK9O,IAAIqR,WAAW,QAAlD,yBASbjD,GAA8C,UAA7BA,EAAc5N,YAC9B,kBAACyQ,GAAD,CAAec,MAAO,CAAE8D,eAAgB,WACtC,yBAAK9D,MAAO,CAAEyC,UAAW,sBACvB,kBAACiH,GAAD,CACEhE,QAAS,kBAAM3I,EAAKjI,IACpB+M,aAAc,kBAAMJ,GAAc,IAClCO,aAAc,kBAAMP,GAAc,KAHpC,4B,UC3DCsL,GAAc,SAAC7R,GAA8B,IAChDS,EAAsBT,EAAtBS,MAAO5G,EAAemG,EAAfnG,WACTiY,EAAQjY,EAAW9B,MACvB,SAAChF,GAAD,OAAOA,EAAExB,KAAOyP,GAASP,MAErBsR,E1BsFoB,SAACtR,GAC3B,OAAOC,OAAOC,KAAKF,GAAOJ,MAAK,SAACC,EAAGC,GAAJ,OAAUE,EAAMH,GAAKG,EAAMF,M0BvFxCyR,CAAavR,GACzBwR,EAAO,sBACRF,GADQ,YAERA,GAFQ,YAGRA,GAHQ,YAIRA,GAJQ,YAKRA,GALQ,YAMRA,IAECG,EAAQziB,KAAKC,MAAM,MAd8B,EAelCuK,MAAMiY,GACxBhY,KAAK,MACL7D,KAAI,SAAC8D,EAAGC,GAAJ,OAAU6X,EAAQ7X,MACtB/D,KAAI,SAAC9E,GAAD,OAAQsI,EAAW9B,MAAK,SAAChF,GAAD,OAAOA,EAAExB,KAAOA,QAC5CkG,QAAO,SAAC1E,GAAD,YAAamI,IAANnI,KAnBsC,kBAoBjDgV,GApBiD,gB1BOnC,SAACtH,GACrB,OAAOC,OAAOC,KAAKF,GAAO5N,QAAO,SAAC0J,EAAWhL,GAC3C,OAAIgL,EAAIkE,EAAMlP,GAAYkP,EAAMlP,GACzBgL,IACNqE,OAAOuR,mB0BSEC,CAAO3R,IAEb4R,EAAYtK,EADN,GACkB,IAAMA,EAAM,EAC1C,OACE,kBAAC/D,GAAD,CAAeI,WAAW,UACxB,kBAACJ,GAAD,CACEc,MAAO,CACL8D,eAAgB,SAChBvB,WAAY,OACZW,OAAQ,GACRmG,aAAc,kCACd5G,UAAW,sBAGb,kBAACvD,GAAD,CAAec,MAAO,CAAE2E,MAAO,MAC7B,kBAACzF,GAAD,KACE,yBACEgK,IAAI,UACJhG,OAAO,KACPyB,MAAM,KACNY,IAAG,qCAAgCyH,EAAMxgB,KAAtC,YACHwT,MAAO,CACLkD,OAAQ,GACRyB,MAAO,GACPtC,OAAQ,kCACRI,UAAW,wBAIjB,kBAACvD,GAAD,CAAeM,OAAK,EAACF,WAAW,UAC9B,kBAACG,GAAD,MACA,kBAACP,GAAD,CAAeM,OAAK,EAACQ,MAAO,CAAEsD,SAAU,aACrCvO,EACEpC,QAAO,SAAC1E,GAAD,OAAOA,EAAExB,KAAOugB,EAAMvgB,KAAOwB,EAAEoE,QACtCd,KAAI,SAACtD,EAAGqH,GAAJ,OACH,yBACEhH,IAAG,iBAAKL,QAAL,IAAKA,OAAL,EAAKA,EAAGxB,GAAR,YAAc6I,GACjB0K,MAAO,CACLkD,OAAQsC,GACRb,MAAOa,GACPlC,SAAU,WACVyB,OAAQ,MACRvB,KAAK,GAAD,OAAK7H,EAAM1N,EAAExB,IAAM8gB,EAAnB,KACJxJ,WAAY,aAGd,yBACEmF,IAAG,UAAKvN,GAAO,OAAD1N,QAAC,IAADA,OAAA,EAAAA,EAAGxB,KAAM,KACvByW,OAzET,GA0ESyB,MA1ET,GA2ESY,IAAG,4CAAgCtX,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAGzB,KAAnC,YACHwT,MAAO,CACLkD,OAAQsC,GACRb,MAAOa,GACPnD,OAAQ,kCACRgH,aAAc,oB,qBCtFzBmE,GAAY,WAAO,IACtBrN,EAAcC,KAAdD,UACFsN,EAAYC,iBAAuB,MAMzC,OALArP,qBAAU,WACJoP,EAAUE,SACZF,EAAUE,QAAQC,eAAe,CAAEC,SAAU,aAE9C,CAAC1N,IAEF,kBAACjB,GAAD,CACEI,WAAW,SACXU,MAAO,CACLwC,QAAS,EACTkB,SAAU,IACVR,OAAQ,IACRkB,SAAU,OACV7B,WAAY,kBACZxC,MAAO,0BAGRI,EAAU5O,KAAI,SAACuP,EAAMxL,GAAP,OACb,0BAAMhH,IAAKgH,GAAIwL,MAEjB,yBAAKgN,IAAKL,MCbHM,GAAS,WAAO,IAAD,EAWtB7Q,KATFpI,EAFwB,EAExBA,MACAmE,EAHwB,EAGxBA,WACAmD,EAJwB,EAIxBA,gBACArH,EALwB,EAKxBA,WACA4G,EANwB,EAMxBA,MACAe,EAPwB,EAOxBA,OACAD,EARwB,EAQxBA,UACAE,EATwB,EASxBA,kBACAG,EAVwB,EAUxBA,MAVwB,EAYF+N,KAAhBP,EAZkB,EAYlBA,KAAMC,EAZY,EAYZA,MACQnK,KAAdD,UAuBR,OAtBA9B,qBAAU,WACH5B,IACH6N,EACE,yBAAKtK,MAAO,CAAEgI,UAAW,WACvB,+CAGJjH,YAAW,WACTwJ,IACAzN,MACC,QAEJ,IACHuB,qBAAU,WACJ3B,GACF4N,EACE,yBAAKtK,MAAO,CAAEgI,UAAW,WACvB,8DAIL,CAACtL,IACCD,EACAL,EAGH,kBAAC8C,GAAD,CACEc,MAAO,CACLkD,OAAQ,QACRX,WAAW,OAAD,OAASyL,KAAT,mCACVC,eAAgB,UAGlB,kBAAC/O,GAAD,CAAeM,OAAK,EAACF,WAAW,UAC9B,kBAAC,GAAD,CAAa3D,MAAOA,EAAO5G,WAAYA,IACvC,kBAACmK,GAAD,CACEI,WAAW,SACXE,OAAK,EACLQ,MAAO,CAAEwC,QAAS,cAElB,kBAACtD,GAAD,CAAeI,WAAW,SAASE,OAAK,GACtC,kBAAC,GAAD,CAAa1K,MAAOmE,KAEtB,kBAACiG,GAAD,CAAeM,OAAK,GAClB,kBAACC,GAAD,MACA,kBAACP,GAAD,CAAeI,WAAW,WACtB3C,GAAqB,kBAAC,GAAD,MACvB,kBAAC,GAAD,CAAqBmP,SAAS,KAEhC,kBAAC5M,GAAD,CAAeM,OAAK,EAACQ,MAAO,CAAE8D,eAAgB,aAC5C,kBAAC,GAAD,QAGJ,kBAAC5E,GAAD,CACEI,WAAW,SACXE,OAAK,EACLQ,MAAO,CAAE8D,eAAgB,aAEzB,kBAAC,GAAD,CAAmBhP,MAAOA,QAnCP,4DADN,MC1CZoZ,GAAM,WAAO,IAAD,EACmB1Q,mBAAiBvI,GAAU,IAD9C,mBAChBkZ,EADgB,KACDC,EADC,KAEvB,OACE,kBAAC,GAAD,CACEnV,WAAYkV,EACZ9Q,cAAe+Q,EACf9Q,kBAAmB,kBAAM8Q,EAAiBnZ,GAAU,MAEpD,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAAC,GAAD,UCNUoZ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+BCLAC,GAAoB,IAAIC,KACxBC,GCTJC,aAAYC,aAAgB,CAAEha,WAAUia,aAAQC,aAAgBC,QDWlEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,KAAD,CAAeR,MAAOA,IACpB,kBAAC,KAAD,CAAmB5jB,MAAO0jB,GAAQW,WAPc,EAOAC,qBAAmB,GACjE,kBAAC,GAAD,KACE,kBAAC,GAAD,UAKRC,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3J,MAAK,SAAA4J,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.17e78653.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/heart-beats.6b1fff9c.svg\";","module.exports = __webpack_public_path__ + \"static/media/biceps.e62c221f.svg\";","module.exports = __webpack_public_path__ + \"static/media/brain.ce65603a.svg\";","module.exports = __webpack_public_path__ + \"static/media/eye-target.4c5ae680.svg\";","module.exports = __webpack_public_path__ + \"static/media/juggler.1188c0be.svg\";","module.exports = __webpack_public_path__ + \"static/media/sprint.968b443a.svg\";","module.exports = __webpack_public_path__ + \"static/media/clover.df6a0d57.svg\";","module.exports = __webpack_public_path__ + \"static/media/convergence-target.0d2998bc.svg\";","module.exports = __webpack_public_path__ + \"static/media/star-swirl.3045bd1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/targeted.b4ce8dd7.svg\";","module.exports = __webpack_public_path__ + \"static/media/dodging.3c689d6d.svg\";","module.exports = __webpack_public_path__ + \"static/media/shield-reflect.1228e298.svg\";","module.exports = __webpack_public_path__ + \"static/media/high-shot.eed9def8.svg\";","module.exports = __webpack_public_path__ + \"static/media/shield-impact.54fdc5c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/fire-zone.42e13657.svg\";","module.exports = __webpack_public_path__ + \"static/media/heavy-timer.1072a406.svg\";","module.exports = __webpack_public_path__ + \"static/media/ubisoft-sun.30335592.svg\";","module.exports = __webpack_public_path__ + \"static/media/flat-hammer.dff14efb.svg\";","module.exports = __webpack_public_path__ + \"static/media/hammer-drop.120a92c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/bordered-shield.56c12b47.svg\";","module.exports = __webpack_public_path__ + \"static/media/skills.60519e24.svg\";","module.exports = __webpack_public_path__ + \"static/media/knapsack.62049a62.svg\";","module.exports = __webpack_public_path__ + \"static/media/split-cross.fa0be1a3.svg\";","module.exports = __webpack_public_path__ + \"static/media/flat-forestred.951e7322.jpg\";","export const getRandom = <T>(items: T[]) =>\r\n  items[Math.floor(Math.random() * items.length)]\r\n","export const noneg = (value: number) => (value > 0 ? value : 0)\r\n","import { StatsT, CharacterClassT } from '../types'\r\n\r\nexport const ZERO_STATS: StatsT = {\r\n  vigor: 0,\r\n  strength: 0,\r\n  intelligence: 0,\r\n  perception: 0,\r\n  talent: 0,\r\n\r\n  agility: 0,\r\n  luck: 0,\r\n  armor: 0,\r\n  resistance: 0,\r\n  evasion: 0,\r\n\r\n  healthOffset: 0,\r\n  health: 0,\r\n  healthRegen: 0,\r\n  criticalChance: 0,\r\n  damageModifier: 0,\r\n}\r\n\r\nexport const CLASS_STARTING_STATS: Record<CharacterClassT, StatsT> = {\r\n  blacksmith: {\r\n    strength: 76,\r\n    vigor: 80,\r\n    intelligence: 40,\r\n    perception: 52,\r\n    talent: 72,\r\n    agility: 56,\r\n    luck: 50,\r\n    armor: 2,\r\n    resistance: 0,\r\n    evasion: 7,\r\n    healthOffset: 0,\r\n    health: 0,\r\n    healthRegen: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n  },\r\n  hunter: {\r\n    strength: 52,\r\n    vigor: 66,\r\n    intelligence: 46,\r\n    perception: 78,\r\n    talent: 64,\r\n    agility: 78,\r\n    luck: 50,\r\n    armor: 1,\r\n    resistance: 0,\r\n    evasion: 20,\r\n    healthOffset: 0,\r\n    health: 0,\r\n    healthRegen: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n  },\r\n  scholar: {\r\n    strength: 42,\r\n    vigor: 60,\r\n    intelligence: 78,\r\n    perception: 66,\r\n    talent: 70,\r\n    agility: 70,\r\n    luck: 50,\r\n    armor: 0,\r\n    resistance: 1,\r\n    evasion: 13,\r\n    healthOffset: 0,\r\n    health: 0,\r\n    healthRegen: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n  },\r\n  bard: {\r\n    strength: 44,\r\n    vigor: 50,\r\n    intelligence: 70,\r\n    perception: 68,\r\n    talent: 78,\r\n    agility: 68,\r\n    luck: 50,\r\n    armor: 0,\r\n    resistance: 1,\r\n    evasion: 11,\r\n    healthOffset: 0,\r\n    health: 0,\r\n    healthRegen: 0,\r\n    criticalChance: 5,\r\n    damageModifier: 0,\r\n  },\r\n  enemy: ZERO_STATS,\r\n}\r\n","import { v4 } from 'uuid'\r\n\r\nexport const makeEntity = (name: string = '') => ({\r\n  id: v4(),\r\n  name,\r\n})\r\n","import { StatusTypeT, StatusT, TagTypeT, TagT } from '../types'\r\nimport { makeEntity } from '../functions/Entity'\r\nimport { ZERO_STATS } from './Stats'\r\n\r\nconst STATUS_DURATION = 5\r\nexport const STATUS_EFFECTS: Record<StatusTypeT, StatusT> = {\r\n  bleeding: {\r\n    ...makeEntity('Bleeding'),\r\n    type: 'bleeding',\r\n    canStack: false,\r\n    duration: STATUS_DURATION,\r\n    traits: [],\r\n    commitChance: 50,\r\n    committedTraits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          healthOffset: -10,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  burning: {\r\n    ...makeEntity('Burning'),\r\n    type: 'burning',\r\n    canStack: false,\r\n    duration: STATUS_DURATION,\r\n    traits: [],\r\n    commitChance: 100,\r\n    committedTraits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          healthOffset: -10,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  frozen: {\r\n    ...makeEntity('Frozen'),\r\n    type: 'frozen',\r\n    canStack: false,\r\n    duration: STATUS_DURATION,\r\n    traits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          damageModifier: 0.25,\r\n        },\r\n      },\r\n    ],\r\n    commitChance: 0,\r\n    committedTraits: [],\r\n  },\r\n  poisoned: {\r\n    ...makeEntity('Poisoned'),\r\n    type: 'poisoned',\r\n    canStack: true,\r\n    duration: STATUS_DURATION,\r\n    traits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          strength: -5,\r\n          intelligence: -5,\r\n          perception: -5,\r\n          talent: -5,\r\n        },\r\n      },\r\n    ],\r\n    commitChance: 100,\r\n    committedTraits: [\r\n      {\r\n        duration: STATUS_DURATION,\r\n        damage: 0,\r\n        stats: {\r\n          ...ZERO_STATS,\r\n          healthOffset: -5,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n}\r\n\r\nexport const TAG_EFFECTS: Record<TagTypeT, TagT> = {\r\n  targeted: {\r\n    type: 'targeted',\r\n    duration: 5,\r\n    damageModifier: 0,\r\n    description: 'All enemies will attack this character, if able.',\r\n  },\r\n  dazed: {\r\n    type: 'dazed',\r\n    duration: 5,\r\n    damageModifier: 0,\r\n    description: 'Character is temporarily halted on the combat queue.',\r\n  },\r\n  evasive: {\r\n    type: 'evasive',\r\n    duration: 5,\r\n    damageModifier: 0,\r\n    description: 'Non-perfect attacks will miss when targeting this character.',\r\n  },\r\n  'damage-reflection': {\r\n    type: 'damage-reflection',\r\n    duration: 5,\r\n    damageModifier: 0.1,\r\n    description: 'Some damage will be reflected back on melee attacks.',\r\n  },\r\n}\r\n","import { TraitT } from '../types'\r\nimport { ZERO_STATS } from './Stats'\r\n\r\nexport const ZERO_TRAIT: TraitT = {\r\n  damage: 0,\r\n  duration: -1,\r\n  stats: ZERO_STATS,\r\n}\r\n","import { StatsT } from '../types'\r\nimport { ZERO_STATS } from '../objects'\r\n\r\nexport const combineStats = (...stats: StatsT[]): StatsT => {\r\n  return stats.reduce(\r\n    (p, c) => ({\r\n      vigor: p.vigor + c.vigor,\r\n      strength: p.strength + c.strength,\r\n      intelligence: p.intelligence + c.intelligence,\r\n      perception: p.perception + c.perception,\r\n      talent: p.talent + c.talent,\r\n      agility: p.agility + c.agility,\r\n      luck: p.luck + c.luck,\r\n      armor: p.armor + c.armor,\r\n      resistance: p.resistance + c.resistance,\r\n      evasion: p.evasion + c.evasion,\r\n      criticalChance: p.criticalChance + c.criticalChance,\r\n      damageModifier: p.damageModifier + c.damageModifier,\r\n      healthOffset: p.healthOffset + c.healthOffset,\r\n      health: p.health + c.health,\r\n      healthRegen: p.healthRegen + c.healthRegen,\r\n    }),\r\n    ZERO_STATS,\r\n  )\r\n}\r\n","import { TraitT, HasTraitsT, HasCommittedTraits } from '../types'\r\nimport { combineStats } from './Stats'\r\nimport { ZERO_TRAIT } from '../objects'\r\n\r\nexport const combineTraits = (...traits: TraitT[]): TraitT => {\r\n  return traits.reduce(\r\n    (p, c) => ({\r\n      damage: p.damage + c.damage,\r\n      stats: combineStats(p.stats, c.stats),\r\n      duration: -1,\r\n    }),\r\n    ZERO_TRAIT,\r\n  )\r\n}\r\n\r\nexport const getTraitsFromObjects = (parents: HasTraitsT[]) => {\r\n  return parents.reduce((p, c) => {\r\n    return [...p, ...c.traits]\r\n  }, [] as TraitT[])\r\n}\r\nexport const getCommittedTraitsFromObjects = (\r\n  parents: HasCommittedTraits[],\r\n) => {\r\n  return parents.reduce((p, c) => {\r\n    return [...p, ...c.committedTraits]\r\n  }, [] as TraitT[])\r\n}\r\n","import { StatsT, CheckT } from '../types'\r\n\r\nexport const makeCheck = (key: keyof StatsT, offset?: number): CheckT => ({\r\n  key,\r\n  offset,\r\n})\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/makeCheck'\r\n\r\nexport const SMASH: SkillT = {\r\n  ...makeEntity('Smash'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  isBasicAttack: true,\r\n  rolls: [makeCheck('strength'), makeCheck('strength'), makeCheck('strength')],\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n  perfectTags: [],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/makeCheck'\r\n\r\nexport const SHOCKWAVE: SkillT = {\r\n  ...makeEntity('Shockwave'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  isBasicAttack: false,\r\n  rolls: [\r\n    makeCheck('strength', -10),\r\n    makeCheck('strength', -10),\r\n    makeCheck('strength', -10),\r\n    makeCheck('strength', -10),\r\n  ],\r\n  perfectSplash: true,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n  perfectTags: [],\r\n}\r\n","import { WeaponT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { SMASH } from '../skills/smash'\r\nimport { SHOCKWAVE } from '../skills/shockwave'\r\n\r\nexport const BLACKSMITHS_HAMMER: WeaponT = {\r\n  ...makeEntity(`Blacksmith's Hammer`),\r\n  type: 'hammer',\r\n  rarity: 'common',\r\n  twoHand: false,\r\n  attackType: 'melee',\r\n  damage: { type: 'physical', damage: 10 },\r\n  traits: [],\r\n  skills: [SMASH, SHOCKWAVE],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/makeCheck'\r\n\r\nexport const SHOT: SkillT = {\r\n  ...makeEntity('Shot'),\r\n  // TODO Damage Modifier for flying, etc...\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  isBasicAttack: true,\r\n  rolls: [\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n  ],\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n  perfectTags: [],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/makeCheck'\r\n\r\nexport const SNIPE_SHOT: SkillT = {\r\n  ...makeEntity('Snipe Shot'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  isBasicAttack: false,\r\n  rolls: [\r\n    makeCheck('perception', -10),\r\n    makeCheck('perception', -10),\r\n    makeCheck('perception', -10),\r\n  ],\r\n  perfectSplash: false,\r\n  perfectPierce: true,\r\n  perfectStatus: [],\r\n  perfectTags: [],\r\n}\r\n","import { WeaponT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\nimport { SHOT } from '../skills/shot'\r\nimport { SNIPE_SHOT } from '../skills/snipe_shot'\r\n\r\nexport const HUNTING_BOW: WeaponT = {\r\n  ...makeEntity(`Blacksmith's Hammer`),\r\n  type: 'bow',\r\n  rarity: 'common',\r\n  twoHand: true,\r\n  attackType: 'ranged',\r\n  damage: { type: 'physical', damage: 6 },\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        evasion: 3,\r\n      },\r\n      damage: 0,\r\n    },\r\n  ],\r\n  skills: [SHOT, SNIPE_SHOT],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/makeCheck'\r\n\r\nexport const SURGE: SkillT = {\r\n  ...makeEntity('Surge'),\r\n  damageModifier: -0.2,\r\n  targetType: 'single',\r\n  damage: true,\r\n  isBasicAttack: false,\r\n  rolls: [\r\n    makeCheck('intelligence'),\r\n    makeCheck('intelligence'),\r\n    makeCheck('intelligence'),\r\n  ],\r\n  perfectSplash: false,\r\n  perfectPierce: true,\r\n  perfectStatus: [],\r\n  perfectTags: [],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/makeCheck'\r\n\r\nexport const AREA_BLAST: SkillT = {\r\n  ...makeEntity('Area Blast'),\r\n  damageModifier: -0.5,\r\n  targetType: 'group',\r\n  damage: true,\r\n  isBasicAttack: false,\r\n  rolls: [\r\n    makeCheck('intelligence', -5),\r\n    makeCheck('intelligence', -5),\r\n    makeCheck('intelligence', -5),\r\n  ],\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n  perfectTags: [],\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/makeCheck'\r\n\r\nexport const DAZZLE: SkillT = {\r\n  ...makeEntity('Dazzle'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: false,\r\n  isBasicAttack: false,\r\n  rolls: [\r\n    makeCheck('intelligence'),\r\n    makeCheck('intelligence'),\r\n    makeCheck('intelligence'),\r\n  ],\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n  perfectTags: [{ type: 'dazed', duration: 4 }],\r\n}\r\n","import { WeaponT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { SURGE } from '../skills/surge'\r\nimport { AREA_BLAST } from '../skills/area_blast'\r\nimport { DAZZLE } from '../skills/Dazzle'\r\n\r\nexport const SCHOLARS_BOOK: WeaponT = {\r\n  ...makeEntity(`Scholar's Book`),\r\n  type: 'tome',\r\n  rarity: 'common',\r\n  twoHand: true,\r\n  attackType: 'ranged',\r\n  damage: { type: 'magic', damage: 6 },\r\n  traits: [],\r\n  skills: [SURGE, AREA_BLAST, DAZZLE],\r\n}\r\n","import { CharacterClassT, WeaponT } from '../types'\r\nimport { BLACKSMITHS_HAMMER } from './weapons/blacksmiths_hammer'\r\nimport { HUNTING_BOW } from './weapons/hunting_bow'\r\nimport { SCHOLARS_BOOK } from './weapons/scholars_book'\r\n\r\nexport const CLASS_STARTING_WEAPONS: Partial<Record<\r\n  CharacterClassT,\r\n  WeaponT\r\n>> = {\r\n  blacksmith: BLACKSMITHS_HAMMER,\r\n  hunter: HUNTING_BOW,\r\n  scholar: SCHOLARS_BOOK,\r\n  bard: BLACKSMITHS_HAMMER,\r\n}\r\n","import { SkillT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { makeCheck } from '../../functions/makeCheck'\r\n\r\nexport const TAUNT: SkillT = {\r\n  ...makeEntity('Taunt'),\r\n  damageModifier: 0,\r\n  targetType: 'self',\r\n  damage: false,\r\n  isBasicAttack: false,\r\n  rolls: [makeCheck('vigor'), makeCheck('vigor')],\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n  perfectTags: [\r\n    {\r\n      type: 'targeted',\r\n      duration: 5,\r\n    },\r\n  ],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\nimport { TAUNT } from '../skills/taunt'\r\n\r\nexport const SIMPLE_IRON_SHIELD: ArmorT = {\r\n  ...makeEntity('Simple Iron Shield'),\r\n  rarity: 'common',\r\n  type: 'shield',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        armor: 1,\r\n      },\r\n      damage: 0,\r\n    },\r\n  ],\r\n  skills: [TAUNT],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const EXPLORERS_CLOAK: ArmorT = {\r\n  ...makeEntity(`Explorer's Cloak`),\r\n  rarity: 'uncommon',\r\n  type: 'magic-armor',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        armor: 3,\r\n        resistance: 6,\r\n        evasion: 6,\r\n        perception: 3,\r\n        talent: -3,\r\n      },\r\n      damage: 0,\r\n    },\r\n  ],\r\n  skills: [],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const EXPLORERS_HAT: ArmorT = {\r\n  ...makeEntity(`Explorer's Hat`),\r\n  rarity: 'common',\r\n  type: 'hat',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        resistance: 3,\r\n        evasion: 3,\r\n        perception: 2,\r\n      },\r\n      damage: 0,\r\n    },\r\n  ],\r\n  skills: [],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const FUR_ARMOR: ArmorT = {\r\n  ...makeEntity(`Fur Armor`),\r\n  rarity: 'uncommon',\r\n  type: 'cloth-armor',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        armor: 5,\r\n        resistance: 5,\r\n        health: 5,\r\n        healthRegen: 2,\r\n        vigor: 4,\r\n      },\r\n      damage: 0,\r\n    },\r\n  ],\r\n  skills: [],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const ADVENTURE_BOOTS: ArmorT = {\r\n  ...makeEntity(`Adventure Boots`),\r\n  rarity: 'common',\r\n  type: 'footwear',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        armor: 3,\r\n        evasion: 4,\r\n        agility: 3,\r\n      },\r\n      damage: 0,\r\n    },\r\n  ],\r\n  skills: [],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const ADVENTURE_CLOAK: ArmorT = {\r\n  ...makeEntity(`Adventure Cloak`),\r\n  rarity: 'uncommon',\r\n  type: 'magic-armor',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        armor: 5,\r\n        resistance: 5,\r\n        perception: 4,\r\n        talent: -3,\r\n      },\r\n      damage: 0,\r\n    },\r\n  ],\r\n  skills: [],\r\n}\r\n","import { ArmorT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { ZERO_STATS } from '../Stats'\r\n\r\nexport const FUR_BOOTS: ArmorT = {\r\n  ...makeEntity(`Fur Boots`),\r\n  rarity: 'common',\r\n  type: 'footwear',\r\n  traits: [\r\n    {\r\n      duration: -1,\r\n      stats: {\r\n        ...ZERO_STATS,\r\n        armor: 2,\r\n        resistance: 2,\r\n        healthRegen: 1,\r\n        vigor: 4,\r\n      },\r\n      damage: 0,\r\n    },\r\n  ],\r\n  skills: [],\r\n}\r\n","import { CharacterClassT, ArmorT } from '../types'\r\nimport { SIMPLE_IRON_SHIELD } from './armor/simple_iron_shield'\r\nimport { EXPLORERS_CLOAK } from './armor/explorers_cloak'\r\nimport { EXPLORERS_HAT } from './armor/explorers_hat'\r\nimport { FUR_ARMOR } from './armor/fur_armor'\r\nimport { ADVENTURE_BOOTS } from './armor/adventure_boots'\r\nimport { ADVENTURE_CLOAK } from './armor/adventure_cloak'\r\nimport { FUR_BOOTS } from './armor/fur_boots'\r\n\r\nexport const CLASS_STARTING_ARMOR: Record<CharacterClassT, ArmorT[]> = {\r\n  blacksmith: [SIMPLE_IRON_SHIELD, FUR_ARMOR, FUR_BOOTS],\r\n  hunter: [ADVENTURE_CLOAK, ADVENTURE_BOOTS],\r\n  scholar: [EXPLORERS_CLOAK, EXPLORERS_HAT],\r\n  bard: [],\r\n  enemy: [],\r\n}\r\n","import { SkillT } from '../../../types'\r\nimport { makeEntity } from '../../../functions/Entity'\r\nimport { makeCheck } from '../../../functions/makeCheck'\r\n\r\nexport const BITE: SkillT = {\r\n  ...makeEntity('Bite'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  isBasicAttack: true,\r\n  rolls: [\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n  ],\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n  perfectTags: [],\r\n}\r\n","import { SkillT } from '../../../types'\r\nimport { makeEntity } from '../../../functions/Entity'\r\nimport { makeCheck } from '../../../functions/makeCheck'\r\n\r\nexport const SLAP: SkillT = {\r\n  ...makeEntity('Slap'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  isBasicAttack: true,\r\n  rolls: [\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n    makeCheck('perception'),\r\n  ],\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n  perfectTags: [],\r\n}\r\n","import { SkillT } from '../../../types'\r\nimport { makeEntity } from '../../../functions/Entity'\r\nimport { makeCheck } from '../../../functions/makeCheck'\r\n\r\nexport const IMPALE: SkillT = {\r\n  ...makeEntity('Impale'),\r\n  damageModifier: 0,\r\n  targetType: 'single',\r\n  damage: true,\r\n  isBasicAttack: true,\r\n  rolls: [makeCheck('strength'), makeCheck('strength'), makeCheck('strength')],\r\n  perfectSplash: false,\r\n  perfectPierce: false,\r\n  perfectStatus: [],\r\n  perfectTags: [],\r\n}\r\n","import { CharacterT } from '../../types'\r\nimport { TIMBERWOLF } from './timberwolf'\r\nimport { VALE_IMP } from './vale_imp'\r\nimport { BEASTMAN } from './beastman'\r\n\r\nexport const ALL_ENEMIES: (() => CharacterT)[] = [\r\n  TIMBERWOLF,\r\n  VALE_IMP,\r\n  BEASTMAN,\r\n]\r\n","import { CharacterT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { BITE } from '../skills/enemy/bite'\r\n\r\nexport const TIMBERWOLF = (): CharacterT => {\r\n  return {\r\n    ...makeEntity('Timberwolf'),\r\n    isCharacter: true,\r\n    partyId: '',\r\n    level: 1,\r\n    class: 'enemy',\r\n    stats: {\r\n      vigor: -80,\r\n      strength: 52,\r\n      intelligence: 40,\r\n      perception: 52,\r\n      talent: 30,\r\n      agility: 60,\r\n      luck: 50,\r\n      armor: 0,\r\n      resistance: 0,\r\n      evasion: 10,\r\n      healthOffset: 0,\r\n      health: -1,\r\n      healthRegen: 0,\r\n      criticalChance: 5,\r\n      damageModifier: 0,\r\n    },\r\n    traits: [],\r\n    tags: [],\r\n    armor: [],\r\n    status: [],\r\n    weapon: {\r\n      ...makeEntity('Wolf Fangs'),\r\n      rarity: 'common',\r\n      type: 'wolf-fangs',\r\n      twoHand: true,\r\n      attackType: 'melee',\r\n      damage: {\r\n        damage: 6,\r\n        type: 'physical',\r\n      },\r\n      traits: [],\r\n      skills: [BITE],\r\n    },\r\n  }\r\n}\r\n","import { CharacterT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { SLAP } from '../skills/enemy/slap'\r\n\r\nexport const VALE_IMP = (): CharacterT => {\r\n  return {\r\n    ...makeEntity('Vale Imp'),\r\n    isCharacter: true,\r\n    partyId: '',\r\n    level: 1,\r\n    class: 'enemy',\r\n    stats: {\r\n      vigor: -80,\r\n      strength: 40,\r\n      intelligence: 40,\r\n      perception: 52,\r\n      talent: 30,\r\n      agility: 70,\r\n      luck: 50,\r\n      armor: 0,\r\n      resistance: 0,\r\n      evasion: 10,\r\n      health: 0,\r\n      healthOffset: 0,\r\n      healthRegen: 0,\r\n      criticalChance: 5,\r\n      damageModifier: 0,\r\n    },\r\n    traits: [],\r\n    tags: [\r\n      {\r\n        duration: -1,\r\n        type: 'evasive',\r\n      },\r\n    ],\r\n    armor: [],\r\n    status: [],\r\n    weapon: {\r\n      ...makeEntity('Imp Fists'),\r\n      rarity: 'common',\r\n      type: 'imp-fists',\r\n      twoHand: true,\r\n      attackType: 'melee',\r\n      damage: {\r\n        damage: 6,\r\n        type: 'physical',\r\n      },\r\n      traits: [],\r\n      skills: [SLAP],\r\n    },\r\n  }\r\n}\r\n","import { CharacterT } from '../../types'\r\nimport { makeEntity } from '../../functions/Entity'\r\nimport { IMPALE } from '../skills/enemy/impale'\r\n\r\nexport const BEASTMAN = (): CharacterT => {\r\n  return {\r\n    ...makeEntity('Beastman'),\r\n    isCharacter: true,\r\n    partyId: '',\r\n    level: 1,\r\n    class: 'enemy',\r\n    stats: {\r\n      vigor: -80,\r\n      strength: 52,\r\n      intelligence: 40,\r\n      perception: 52,\r\n      talent: 30,\r\n      agility: 60,\r\n      luck: 50,\r\n      armor: 2,\r\n      resistance: 0,\r\n      evasion: 10,\r\n      healthOffset: 0,\r\n      health: 0,\r\n      healthRegen: 0,\r\n      criticalChance: 5,\r\n      damageModifier: 0,\r\n    },\r\n    traits: [],\r\n    tags: [],\r\n    armor: [],\r\n    status: [],\r\n    weapon: {\r\n      ...makeEntity('Beastman Spear'),\r\n      rarity: 'common',\r\n      type: 'spear',\r\n      twoHand: true,\r\n      attackType: 'melee',\r\n      damage: {\r\n        damage: 8,\r\n        type: 'physical',\r\n      },\r\n      traits: [],\r\n      skills: [IMPALE],\r\n    },\r\n  }\r\n}\r\n","import {\r\n  CharacterT,\r\n  ProcessedCharacterT,\r\n  StatsT,\r\n  TraitT,\r\n  DamageTypeT,\r\n  StatusTypeT,\r\n  CheckT,\r\n  CharacterClassT,\r\n  EntityT,\r\n  WeaponT,\r\n  CharacterTagT,\r\n  TagT,\r\n  StatusT,\r\n  TagTypeT,\r\n} from '../types'\r\nimport { STATUS_EFFECTS, CLASS_STARTING_STATS, TAG_EFFECTS } from '../objects'\r\nimport {\r\n  combineTraits,\r\n  getTraitsFromObjects,\r\n  getCommittedTraitsFromObjects,\r\n} from './Traits'\r\nimport { processWeapon } from './Weapon'\r\nimport { getSkillsFromObjects } from './Skill'\r\nimport { makeEntity } from './Entity'\r\nimport { combineStats } from './Stats'\r\nimport { CLASS_STARTING_WEAPONS } from '../objects/Weapon'\r\nimport { CLASS_STARTING_ARMOR } from '../objects/Armor'\r\nimport { ALL_ENEMIES } from '../objects/enemies'\r\nimport { getRandom } from '../util'\r\n\r\nexport const checkForProcessedCharacter = (character: CharacterT) => {\r\n  if ((character as ProcessedCharacterT).processed) {\r\n    throw new Error('No Processed Characters Allowed')\r\n  }\r\n}\r\n\r\nexport const isCharacter = (e: EntityT) => e && (e as CharacterT).isCharacter\r\n\r\nexport const getStatusEffects = (character: CharacterT): StatusT[] => {\r\n  return character.status.map((status) => STATUS_EFFECTS[status.type])\r\n}\r\nexport const getTags = (character: CharacterT): TagT[] => {\r\n  return character.tags.map((tag) => {\r\n    const baseTag = TAG_EFFECTS[tag.type]\r\n    return {\r\n      ...baseTag,\r\n      duration: tag.duration,\r\n    }\r\n  })\r\n}\r\n\r\nexport const getTraits = (character: CharacterT): TraitT[] => {\r\n  checkForProcessedCharacter(character)\r\n  const ret = [\r\n    ...character.traits,\r\n    ...character.weapon.traits,\r\n    ...getTraitsFromObjects(character.armor),\r\n    ...getTraitsFromObjects(getStatusEffects(character)),\r\n  ]\r\n  return ret\r\n}\r\n\r\nexport const getSkills = (character: CharacterT) => {\r\n  checkForProcessedCharacter(character)\r\n  return [...character.weapon.skills, ...getSkillsFromObjects(character.armor)]\r\n}\r\n\r\nexport const processCharacter = (\r\n  character: CharacterT,\r\n): ProcessedCharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  const traits = getTraits(character)\r\n  const combinedTrait = combineTraits(...traits)\r\n  const stats: StatsT = combineStats(character.stats, combinedTrait.stats)\r\n  const weapon = processWeapon(character.weapon)\r\n  const statusEffects = getStatusEffects(character)\r\n  const tags = getTags(character)\r\n  const skills = getSkills(character)\r\n  const hVigor =\r\n    CLASS_STARTING_STATS[character.class].vigor || character.stats.vigor\r\n  const startingHealth = 25 + Math.floor(0.1 * hVigor)\r\n  const health =\r\n    Math.floor(\r\n      startingHealth + character.level + 0.1 * character.level * stats.vigor,\r\n    ) + stats.health\r\n\r\n  return {\r\n    ...character,\r\n    health,\r\n    stats,\r\n    rawStats: character.stats,\r\n    weapon,\r\n    statusEffects,\r\n    tags,\r\n    skills,\r\n    dead: stats.healthOffset >= health,\r\n    processed: true,\r\n  }\r\n}\r\n\r\nexport const makeCharacter = (\r\n  characterClass: CharacterClassT,\r\n  partyId: string = '',\r\n): CharacterT => {\r\n  return {\r\n    ...makeEntity(),\r\n    isCharacter: true,\r\n    partyId,\r\n    level: 1,\r\n    class: characterClass,\r\n    stats: CLASS_STARTING_STATS[characterClass],\r\n    traits: [],\r\n    tags: [],\r\n    weapon: CLASS_STARTING_WEAPONS[characterClass] as WeaponT,\r\n    armor: CLASS_STARTING_ARMOR[characterClass],\r\n    status: [],\r\n  }\r\n}\r\n\r\nexport const makeEnemy = () => {\r\n  const staicEnemy = getRandom(ALL_ENEMIES)\r\n  if (staicEnemy) return staicEnemy()\r\n  return makeCharacter(getRandom(['blacksmith', 'hunter', 'scholar']))\r\n}\r\n\r\nexport const commitTrait = (\r\n  character: CharacterT,\r\n  trait: TraitT,\r\n): CharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  return {\r\n    ...character,\r\n    stats: combineStats(character.stats, trait.stats),\r\n  }\r\n}\r\nexport const commitStatusEffects = (character: CharacterT): CharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  const statusEffects = getStatusEffects(character)\r\n  const traits = getCommittedTraitsFromObjects(statusEffects)\r\n  return traits.reduce(\r\n    (char, trait) => {\r\n      return commitTrait(char, trait)\r\n    },\r\n    { ...character },\r\n  )\r\n}\r\nexport const decrementStatusDurations = (character: CharacterT): CharacterT => {\r\n  checkForProcessedCharacter(character)\r\n  return {\r\n    ...character,\r\n    tags: character.tags\r\n      .map((tag) => ({ ...tag, duration: tag.duration - 1 }))\r\n      .filter((tag) => tag.duration !== 0),\r\n    status: character.status\r\n      .map((status) => ({ ...status, duration: status.duration - 1 }))\r\n      .filter((status) => status.duration !== 0),\r\n  }\r\n}\r\nexport const hasStatus = (character: CharacterT, statusType: StatusTypeT) => {\r\n  return character.status.map((s) => s.type).includes(statusType)\r\n}\r\nexport const findStatus = (character: CharacterT, statusType: StatusTypeT) => {\r\n  return character.status.find((s) => s.type === statusType)\r\n}\r\nexport const addStatus = (character: CharacterT, statusType: StatusTypeT) => {\r\n  const statusEffect = STATUS_EFFECTS[statusType]\r\n  const existingStatus = findStatus(character, statusType)\r\n  if (existingStatus && !statusEffect.canStack) {\r\n    return {\r\n      ...character,\r\n      status: [\r\n        ...character.status.filter((t) => t.type !== statusType),\r\n        { type: statusType, duration: statusEffect.duration },\r\n      ],\r\n    }\r\n  }\r\n  return {\r\n    ...character,\r\n    status: [\r\n      ...character.status,\r\n      { type: statusType, duration: statusEffect.duration },\r\n    ],\r\n  }\r\n}\r\nexport const addMultipleStatus = (\r\n  character: CharacterT,\r\n  statusTypes: StatusTypeT[],\r\n) => {\r\n  return statusTypes.reduce(\r\n    (char, statusType) => {\r\n      return addStatus(char, statusType)\r\n    },\r\n    { ...character },\r\n  )\r\n}\r\n\r\nexport const getCharacterStat = (character: CharacterT, statValue: CheckT) => {\r\n  const resolvedStatValue = statValue.key ? character.stats[statValue.key] : 0\r\n  return resolvedStatValue + (statValue.offset || 0)\r\n}\r\n\r\nexport const getDamageResistance = (\r\n  character: ProcessedCharacterT,\r\n  damageType: DamageTypeT,\r\n) => {\r\n  if (damageType === 'physical') return character.stats.armor\r\n  if (damageType === 'magic') return character.stats.resistance\r\n  return 0\r\n}\r\n\r\nexport const findTag = (character: CharacterT, tagType: TagTypeT) =>\r\n  character.tags.find((t) => t.type === tagType)\r\n\r\nexport const hasTag = (character: CharacterT, tagType: TagTypeT) =>\r\n  character.tags.map((t) => t.type).includes(tagType)\r\n\r\nexport const addTag = (\r\n  character: CharacterT,\r\n  tag: CharacterTagT,\r\n): CharacterT => {\r\n  const existingTag = findTag(character, tag.type)\r\n  // tags cannot stack right now\r\n  if (existingTag) {\r\n    return {\r\n      ...character,\r\n      tags: [...character.tags.filter((t) => t.type !== tag.type), tag],\r\n    }\r\n  }\r\n  return {\r\n    ...character,\r\n    tags: [...character.tags, tag],\r\n  }\r\n}\r\nexport const addMultipleTags = (\r\n  character: CharacterT,\r\n  tags: CharacterTagT[],\r\n) => {\r\n  return tags.reduce(\r\n    (char: any, tag) => {\r\n      return addTag(char, tag)\r\n    },\r\n    { ...character },\r\n  )\r\n}\r\n\r\nexport const addStatusAndTags = (\r\n  character: CharacterT,\r\n  status: StatusTypeT[],\r\n  tags: CharacterTagT[],\r\n) => {\r\n  return addMultipleTags(addMultipleStatus(character, status), tags)\r\n}\r\n","import { WeaponT, ProcessedWeaponT } from '../types'\r\n\r\nexport const processWeapon = (weapon: WeaponT): ProcessedWeaponT => {\r\n  const damage = weapon.traits.reduce((p, c) => {\r\n    return {\r\n      ...p,\r\n      damage: p.damage + c.damage,\r\n    }\r\n  }, weapon.damage)\r\n  return {\r\n    ...weapon,\r\n    damage,\r\n    processed: true,\r\n  }\r\n}\r\n","import { DiceRoll } from 'rpg-dice-roller'\r\nimport { ProcessedCharacterT, CheckResultT, CheckT, StatsT } from '../types'\r\nimport { getCharacterStat } from './Character'\r\n\r\nexport const resolveCheck = (\r\n  character: ProcessedCharacterT,\r\n  check: CheckT,\r\n): CheckResultT => {\r\n  const statValue = getCharacterStat(character, check)\r\n  const roll = new DiceRoll('1d100')\r\n  return {\r\n    input: check,\r\n    result: roll.total <= statValue,\r\n    total: roll.total,\r\n    averageTotal: roll.averageTotal,\r\n    maxTotal: roll.maxTotal,\r\n    minTotal: roll.minTotal,\r\n    output: roll.output,\r\n  }\r\n}\r\n\r\nexport const getChecksProbability = (\r\n  character: ProcessedCharacterT,\r\n  checks: CheckT[],\r\n): number => {\r\n  const statValues = checks.map((check) => getCharacterStat(character, check))\r\n  const result = statValues.reduce((p, c) => {\r\n    return p * (c / 100)\r\n  }, 1)\r\n  return result\r\n}\r\n\r\nexport const getPassedCount = (results: CheckResultT[]): number =>\r\n  results.filter((r) => r.result).length\r\n\r\nexport const didAllPass = (results: CheckResultT[]): boolean =>\r\n  results.every((r) => r.result)\r\n","import { CharacterT, PartyT, ProcessedPartyT, EntityT } from '../types'\r\nimport {\r\n  checkForProcessedCharacter,\r\n  processCharacter,\r\n  makeEnemy,\r\n} from './Character'\r\nimport { makeEntity } from './Entity'\r\n\r\nexport const isParty = (e: EntityT) => e && (e as PartyT).isParty\r\n\r\nexport const checkForProcessedParty = (party: PartyT) => {\r\n  if ((party as ProcessedPartyT).processed) {\r\n    throw new Error('No Processed Parties Allowed')\r\n  }\r\n  party.characters.forEach((character) => {\r\n    checkForProcessedCharacter(character)\r\n  })\r\n}\r\n\r\nexport const makeParty = (characterCount: number = 0): PartyT => {\r\n  return {\r\n    ...makeEntity(),\r\n    isParty: true,\r\n    characters: Array(characterCount)\r\n      .fill(null)\r\n      .map((_, i) => {\r\n        return makeEnemy()\r\n      }),\r\n  }\r\n}\r\n\r\nexport const findCharacterInParty = <\r\n  T extends PartyT = PartyT,\r\n  R extends CharacterT = CharacterT\r\n>(\r\n  party: T,\r\n  id: string,\r\n): R | undefined => {\r\n  return (party.characters as R[]).find((c) => c.id === id)\r\n}\r\n\r\nexport const updateCharacter = (\r\n  party: PartyT,\r\n  characterId: string,\r\n  updater: (character: CharacterT) => CharacterT,\r\n): PartyT => {\r\n  checkForProcessedParty(party)\r\n  return {\r\n    ...party,\r\n    characters: party.characters.map((c) =>\r\n      c.id === characterId ? updater(c) : c,\r\n    ),\r\n  }\r\n}\r\n\r\nexport const processParty = (party: PartyT): ProcessedPartyT => {\r\n  return {\r\n    ...party,\r\n    processed: true,\r\n    characters: party.characters.map((c) => ({\r\n      ...processCharacter(c),\r\n      partyId: party.id,\r\n    })),\r\n  }\r\n}\r\n","import { TagTypeT, StatusTypeT } from '../types'\r\n\r\nexport type PerfectKeyT = TagTypeT | StatusTypeT | 'splash' | 'pierce'\r\nexport const PERFECT_DISPLAY_INFO: Record<PerfectKeyT, string> = {\r\n  splash: 'Splash Damage',\r\n  pierce: 'Ignore Resistances',\r\n  bleeding: 'Bleed',\r\n  burning: 'Burn',\r\n  frozen: 'Freeze',\r\n  poisoned: 'Poison',\r\n  targeted: 'Taunt Enemies',\r\n  dazed: 'Daze',\r\n  evasive: 'Become Evasive',\r\n  'damage-reflection': 'Damage Refelction',\r\n}\r\n","import { DamageT } from '../types'\r\n\r\nexport const getSplashDamage = (rawDamage: DamageT) => {\r\n  return {\r\n    type: rawDamage.type,\r\n    damage: Math.floor(rawDamage.damage / 2),\r\n  }\r\n}\r\n","import {\r\n  ProcessedCharacterT,\r\n  SourceSkillResultT,\r\n  HasSkillsT,\r\n  SkillT,\r\n  DamageT,\r\n  TargetSkillResultT,\r\n  SkillTargetT,\r\n  ProcessedPartyT,\r\n  TargetTypeT,\r\n  TagT,\r\n} from '../types'\r\nimport { resolveCheck, getPassedCount, didAllPass } from './Roll'\r\nimport { getDamageResistance, isCharacter, hasTag, findTag } from './Character'\r\nimport { isParty } from './Party'\r\nimport { noneg } from '../util'\r\nimport { PerfectKeyT, PERFECT_DISPLAY_INFO } from '../objects/Skills'\r\nimport { getSplashDamage } from './Damage'\r\n\r\nexport const getSkillsFromObjects = (parents: HasSkillsT[]) => {\r\n  return parents.reduce((p, c) => {\r\n    return [...p, ...c.skills]\r\n  }, [] as SkillT[])\r\n}\r\n\r\nexport const resolveSkillTarget = (\r\n  target: SkillTargetT,\r\n): ProcessedCharacterT[] => {\r\n  switch (target.type) {\r\n    case 'single':\r\n      return target.character ? [target.character] : []\r\n    case 'ally':\r\n      return target.character ? [target.character] : []\r\n    case 'self':\r\n      return target.character ? [target.character] : []\r\n    case 'party':\r\n      return target.party?.characters || []\r\n    case 'group':\r\n      return target.party?.characters || []\r\n    default:\r\n      return []\r\n  }\r\n}\r\n\r\nexport const makeSkillTarget = (\r\n  type: TargetTypeT,\r\n  target: ProcessedCharacterT | ProcessedPartyT,\r\n): SkillTargetT => {\r\n  return {\r\n    type,\r\n    character: isCharacter(target)\r\n      ? (target as ProcessedCharacterT)\r\n      : undefined,\r\n    party: isParty(target) ? (target as ProcessedPartyT) : undefined,\r\n  }\r\n}\r\n\r\nexport const getSourceSkillResult = (\r\n  source: ProcessedCharacterT,\r\n  skill: SkillT,\r\n): SourceSkillResultT => {\r\n  const rollResults = skill.rolls.map((check) => resolveCheck(source, check))\r\n  const passedCount = getPassedCount(rollResults)\r\n  const perfect = didAllPass(rollResults)\r\n  const criticalHitResult = resolveCheck(source, {\r\n    offset: source.stats.criticalChance,\r\n  })\r\n  const criticalSuccess = perfect ? criticalHitResult.result : false\r\n  const accuracySuccess = passedCount >= 1\r\n\r\n  const rawDamage: DamageT = {\r\n    damage: Math.round(\r\n      (passedCount * getSkillDamage(skill, source).damage) / rollResults.length,\r\n    ),\r\n    type: source.weapon.damage.type,\r\n  }\r\n  const splashDamage: DamageT =\r\n    skill.perfectSplash && perfect\r\n      ? getSplashDamage(rawDamage)\r\n      : { type: rawDamage.type, damage: 0 }\r\n  return {\r\n    rollResults,\r\n    skill,\r\n    source,\r\n    accuracySuccess,\r\n    criticalSuccess,\r\n    passedCount,\r\n    perfect,\r\n    rawDamage,\r\n    pierce: (perfect && skill.perfectPierce) || criticalHitResult.result,\r\n    splashDamage,\r\n    addedStatus: perfect ? skill.perfectStatus : [],\r\n    addedTags: perfect ? skill.perfectTags : [],\r\n  }\r\n}\r\n\r\nexport const getTargetSkillResult = (\r\n  target: ProcessedCharacterT,\r\n  sourceResult: SourceSkillResultT,\r\n): TargetSkillResultT => {\r\n  if (sourceResult.accuracySuccess) {\r\n    const dodgeResult = resolveCheck(target, { key: 'evasion' })\r\n    const damageResistances = sourceResult.pierce\r\n      ? 0\r\n      : getDamageResistance(target, sourceResult.rawDamage.type)\r\n    const isEvasive = hasTag(target, 'evasive')\r\n    const dodgeSuccess = sourceResult.criticalSuccess\r\n      ? false\r\n      : dodgeResult.result || (isEvasive && !sourceResult.perfect)\r\n    const totalDamage = {\r\n      type: sourceResult.rawDamage.type,\r\n      damage: dodgeSuccess\r\n        ? 0\r\n        : noneg(Math.round(sourceResult.rawDamage.damage - damageResistances)),\r\n    }\r\n    const reflectedDamage = getReflectedDamage(\r\n      totalDamage,\r\n      sourceResult.source,\r\n      target,\r\n    )\r\n    const healthRegenMaximum =\r\n      sourceResult.source.stats.healthOffset + reflectedDamage.damage\r\n    const regeneratedHealth =\r\n      healthRegenMaximum > sourceResult.source.stats.healthRegen\r\n        ? sourceResult.source.stats.healthRegen\r\n        : healthRegenMaximum\r\n\r\n    return {\r\n      ...sourceResult,\r\n      target,\r\n      dodgeSuccess,\r\n      blockedDamage: {\r\n        type: sourceResult.rawDamage.type,\r\n        damage: sourceResult.pierce ? 0 : damageResistances,\r\n      },\r\n      reflectedDamage,\r\n      totalDamage,\r\n      regeneratedHealth,\r\n      willDie: target.health <= target.stats.healthOffset + totalDamage.damage,\r\n    }\r\n  } else {\r\n    return {\r\n      ...sourceResult,\r\n      target,\r\n      dodgeSuccess: false,\r\n      reflectedDamage: sourceResult.rawDamage,\r\n      blockedDamage: sourceResult.rawDamage,\r\n      totalDamage: sourceResult.rawDamage,\r\n      regeneratedHealth: noneg(\r\n        sourceResult.source.stats.healthOffset -\r\n          (sourceResult.source.stats.healthOffset +\r\n            sourceResult.source.stats.healthRegen),\r\n      ),\r\n      willDie: false,\r\n    }\r\n  }\r\n}\r\n\r\nexport const getPerfectKeys = (skill: SkillT): PerfectKeyT[] => {\r\n  let base: PerfectKeyT[] = [\r\n    ...skill.perfectStatus,\r\n    ...skill.perfectTags.map((t) => t.type),\r\n  ]\r\n  if (skill.perfectSplash) base = [...base, 'splash']\r\n  if (skill.perfectPierce) base = [...base, 'pierce']\r\n  return base\r\n}\r\n\r\nexport const getPerfectText = (\r\n  skill: SkillT,\r\n  character: ProcessedCharacterT,\r\n): string => {\r\n  const perfectKeys = getPerfectKeys(skill)\r\n  const rawDamage = getSkillDamage(skill, character)\r\n  const splashDamage = getSplashDamage(rawDamage)\r\n\r\n  return perfectKeys.reduce((res, key, i) => {\r\n    let pre = `${res}${i > 0 ? ',' : ''}`\r\n    const text = PERFECT_DISPLAY_INFO[key]\r\n    switch (key) {\r\n      case 'splash':\r\n        return `${pre} ${Math.floor(\r\n          (splashDamage.damage / rawDamage.damage) * 100,\r\n        )}% ${text}`\r\n      default:\r\n        return `${pre} ${text}`\r\n    }\r\n  }, '')\r\n}\r\n\r\nexport const getSkillDamage = (\r\n  skill: SkillT,\r\n  source: ProcessedCharacterT,\r\n  target?: ProcessedCharacterT,\r\n): DamageT => {\r\n  const rawDamage: DamageT = {\r\n    type: source.weapon.damage.type,\r\n    damage:\r\n      source.weapon.damage.damage *\r\n      (1 + skill.damageModifier + source.stats.damageModifier),\r\n  }\r\n  const damageResistances = target\r\n    ? getDamageResistance(target, rawDamage.type)\r\n    : 0\r\n  return {\r\n    type: rawDamage.type,\r\n    damage: noneg(Math.round(rawDamage.damage - damageResistances)),\r\n  }\r\n}\r\n\r\nexport const getReflectedDamage = (\r\n  rawDamage: DamageT,\r\n  source: ProcessedCharacterT,\r\n  target: ProcessedCharacterT,\r\n): DamageT => {\r\n  const damageReflectTag = findTag(target, 'damage-reflection') as TagT\r\n  if (damageReflectTag && source.weapon.attackType === 'melee') {\r\n    return {\r\n      ...rawDamage,\r\n      damage: damageReflectTag.damageModifier\r\n        ? Math.round(rawDamage.damage * damageReflectTag.damageModifier)\r\n        : Math.round(rawDamage.damage * 0.1),\r\n    }\r\n  } else {\r\n    return {\r\n      ...rawDamage,\r\n      damage: 0,\r\n    }\r\n  }\r\n}\r\n\r\nexport const getSkillDamageRange = (\r\n  skill: SkillT,\r\n  source: ProcessedCharacterT,\r\n  targets?: ProcessedCharacterT[],\r\n) => {\r\n  let min: number | undefined = undefined\r\n  let max: number | undefined = undefined\r\n  if (!targets) return `${getSkillDamage(skill, source).damage}`\r\n  targets.forEach((target) => {\r\n    const damage = getSkillDamage(skill, source, target).damage\r\n    if (max === undefined || damage > max) max = damage\r\n    if (min === undefined || damage < min) min = damage\r\n  })\r\n  if (min === max) return `${max || 0}`\r\n  return `${min}-${max}`\r\n}\r\n\r\nexport const getSkillResults = (\r\n  skill: SkillT,\r\n  source: ProcessedCharacterT,\r\n  targets: ProcessedCharacterT[],\r\n): TargetSkillResultT[] => {\r\n  const sourceResult = getSourceSkillResult(source, skill)\r\n  return targets.map((target) => getTargetSkillResult(target, sourceResult))\r\n}\r\n\r\nexport const getSkillTargetOptions = (\r\n  source: ProcessedCharacterT,\r\n  sourceParty: ProcessedPartyT,\r\n  targetParty: ProcessedPartyT,\r\n  skill: SkillT,\r\n): ProcessedCharacterT[] | ProcessedPartyT[] => {\r\n  switch (skill.targetType) {\r\n    case 'single':\r\n      return targetParty.characters.filter((c) => !c.dead)\r\n    case 'ally':\r\n      return sourceParty.characters.filter((c) => !c.dead)\r\n    case 'group':\r\n      return [targetParty]\r\n    case 'party':\r\n      return [sourceParty]\r\n    case 'self':\r\n      return [source]\r\n    default:\r\n      return []\r\n  }\r\n}\r\n","import { v4 } from 'uuid'\r\n\r\nexport const PLAYER_PARTY_ID = v4()\r\n","import { PartyT, TargetSkillResultT, CharacterT } from '../types'\r\nimport { updateCharacter } from './Party'\r\nimport {\r\n  addStatusAndTags,\r\n  getDamageResistance,\r\n  processCharacter,\r\n  decrementStatusDurations,\r\n} from './Character'\r\nimport { PLAYER_PARTY_ID } from '../objects/Party'\r\nimport { noneg } from '../util'\r\n\r\nconst localUpdater = (\r\n  p: PartyT,\r\n  id: string,\r\n  updater: (c: CharacterT) => CharacterT,\r\n) => {\r\n  return updateCharacter(p, id, updater)\r\n}\r\n\r\ninterface CommitSkillResultsT {\r\n  party: PartyT\r\n  enemyParty: PartyT\r\n}\r\nexport const commitSkillResults = (party: PartyT, enemyParty: PartyT) => (\r\n  results: TargetSkillResultT[],\r\n): CommitSkillResultsT => {\r\n  results.forEach((result, index) => {\r\n    const { source, target } = result\r\n    let sourceParty = [party, enemyParty].find(\r\n      (p) => p.id === source.partyId,\r\n    ) as PartyT\r\n    let targetParty = [party, enemyParty].find(\r\n      (p) => p.id === target.partyId,\r\n    ) as PartyT\r\n    const localUpdate = (\r\n      p: PartyT,\r\n      id: string,\r\n      updater: (c: CharacterT) => CharacterT,\r\n    ) => {\r\n      if (p.id === sourceParty.id) {\r\n        sourceParty = localUpdater(p, id, updater)\r\n        return\r\n      }\r\n      if (p.id === targetParty.id) {\r\n        targetParty = localUpdater(p, id, updater)\r\n        return\r\n      }\r\n    }\r\n\r\n    localUpdate(targetParty, target.id, (c) => {\r\n      return addStatusAndTags(\r\n        {\r\n          ...c,\r\n          stats: {\r\n            ...c.stats,\r\n            healthOffset: c.stats.healthOffset + result.totalDamage.damage,\r\n          },\r\n        },\r\n        result.addedStatus,\r\n        result.addedTags,\r\n      )\r\n    })\r\n\r\n    if (result.splashDamage.damage > 0) {\r\n      targetParty.characters\r\n        .filter((c) => c.id !== result.target.id)\r\n        .forEach((character) => {\r\n          localUpdate(targetParty, character.id, (c) => {\r\n            const splashDamageResistance = getDamageResistance(\r\n              processCharacter(character),\r\n              result.splashDamage.type,\r\n            )\r\n            return {\r\n              ...c,\r\n              stats: {\r\n                ...c.stats,\r\n                healthOffset:\r\n                  c.stats.healthOffset +\r\n                  (result.splashDamage.damage - splashDamageResistance),\r\n              },\r\n            }\r\n          })\r\n        })\r\n    }\r\n\r\n    if (result.reflectedDamage.damage > 0 && !result.willDie) {\r\n      localUpdate(sourceParty, source.id, (c) => {\r\n        // TODO: consider adding in reflected resistance here\r\n        return {\r\n          ...c,\r\n          stats: {\r\n            ...c.stats,\r\n            healthOffset: c.stats.healthOffset + result.reflectedDamage.damage,\r\n          },\r\n        }\r\n      })\r\n    }\r\n\r\n    if (index === results.length - 1) {\r\n      if (result.regeneratedHealth > 0) {\r\n        localUpdate(sourceParty, source.id, (c) => {\r\n          return {\r\n            ...c,\r\n            stats: {\r\n              ...c.stats,\r\n              healthOffset: noneg(\r\n                c.stats.healthOffset - result.regeneratedHealth,\r\n              ),\r\n            },\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    if (sourceParty.id === PLAYER_PARTY_ID) {\r\n      party = sourceParty\r\n    } else {\r\n      enemyParty = sourceParty\r\n    }\r\n    if (targetParty.id === PLAYER_PARTY_ID) {\r\n      if (sourceParty.id !== PLAYER_PARTY_ID) {\r\n        party = targetParty\r\n      }\r\n    } else {\r\n      enemyParty = targetParty\r\n    }\r\n  })\r\n  return {\r\n    party: {\r\n      ...party,\r\n      characters: party.characters.map((c) => decrementStatusDurations(c)),\r\n    },\r\n    enemyParty: {\r\n      ...enemyParty,\r\n      characters: enemyParty.characters.map((c) => decrementStatusDurations(c)),\r\n    },\r\n  }\r\n}\r\n","import { v4 } from 'uuid'\r\nimport { useSelector } from 'react-redux'\r\nimport { StateCoreT, StateActionT, StateT } from '../types'\r\nimport { PartyT, CharacterT } from '../../types'\r\nimport { Dispatch } from 'redux'\r\nimport { makeReducer } from '../util'\r\nimport { useActions } from '../../hooks/useActions'\r\nimport {\r\n  updateCharacter,\r\n  makeCharacter,\r\n  checkForProcessedParty,\r\n} from '../../functions'\r\nimport { PLAYER_PARTY_ID } from '../../objects/Party'\r\n\r\nexport const UPDATE_PARTY = '@actions/parties/set-party'\r\nexport const UPSERT_CHARACTER = '@actions/parties/upsert-character'\r\nexport const DELETE_CHARACTER = '@actions/parties/delete-character'\r\nexport const UPSERT_ITEM = '@actions/parties/upsert-item'\r\nexport const DELETE_ITEM = '@actions/parties/delete-item'\r\nexport const UPSERT_MOD = '@actions/parties/upsert-mod'\r\nexport const DELETE_MOD = '@actions/parties/delete-mod'\r\n\r\nexport const actionCreators = {\r\n  updateParty: (party: PartyT): StateActionT => {\r\n    return {\r\n      type: UPDATE_PARTY,\r\n      payload: {\r\n        party,\r\n      },\r\n    }\r\n  },\r\n  upsertCharacter: (character: CharacterT): StateActionT => {\r\n    return {\r\n      type: UPSERT_CHARACTER,\r\n      payload: {\r\n        character,\r\n      },\r\n    }\r\n  },\r\n  deleteCharacter: (characterId: string): StateActionT => {\r\n    return {\r\n      type: DELETE_CHARACTER,\r\n      payload: {\r\n        characterId,\r\n      },\r\n    }\r\n  },\r\n}\r\n\r\nexport const actions = {\r\n  updateParty: (party: PartyT) => (dispatch: Dispatch) => {\r\n    checkForProcessedParty(party)\r\n    dispatch(actionCreators.updateParty(party))\r\n  },\r\n  upsertCharacter: (character: CharacterT) => (dispatch: Dispatch) => {\r\n    dispatch(actionCreators.upsertCharacter(character))\r\n  },\r\n  deleteCharacter: (characterId: string) => (dispatch: Dispatch) => {\r\n    dispatch(actionCreators.deleteCharacter(characterId))\r\n  },\r\n}\r\n\r\nexport const core: StateCoreT<PartyT> = {\r\n  [UPDATE_PARTY]: (state, action) => {\r\n    return {\r\n      ...action.payload.party,\r\n    }\r\n  },\r\n  [UPSERT_CHARACTER]: (state, action) => {\r\n    return updateCharacter(\r\n      state,\r\n      action.payload.character.id,\r\n      (c) => action.payload.character,\r\n    )\r\n  },\r\n  [DELETE_CHARACTER]: (state, action) => {\r\n    return {\r\n      ...state,\r\n      characters: state.characters.filter(\r\n        (c) => c.id !== action.payload.characterId,\r\n      ),\r\n    }\r\n  },\r\n}\r\nconst jack = { ...makeCharacter('blacksmith'), name: 'Jack' }\r\nexport const INITIAL_STATE: PartyT = {\r\n  isParty: true,\r\n  id: PLAYER_PARTY_ID,\r\n  name: 'PlayerParty',\r\n  characters: [\r\n    { ...jack },\r\n    { ...makeCharacter('hunter'), name: 'Jim' },\r\n    { ...makeCharacter('scholar'), name: 'Johnny' },\r\n  ],\r\n}\r\nexport default makeReducer(core, INITIAL_STATE)\r\nexport const useParty = () => useSelector((state: StateT) => state.party)\r\nexport const usePartyActions = () =>\r\n  useActions(actions) as {\r\n    updateParty: (party: PartyT) => void\r\n    upsertCharacter: (character: CharacterT) => void\r\n    deleteCharacter: (characterId: string) => void\r\n  }\r\n","import { StateCoreT, StateReducerT } from './types'\r\n\r\nexport const makeReducer = (\r\n  core: StateCoreT,\r\n  initialState: any,\r\n): StateReducerT => {\r\n  return (state = initialState, action) => {\r\n    const coreFn = core[action.type]\r\n    if (coreFn) return coreFn(state, action)\r\n    return state\r\n  }\r\n}\r\n","import { useMemo } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\n\r\nexport const useActions = (actions: any) => {\r\n  const dispatch = useDispatch()\r\n  return useMemo(() => bindActionCreators(actions, dispatch), [\r\n    dispatch,\r\n    actions,\r\n  ])\r\n}\r\n","import React, { useMemo, useContext } from 'react'\r\nimport {\r\n  PartyT,\r\n  ProcessedPartyT,\r\n  CharacterT,\r\n  ProcessedCharacterT,\r\n} from '../../types'\r\nimport { usePartyActions, useParty } from '../../state/party'\r\nimport { findCharacterInParty, processParty, makeParty } from '../../functions'\r\n\r\nexport interface PartyContextT {\r\n  party: ProcessedPartyT\r\n  rawParty: PartyT\r\n  updateParty: (party: PartyT) => void\r\n  upsertCharacter: (character: CharacterT) => void\r\n  deleteCharacter: (characterId: string) => void\r\n  findCharacter: (characterId: string) => ProcessedCharacterT | undefined\r\n  findRawCharacter: (characterId: string) => CharacterT | undefined\r\n}\r\nconst defaultContextValue: PartyContextT = {\r\n  rawParty: makeParty(),\r\n  party: processParty(makeParty()),\r\n  updateParty: (party) => {},\r\n  upsertCharacter: (character) => {},\r\n  deleteCharacter: (characterId) => {},\r\n  findCharacter: (characterId) => undefined,\r\n  findRawCharacter: (characterId) => undefined,\r\n}\r\nexport const PartyContext = React.createContext<PartyContextT>(\r\n  defaultContextValue,\r\n)\r\n\r\nexport interface PartyContextProviderPropsT {\r\n  children: React.ReactNode | React.ReactNode[]\r\n}\r\nexport const PartyContextProvider = (props: PartyContextProviderPropsT) => {\r\n  const { children } = props\r\n  const actions = usePartyActions()\r\n  const rawParty = useParty()\r\n  const party = useMemo(() => processParty(rawParty), [rawParty])\r\n\r\n  const updateParty = (party: PartyT) => {\r\n    actions.updateParty(party)\r\n  }\r\n  const upsertCharacter = (character: CharacterT) => {\r\n    if (!character) return\r\n    if ((character as ProcessedCharacterT).processed) {\r\n      throw new Error('No processed Characters Allowed')\r\n    }\r\n    actions.upsertCharacter(character)\r\n  }\r\n  const deleteCharacter = (characterId: string) => {\r\n    actions.deleteCharacter(characterId)\r\n  }\r\n  const findCharacter = (characterId: string) => {\r\n    return findCharacterInParty<ProcessedPartyT, ProcessedCharacterT>(\r\n      party,\r\n      characterId,\r\n    )\r\n  }\r\n  const findRawCharacter = (characterId: string) => {\r\n    return findCharacterInParty(rawParty, characterId)\r\n  }\r\n\r\n  return (\r\n    <PartyContext.Provider\r\n      value={{\r\n        party,\r\n        rawParty,\r\n        updateParty,\r\n        upsertCharacter,\r\n        deleteCharacter,\r\n        findCharacter,\r\n        findRawCharacter,\r\n      }}\r\n    >\r\n      {children}\r\n    </PartyContext.Provider>\r\n  )\r\n}\r\n\r\nexport const usePartyContext = () => useContext(PartyContext)\r\n","import { ProcessedCharacterT } from './Character'\r\nimport { hasTag } from '../functions'\r\n\r\nexport interface CombatQueueT {\r\n  [characterId: string]: number\r\n}\r\n\r\nexport const makeCombatQueue = (\r\n  characters: ProcessedCharacterT[],\r\n): CombatQueueT => {\r\n  const sortedCharacters = characters.sort(\r\n    (a, b) => b.stats.agility - a.stats.agility,\r\n  )\r\n  return sortedCharacters.reduce(\r\n    (r, c, i) => ({\r\n      ...r,\r\n      [c.id]: 100 - c.stats.agility,\r\n    }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const getMax = (queue: CombatQueueT): number => {\r\n  return Object.keys(queue).reduce((r: number, id: string) => {\r\n    if (r < queue[id]) return queue[id]\r\n    return r\r\n  }, Number.NEGATIVE_INFINITY)\r\n}\r\n\r\nexport const getMin = (queue: CombatQueueT): number => {\r\n  return Object.keys(queue).reduce((r: number, id: string) => {\r\n    if (queue[id] < r) return queue[id]\r\n    return r\r\n  }, Number.POSITIVE_INFINITY)\r\n}\r\n\r\nexport const consolidateQueue = (\r\n  queue: CombatQueueT,\r\n  characters: ProcessedCharacterT[] = [],\r\n): CombatQueueT => {\r\n  let min = getMin(queue)\r\n  return Object.keys(queue).reduce((r, id) => {\r\n    const character = characters.find((c) => c.id === id)\r\n    const offset = character && hasTag(character, 'dazed') ? 0 : min\r\n    return {\r\n      ...r,\r\n      [id]: queue[id] - offset,\r\n    }\r\n  }, {})\r\n}\r\n\r\nexport const shiftQueue = (\r\n  queue: CombatQueueT,\r\n  character: ProcessedCharacterT,\r\n  characters: ProcessedCharacterT[],\r\n): CombatQueueT => {\r\n  const ret = consolidateQueue(\r\n    {\r\n      ...queue,\r\n      [character.id]: 200 - character.stats.agility,\r\n    },\r\n    characters,\r\n  )\r\n  return ret\r\n}\r\n\r\nexport const getFirst = (queue: CombatQueueT): string => {\r\n  let min = Number.POSITIVE_INFINITY\r\n  let key = Object.keys(queue)[0]\r\n  Object.keys(queue).forEach((id) => {\r\n    if (min > queue[id]) {\r\n      min = queue[id]\r\n      key = id\r\n    }\r\n  })\r\n  return key\r\n}\r\n\r\nexport const removeFromQueue = (\r\n  queue: CombatQueueT,\r\n  id: string,\r\n): CombatQueueT => {\r\n  return consolidateQueue(\r\n    Object.keys(queue)\r\n      .filter((key) => key !== id)\r\n      .reduce(\r\n        (r, id) => ({\r\n          ...r,\r\n          [id]: queue[id],\r\n        }),\r\n        {},\r\n      ),\r\n  )\r\n}\r\n\r\nexport const validateQueue = (\r\n  queue: CombatQueueT,\r\n  characters: ProcessedCharacterT[],\r\n): CombatQueueT => {\r\n  return consolidateQueue(\r\n    characters.reduce((r, c) => {\r\n      return c.dead ? r : { ...r, [c.id]: queue[c.id] }\r\n    }, {}),\r\n  )\r\n}\r\n\r\nexport const getSortedIds = (queue: CombatQueueT): string[] => {\r\n  return Object.keys(queue).sort((a, b) => queue[a] - queue[b])\r\n}\r\n","import React, {\r\n  createContext,\r\n  useContext,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useCallback,\r\n} from 'react'\r\nimport {\r\n  ProcessedPartyT,\r\n  PartyT,\r\n  SkillT,\r\n  ProcessedCharacterT,\r\n  TargetSkillResultT,\r\n  SkillTargetT,\r\n} from '../../types'\r\nimport {\r\n  makeParty,\r\n  processParty,\r\n  getSkillResults,\r\n  commitSkillResults,\r\n  processCharacter,\r\n  makeCharacter,\r\n  resolveSkillTarget,\r\n  makeSkillTarget,\r\n} from '../../functions'\r\nimport { usePartyContext } from '../PartyContext'\r\nimport {\r\n  CombatQueueT,\r\n  makeCombatQueue,\r\n  getFirst,\r\n  shiftQueue,\r\n  validateQueue,\r\n} from '../../types/CombatQueue'\r\nimport { getAIAction } from '../../functions/AI'\r\nimport { v4 } from 'uuid'\r\n\r\nexport interface CombatContextT {\r\n  party: ProcessedPartyT\r\n  enemyParty: ProcessedPartyT\r\n  activeCharacter: ProcessedCharacterT\r\n  characters: ProcessedCharacterT[]\r\n  queue: CombatQueueT\r\n  selectedSkill: SkillT | undefined\r\n  selectedTargets: ProcessedCharacterT[]\r\n  roundResults: TargetSkillResultT[][]\r\n  activeRound: TargetSkillResultT[] | undefined\r\n  isRunning: boolean\r\n  isDone: boolean\r\n  isRenderingResult: boolean\r\n  onSkillSelect: (skill: SkillT) => void\r\n  onTargetsSelect: (target: ProcessedCharacterT | ProcessedPartyT) => void\r\n  start: () => void\r\n  next: (nextTarget?: ProcessedCharacterT | ProcessedPartyT) => void\r\n  commit: () => void\r\n}\r\nconst defaultValue: CombatContextT = {\r\n  party: processParty(makeParty()),\r\n  enemyParty: processParty(makeParty()),\r\n  activeCharacter: processCharacter(makeCharacter('blacksmith')),\r\n  characters: [],\r\n  queue: {},\r\n  selectedSkill: undefined,\r\n  selectedTargets: [],\r\n  roundResults: [],\r\n  activeRound: undefined,\r\n  isRunning: false,\r\n  isDone: false,\r\n  isRenderingResult: false,\r\n  onSkillSelect: (skill: SkillT) => {},\r\n  onTargetsSelect: (target: ProcessedCharacterT | ProcessedPartyT) => {},\r\n  start: () => {},\r\n  next: () => {},\r\n  commit: () => {},\r\n}\r\nexport const CombatContext = createContext<CombatContextT>(defaultValue)\r\nexport const useCombatContext = () => useContext(CombatContext)\r\n\r\nexport interface CombatContextProviderPropsT {\r\n  children: JSX.Element\r\n  enemyParty: PartyT\r\n  setEnemyParty: (party: PartyT) => void\r\n  onRequestNewParty: () => void\r\n}\r\nexport const CombatContextProvider = (props: CombatContextProviderPropsT) => {\r\n  const { children, setEnemyParty, onRequestNewParty } = props\r\n  const { party, rawParty, updateParty } = usePartyContext()\r\n  const resultCommitter = useMemo(\r\n    () => commitSkillResults(rawParty, props.enemyParty),\r\n    [rawParty, props.enemyParty],\r\n  )\r\n  const enemyParty = useMemo(() => processParty(props.enemyParty), [\r\n    props.enemyParty,\r\n  ])\r\n  const [isRunning, setIsRunning] = useState<boolean>(false)\r\n  const [isDone, setIsDone] = useState<boolean>(false)\r\n  const [isRenderingResult, setIsRenderingResult] = useState<boolean>(false)\r\n  const characters = useMemo(\r\n    () => [...party.characters, ...enemyParty.characters],\r\n    [party, enemyParty],\r\n  )\r\n  const [queue, setQueue] = useState<CombatQueueT>(\r\n    makeCombatQueue([...party.characters, ...enemyParty.characters]),\r\n  )\r\n  const [roundId, setRoundId] = useState<string>(v4())\r\n  const [roundResults, setRoundResults] = useState<TargetSkillResultT[][]>([])\r\n  const [activeRound, setActiveRound] = useState<\r\n    TargetSkillResultT[] | undefined\r\n  >()\r\n  const [selectedTarget, setSelectedTarget] = useState<\r\n    SkillTargetT | undefined\r\n  >()\r\n  const [selectedSkill, setSelectedSkill] = useState<SkillT | undefined>()\r\n  const activeCharacter = useMemo(\r\n    () =>\r\n      characters.find(\r\n        (c) => !c.dead && c.id === getFirst(queue),\r\n      ) as ProcessedCharacterT,\r\n    [queue, characters],\r\n  )\r\n\r\n  const start = useCallback(() => {\r\n    setIsDone(false)\r\n    setIsRunning(true)\r\n  }, [activeCharacter])\r\n\r\n  // temp code\r\n  useEffect(() => {\r\n    if (!isRunning) {\r\n      start()\r\n    } else {\r\n      setQueue(makeCombatQueue([...party.characters, ...enemyParty.characters]))\r\n    }\r\n  }, [isRunning])\r\n\r\n  const next = (nextTarget?: ProcessedCharacterT | ProcessedPartyT) => {\r\n    if (!selectedSkill) return\r\n    const roundTarget = nextTarget\r\n      ? makeSkillTarget(selectedSkill.targetType, nextTarget)\r\n      : selectedTarget\r\n    if (!selectedSkill || !roundTarget) return\r\n    const results = getSkillResults(\r\n      selectedSkill,\r\n      activeCharacter,\r\n      resolveSkillTarget(roundTarget).filter((c) => !c.dead),\r\n    )\r\n    setActiveRound(results)\r\n    setSelectedSkill(undefined)\r\n    setSelectedTarget(undefined)\r\n    setIsRenderingResult(true)\r\n  }\r\n\r\n  const onSkillSelect = (skill: SkillT) => {\r\n    setSelectedSkill(skill)\r\n    if (skill.targetType !== selectedSkill?.targetType) {\r\n      setSelectedTarget(undefined)\r\n    }\r\n  }\r\n\r\n  const onTargetsSelect = (target: ProcessedCharacterT | ProcessedPartyT) => {\r\n    if (!selectedSkill) return\r\n    setSelectedTarget(makeSkillTarget(selectedSkill.targetType, target))\r\n  }\r\n\r\n  const commit = useCallback(() => {\r\n    if (!activeRound) return\r\n    const parties = resultCommitter(activeRound)\r\n    setRoundResults((r) => [...r, activeRound])\r\n    setEnemyParty(parties.enemyParty)\r\n    updateParty(parties.party)\r\n    setActiveRound(undefined)\r\n    const updatedCharacters = [\r\n      ...parties.party.characters,\r\n      ...parties.enemyParty.characters,\r\n    ].map((c) => processCharacter(c))\r\n    setQueue(\r\n      validateQueue(\r\n        shiftQueue(queue, activeRound[0].source, updatedCharacters),\r\n        updatedCharacters,\r\n      ),\r\n    )\r\n    setRoundId(v4())\r\n    setIsRenderingResult(false)\r\n  }, [activeRound, queue])\r\n\r\n  const execEnemyTurn = (skill: SkillT, target: SkillTargetT) => {\r\n    const results = getSkillResults(\r\n      skill,\r\n      activeCharacter,\r\n      resolveSkillTarget(target),\r\n    )\r\n    setActiveRound(results)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (activeCharacter) {\r\n      if (activeCharacter.partyId === enemyParty.id) {\r\n        const { skill, target } = getAIAction(\r\n          activeCharacter,\r\n          party,\r\n          enemyParty,\r\n        )\r\n\r\n        execEnemyTurn(skill, makeSkillTarget(skill.targetType, target))\r\n      } else {\r\n        setSelectedSkill(activeCharacter.skills[0])\r\n      }\r\n    }\r\n  }, [roundId])\r\n\r\n  useEffect(() => {\r\n    if (isDone) return\r\n    if (enemyParty.characters.every((c) => c.dead)) {\r\n      alert('you win')\r\n      onRequestNewParty()\r\n      setRoundResults([])\r\n      setSelectedSkill(undefined)\r\n      setIsRunning(false)\r\n      return\r\n    }\r\n    if (party.characters.every((c) => c.dead)) {\r\n      alert('you lose')\r\n      setIsDone(true)\r\n      return\r\n    }\r\n  }, [party, enemyParty])\r\n\r\n  useEffect(() => {\r\n    if (activeCharacter && activeCharacter.skills[0]) {\r\n      setSelectedSkill(activeCharacter.skills[0])\r\n    }\r\n  }, [activeCharacter])\r\n\r\n  return (\r\n    <CombatContext.Provider\r\n      value={{\r\n        party,\r\n        enemyParty,\r\n        characters,\r\n        queue,\r\n        activeCharacter,\r\n        activeRound,\r\n        selectedSkill,\r\n        selectedTargets: selectedTarget\r\n          ? resolveSkillTarget(selectedTarget)\r\n          : [],\r\n        roundResults,\r\n        isDone,\r\n        isRunning,\r\n        isRenderingResult,\r\n        onSkillSelect,\r\n        onTargetsSelect,\r\n        start,\r\n        next,\r\n        commit,\r\n      }}\r\n    >\r\n      {children}\r\n    </CombatContext.Provider>\r\n  )\r\n}\r\n","import { ProcessedCharacterT, ProcessedPartyT, SkillT } from '../types'\r\nimport { getRandom } from '../util'\r\nimport { getSkillTargetOptions } from './Skill'\r\n\r\nexport interface AIActionT {\r\n  skill: SkillT\r\n  target: ProcessedCharacterT | ProcessedPartyT\r\n}\r\nexport const getAIAction = (\r\n  source: ProcessedCharacterT,\r\n  playerParty: ProcessedPartyT,\r\n  enemyParty: ProcessedPartyT,\r\n): AIActionT => {\r\n  const skill = getRandom(source.skills)\r\n  const targetedCharacters = playerParty.characters.filter((c) =>\r\n    c.tags.map((t) => t.type).includes('targeted'),\r\n  )\r\n  const target =\r\n    skill.targetType === 'single'\r\n      ? targetedCharacters.length > 0\r\n        ? getRandom(targetedCharacters)\r\n        : getRandom(playerParty.characters)\r\n      : getRandom<ProcessedPartyT | ProcessedCharacterT>(\r\n          getSkillTargetOptions(source, enemyParty, playerParty, skill),\r\n        )\r\n\r\n  return { skill, target }\r\n}\r\n","import { styled } from 'styletron-react'\r\n\r\nexport interface FlexContainerPropsT {\r\n  $direction?: 'row' | 'column' | 'column-reverse'\r\n  $full?: boolean\r\n}\r\nexport const FlexContainer = styled('div', (props: FlexContainerPropsT) => ({\r\n  display: 'flex',\r\n  flexDirection: props.$direction || 'row',\r\n  flex: props.$full ? 1 : 'default',\r\n}))\r\nexport const FullContainer = styled('div', () => ({\r\n  flex: 1,\r\n}))\r\n","import { styled } from 'styletron-react'\r\n\r\nexport const Monospace = styled('span', () => ({\r\n  fontFamily: 'Inconsolata, monospace',\r\n  fontWeight: 600,\r\n}))\r\nexport const Monodiv = styled('div', () => ({\r\n  fontFamily: 'Inconsolata, monospace',\r\n  fontWeight: 600,\r\n}))\r\n","import React from 'react'\r\nimport { CharacterT, PartyT, SkillT } from '../../types'\r\n\r\nexport const Span = (color: string, text: JSX.Element | string) => (\r\n  <span style={{ color, fontWeight: 'bold' }}>{text}</span>\r\n)\r\nexport const SkillSpan = (skill: SkillT) => Span('plum', skill.name)\r\n\r\nexport const NameSpanBuilder = (party: PartyT, enemyParty: PartyT) => (\r\n  character: CharacterT,\r\n) => {\r\n  const isUserParty = character.partyId === party.id\r\n  const isEnemyParty = character.partyId === enemyParty.id\r\n  const color = isUserParty\r\n    ? 'lightgreen'\r\n    : isEnemyParty\r\n    ? 'lightsalmon'\r\n    : 'white'\r\n\r\n  return Span(color, character.name)\r\n}\r\n","import React, { createContext, useContext, useState, useEffect } from 'react'\r\nimport { useCombatContext } from '../CombatContext'\r\nimport { Monospace } from '../../elements/monospace'\r\nimport { NameSpanBuilder, SkillSpan, Span } from './util'\r\nimport { getDamageResistance } from '../../functions'\r\nimport { noneg } from '../../util'\r\n\r\nexport interface CombatLogContextT {\r\n  combatLog: JSX.Element[]\r\n}\r\nconst defualtValue: CombatLogContextT = {\r\n  combatLog: [],\r\n}\r\nexport const CombatLogContext = createContext<CombatLogContextT>(defualtValue)\r\nexport const useCombatLogContext = () => useContext(CombatLogContext)\r\n\r\ntype DeadLogT = Record<string, boolean | undefined>\r\n\r\nexport interface CombatLogContextProviderPropsT {\r\n  children: JSX.Element\r\n}\r\nexport const CombatLogContextProvider = (\r\n  props: CombatLogContextProviderPropsT,\r\n) => {\r\n  const { children } = props\r\n  const { activeRound, roundResults, enemyParty, party } = useCombatContext()\r\n  const [combatLog, setCombatLog] = useState<JSX.Element[]>([])\r\n  const [deadLog, setDeadLog] = useState<DeadLogT>({})\r\n  const NameSpan = NameSpanBuilder(party, enemyParty)\r\n  const log = (line: JSX.Element) =>\r\n    setCombatLog((log) => [\r\n      ...log,\r\n      <Monospace style={{ display: 'inline-block', fontWeight: 'normal' }}>\r\n        {line}\r\n      </Monospace>,\r\n    ])\r\n\r\n  useEffect(() => {\r\n    const characters = [...enemyParty.characters, ...party.characters]\r\n    setTimeout(() => {\r\n      characters.forEach((character) => {\r\n        if (character.dead && !deadLog[character.id]) {\r\n          setDeadLog((dLog) => ({ ...dLog, [character.id]: true }))\r\n          log(<span>{Span('lightcoral', `${character.name} died.`)}</span>)\r\n        }\r\n      })\r\n    }, 5)\r\n  }, [enemyParty, party])\r\n\r\n  useEffect(() => {\r\n    if (activeRound && activeRound[0]) {\r\n      log(\r\n        <span>\r\n          {NameSpan(activeRound[0].source)} uses{' '}\r\n          {SkillSpan(activeRound[0].skill)}.\r\n        </span>,\r\n      )\r\n    }\r\n  }, [activeRound])\r\n\r\n  useEffect(() => {\r\n    if (roundResults.length === 0) return\r\n    const latestRounds = roundResults[roundResults.length - 1]\r\n    const baseRound = latestRounds[0]\r\n    if (!baseRound) return\r\n\r\n    if (!baseRound.accuracySuccess) {\r\n      if (baseRound.skill.damage) {\r\n        {\r\n          log(<span>{baseRound.source.name}'s attack missed.</span>)\r\n        }\r\n      } else {\r\n        log(<span>{SkillSpan(baseRound.skill)} failed.</span>)\r\n      }\r\n    }\r\n    if (baseRound.criticalSuccess) {\r\n      log(<span>{Span('gold', 'Critical Hit!')}</span>)\r\n    }\r\n    if (baseRound.perfect) {\r\n      log(<span>{Span('gold', 'Perfect!')}</span>)\r\n    }\r\n    latestRounds.forEach((round) => {\r\n      const targetParty = party.id === round.source.partyId ? enemyParty : party\r\n      if (round.accuracySuccess) {\r\n        if (round.dodgeSuccess) {\r\n          log(<span>{NameSpan(round.target)} dodged the attack.</span>)\r\n        } else if (round.totalDamage.damage > 0) {\r\n          log(\r\n            <span>\r\n              {SkillSpan(round.skill)} deals{' '}\r\n              {Span('white', `${round.totalDamage.damage} damage`)} to{' '}\r\n              {NameSpan(round.target)}.\r\n            </span>,\r\n          )\r\n        } else if (round.skill.damage) {\r\n          log(\r\n            <span>\r\n              {SkillSpan(round.skill)} did no damage to {NameSpan(round.target)}\r\n              .\r\n            </span>,\r\n          )\r\n        }\r\n        if (round.splashDamage.damage > 0) {\r\n          targetParty.characters\r\n            .filter((c) => c.id !== round.target.id && !c.dead)\r\n            .forEach((subTarget) => {\r\n              const splashDamageResistance = getDamageResistance(\r\n                subTarget,\r\n                round.splashDamage.type,\r\n              )\r\n              log(\r\n                <span>\r\n                  {SkillSpan(round.skill)} deals{' '}\r\n                  {Span(\r\n                    'white',\r\n                    `${\r\n                      round.splashDamage.damage - splashDamageResistance\r\n                    } splash damage`,\r\n                  )}{' '}\r\n                  to {NameSpan(subTarget)}.\r\n                </span>,\r\n              )\r\n            })\r\n        }\r\n\r\n        if (round.reflectedDamage.damage > 0) {\r\n          log(\r\n            <span>\r\n              {NameSpan(round.target)} reflected{' '}\r\n              {Span('white', `${round.reflectedDamage.damage} damage`)}\r\n            </span>,\r\n          )\r\n        }\r\n\r\n        round.addedTags.forEach((tag) => {\r\n          log(\r\n            <span>\r\n              {NameSpan(round.target)} became {tag.type} ({tag.duration} turns).\r\n            </span>,\r\n          )\r\n        })\r\n      }\r\n    })\r\n    if (baseRound.regeneratedHealth > 0) {\r\n      log(\r\n        <span>\r\n          {NameSpan(baseRound.source)} gained {baseRound.regeneratedHealth}{' '}\r\n          health from HP regen.\r\n        </span>,\r\n      )\r\n    }\r\n  }, [roundResults.length])\r\n\r\n  return (\r\n    <CombatLogContext.Provider value={{ combatLog }}>\r\n      {children}\r\n    </CombatLogContext.Provider>\r\n  )\r\n}\r\n","import React, { useState, useLayoutEffect } from 'react'\r\nimport { v4 } from 'uuid'\r\n\r\nexport interface HoverChildrenT {\r\n  isHovering: boolean\r\n}\r\nexport interface HoverPropsT {\r\n  delay?: number\r\n  children: (props: HoverChildrenT) => JSX.Element\r\n}\r\nexport const Hover = (props: HoverPropsT) => {\r\n  const { delay = 500, children } = props\r\n  const [internalHovering, setInternalHovering] = useState<boolean>(false)\r\n  const [isHovering, setIsHovering] = useState<boolean>(false)\r\n  const [guid, setGuid] = useState<string>(v4())\r\n  useLayoutEffect(() => {\r\n    const action = async () => {\r\n      if (internalHovering) {\r\n        setTimeout(() => {\r\n          setGuid(v4())\r\n        }, delay)\r\n      }\r\n    }\r\n    action()\r\n  }, [internalHovering])\r\n  useLayoutEffect(() => {\r\n    if (internalHovering) {\r\n      setIsHovering(true)\r\n    }\r\n  }, [guid])\r\n  const onMouseEnter = (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    setInternalHovering(true)\r\n  }\r\n  const onMouseLeave = (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    setInternalHovering(false)\r\n    setIsHovering(false)\r\n  }\r\n  return (\r\n    <div onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\r\n      {children({ isHovering })}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Hover } from '../components/Hover'\r\n\r\nexport interface BoxContainerPropsT extends React.HTMLProps<HTMLDivElement> {\r\n  substyle?: React.CSSProperties\r\n  tag?: any\r\n  to?: string\r\n}\r\nexport const BoxContainer = (props: BoxContainerPropsT) => {\r\n  const {\r\n    style = {},\r\n    substyle = {},\r\n    children,\r\n    tag: Element = 'div',\r\n    ...rest\r\n  } = props\r\n  return (\r\n    <div\r\n      style={{\r\n        border: '1px solid #000',\r\n        display: 'flex',\r\n        boxSizing: 'border-box',\r\n        ...style,\r\n      }}\r\n    >\r\n      <Element\r\n        style={{\r\n          border: substyle.border || '1px solid #555',\r\n          background: 'linear-gradient(0deg, #222222 0%, #2a2a2a 100%)',\r\n          padding: 10,\r\n          color: '#ccc',\r\n          flex: 1,\r\n          boxShadow: 'inset 0px 0px 2px black',\r\n          ...substyle,\r\n        }}\r\n        {...rest}\r\n      >\r\n        {children}\r\n      </Element>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const SmallBox = (props: BoxContainerPropsT) => (\r\n  <BoxContainer\r\n    {...props}\r\n    style={{\r\n      height: 40,\r\n      width: 40,\r\n      ...props.style,\r\n    }}\r\n    substyle={{\r\n      display: 'flex',\r\n      padding: 0,\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      background: '#111',\r\n      ...props.substyle,\r\n    }}\r\n  >\r\n    {props.children}\r\n  </BoxContainer>\r\n)\r\n\r\nexport const BoxButton = (props: BoxContainerPropsT) => {\r\n  return (\r\n    <Hover delay={0}>\r\n      {({ isHovering }) => (\r\n        <BoxContainer\r\n          {...props}\r\n          tag='button'\r\n          style={{\r\n            margin: 0,\r\n            ...(props.style || {}),\r\n          }}\r\n          substyle={{\r\n            borderColor: isHovering && !props.disabled ? '#999' : '#555',\r\n            padding: '4px',\r\n            cursor: props.disabled ? 'default' : 'pointer',\r\n            background: props.disabled ? '#444' : '#111',\r\n            boxShadow: props.disabled ? 'none' : undefined,\r\n            ...(props.substyle || {}),\r\n          }}\r\n        />\r\n      )}\r\n    </Hover>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport BaseTooltip, { TooltipProps } from 'react-tooltip-lite'\r\nimport { Hover } from '../Hover'\r\n\r\ninterface PropsT extends TooltipProps {\r\n  children: JSX.Element\r\n}\r\nexport const Tooltip = (props: PropsT) => {\r\n  const { ...rest } = props\r\n  return (\r\n    <BaseTooltip\r\n      direction='up'\r\n      tagName='div'\r\n      padding='0'\r\n      arrow={false}\r\n      {...rest}\r\n    />\r\n  )\r\n}\r\n\r\nexport const HoverToolTip = (props: PropsT) => {\r\n  return (\r\n    <Hover>\r\n      {({ isHovering }) => <Tooltip {...props} isOpen={isHovering} />}\r\n    </Hover>\r\n  )\r\n}\r\n","import React, { CSSProperties } from 'react'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\nimport { HoverToolTip } from '../Tooltip'\r\nimport { Monodiv } from '../../elements/monospace'\r\n\r\nexport interface GaugePropsT {\r\n  name?: string\r\n  color: string\r\n  height?: number\r\n  max: number\r\n  value: number\r\n  style?: CSSProperties\r\n  children?: React.ReactNode | React.ReactNode[]\r\n}\r\nexport const Gauge = (props: GaugePropsT) => {\r\n  const { name = '', value, max, color, height = 30, children } = props\r\n  const p = (value / max) * 100\r\n  const percentage = p > 100 ? 100 : p\r\n  return (\r\n    <HoverToolTip\r\n      direction='right'\r\n      content={<BoxContainer>{`${name} (${value} / ${max})`}</BoxContainer>}\r\n    >\r\n      <BoxContainer\r\n        style={{ borderLeft: 'none' }}\r\n        substyle={{\r\n          padding: 0,\r\n          background: '#555',\r\n          height: height - 2,\r\n          position: 'relative',\r\n          borderColor: '1px rgba(255,255,255,0.3)',\r\n        }}\r\n      >\r\n        <FlexContainer\r\n          style={{\r\n            position: 'absolute',\r\n            left: 0,\r\n            boxSizing: 'border-box',\r\n            height: height - 2,\r\n            maxWidth: `${percentage}%`,\r\n            minWidth: `${percentage}%`,\r\n            boxShadow: 'inset 0px 0px 1px rgba(0,0,0,0.5)',\r\n            textShadow: '1px 1px 1px black',\r\n            backgroundColor: color,\r\n            color: 'white',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            transition: 'all 0.5s',\r\n          }}\r\n        ></FlexContainer>\r\n        <FullContainer\r\n          style={{\r\n            position: 'absolute',\r\n            height,\r\n            lineHeight: `${height - 2}px`,\r\n            right: 4,\r\n            top: 0,\r\n            fontSize: 10,\r\n            fontWeight: 'bold',\r\n            overflow: 'hidden',\r\n            textShadow: '0px 0px 3px black',\r\n          }}\r\n        >\r\n          <Monodiv>{children}</Monodiv>\r\n        </FullContainer>\r\n      </BoxContainer>\r\n    </HoverToolTip>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { styled, withWrapper } from 'styletron-react'\r\nimport { HoverToolTip } from '../components/Tooltip'\r\n\r\nconst Div = styled('div', {\r\n  transform: 'rotateY(0deg) rotate(-45deg)',\r\n})\r\nexport const Badge = withWrapper(Div, (Element) => (props: any) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: props.$absolute === false ? 'relative' : 'absolute',\r\n        background: '#111',\r\n        padding: '4px',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        boxShadow: '1px 1px 0px black',\r\n        height: props.$size || '20px',\r\n        width: props.$size || '20px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        lineHeight: '20px',\r\n        fontWeight: 'bolder',\r\n        borderRadius: '30%',\r\n        transform: 'rotateY(0deg) rotate(45deg)',\r\n        color: props.$color || 'white',\r\n        top: props.$top,\r\n        bottom: props.$bottom,\r\n        right: props.$right,\r\n        left: props.$left,\r\n      }}\r\n    >\r\n      <Element {...props} />\r\n    </div>\r\n  )\r\n})\r\n\r\nexport interface HoverBadgePropsT {\r\n  children: JSX.Element\r\n  content: JSX.Element\r\n  badgeProps: any\r\n  direction?: 'up' | 'down' | 'left' | 'right'\r\n}\r\nexport const HoverBadge = (props: HoverBadgePropsT) => {\r\n  const { children, content, badgeProps, direction } = props\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        top: badgeProps.$top,\r\n        bottom: badgeProps.$bottom,\r\n        left: badgeProps.$left,\r\n        right: badgeProps.$right,\r\n      }}\r\n    >\r\n      <HoverToolTip\r\n        distance={2}\r\n        direction={direction || 'right'}\r\n        // styles={{ position: 'absolute' }}\r\n        content={content || <div />}\r\n      >\r\n        <Badge $absolute={false} $color={badgeProps.$color}>\r\n          {children}\r\n        </Badge>\r\n      </HoverToolTip>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nexport interface IconPropsT {\r\n  src: string\r\n  size: number\r\n  fill?: string\r\n  style?: React.CSSProperties\r\n  shadow?: boolean\r\n  onClick?: () => void\r\n}\r\nexport const Icon = ({\r\n  src,\r\n  size,\r\n  style = {},\r\n  fill = 'white',\r\n  shadow,\r\n  onClick,\r\n}: IconPropsT) => {\r\n  const [loading, setLoading] = useState(true)\r\n  const [svg, setSvg] = useState('')\r\n\r\n  useEffect(() => {\r\n    if (src) {\r\n      fetch(src)\r\n        .then((res) => res.text())\r\n        .then((text) => setSvg(text))\r\n        .then(() => setLoading(false))\r\n    }\r\n  }, [src])\r\n\r\n  return !loading ? (\r\n    <div\r\n      className={`icon ${shadow ? 'shadow' : ''}`}\r\n      onClick={() => {\r\n        if (onClick) onClick()\r\n      }}\r\n      style={{ ...style, height: size, width: size, fill }}\r\n      dangerouslySetInnerHTML={{ __html: svg }}\r\n    />\r\n  ) : (\r\n    <div />\r\n  )\r\n}\r\n","import { StatsT, TagTypeT } from '../types'\r\n\r\nimport Vigor from './svg/delapouite/heart-beats.svg'\r\nimport Strength from './svg/delapouite/biceps.svg'\r\nimport Brain from './svg/lorc/brain.svg'\r\nimport Awareness from './svg/delapouite/eye-target.svg'\r\nimport Juggler from './svg/lorc/juggler.svg'\r\nimport Agility from './svg/lorc/sprint.svg'\r\nimport Clover from './svg/lorc/clover.svg'\r\nimport Accuracy from './svg/delapouite/convergence-target.svg'\r\n\r\nimport Dazed from './svg/lorc/star-swirl.svg'\r\nimport Targeted from './svg/sbed/targeted.svg'\r\nimport Evasive from './svg/lorc/dodging.svg'\r\nimport DamageReflection from './svg/lorc/shield-reflect.svg'\r\n\r\nimport Shot from './svg/lorc/high-shot.svg'\r\nimport SnipeShot from './svg/delapouite/shield-impact.svg'\r\nimport Surge from './svg/lorc/fire-zone.svg'\r\nimport AreaBast from './svg/lorc/heavy-timer.svg'\r\nimport Dazzle from './svg/lorc/ubisoft-sun.svg'\r\nimport Smash from './svg/lorc/flat-hammer.svg'\r\nimport Shockwave from './svg/lorc/hammer-drop.svg'\r\nimport Taunt from './svg/lorc/bordered-shield.svg'\r\nimport { SHOT } from '../objects/skills/shot'\r\nimport { SNIPE_SHOT } from '../objects/skills/snipe_shot'\r\nimport { SURGE } from '../objects/skills/surge'\r\nimport { AREA_BLAST } from '../objects/skills/area_blast'\r\nimport { DAZZLE } from '../objects/skills/Dazzle'\r\nimport { SMASH } from '../objects/skills/smash'\r\nimport { SHOCKWAVE } from '../objects/skills/shockwave'\r\nimport { TAUNT } from '../objects/skills/taunt'\r\n\r\nexport const STATI_ICONS: Partial<Record<keyof StatsT | 'accuracy', string>> = {\r\n  vigor: Vigor,\r\n  strength: Strength,\r\n  intelligence: Brain,\r\n  perception: Awareness,\r\n  talent: Juggler,\r\n  agility: Agility,\r\n  luck: Clover,\r\n  accuracy: Accuracy,\r\n}\r\n\r\nexport const TAG_ICONS: Record<TagTypeT, string> = {\r\n  dazed: Dazed,\r\n  targeted: Targeted,\r\n  evasive: Evasive,\r\n  ['damage-reflection']: DamageReflection,\r\n}\r\n\r\nexport const SKILL_ICONS: Record<string, string> = {\r\n  [SHOT.id]: Shot,\r\n  [SNIPE_SHOT.id]: SnipeShot,\r\n  [SURGE.id]: Surge,\r\n  [AREA_BLAST.id]: AreaBast,\r\n  [DAZZLE.id]: Dazzle,\r\n  [SMASH.id]: Smash,\r\n  [SHOCKWAVE.id]: Shockwave,\r\n  [TAUNT.id]: Taunt,\r\n}\r\n","import React from 'react'\r\nimport { Tooltip } from '../Tooltip'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { TAG_ICONS } from '../../icons/maps'\r\nimport { Icon } from '../Icon'\r\nimport { TagT } from '../../types'\r\n\r\nexport interface TagPreviewPropsT {\r\n  tag: TagT\r\n  direction?: 'up' | 'down' | 'left' | 'right'\r\n}\r\nexport const TagPreview = (props: TagPreviewPropsT) => {\r\n  const { tag, direction } = props\r\n  return (\r\n    <Tooltip\r\n      direction={direction || 'bottom'}\r\n      content={\r\n        <BoxContainer style={{ maxWidth: 200 }}>\r\n          <FlexContainer $direction='column'>\r\n            <strong style={{ marginBottom: 8 }}>\r\n              {tag.type} {tag.duration > 0 ? `(${tag.duration})` : ''}\r\n            </strong>\r\n            {tag.description && <span>{tag.description}</span>}\r\n          </FlexContainer>\r\n        </BoxContainer>\r\n      }\r\n    >\r\n      <Icon shadow src={TAG_ICONS[tag.type]} size={20} />\r\n    </Tooltip>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ProcessedCharacterT, StatsT } from '../../types'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\nimport { Gauge } from '../Gauge'\r\nimport { noneg } from '../../util'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { Monodiv } from '../../elements/monospace'\r\nimport { styled, withStyle } from 'styletron-react'\r\nimport { Badge, HoverBadge } from '../../elements/badge'\r\nimport { Icon } from '../Icon'\r\nimport { STATI_ICONS, TAG_ICONS } from '../../icons/maps'\r\nimport Details from '../../icons/svg/delapouite/skills.svg'\r\nimport Inventory from '../../icons/svg/lorc/knapsack.svg'\r\nimport { TagPreview } from '../TagPreview'\r\n\r\nconst ResourceE = withStyle(Monodiv, (props: any) => ({\r\n  height: 15,\r\n  color: props.$color,\r\n  fontSize: '12px',\r\n  fontWeight: 'bolder',\r\n  padding: '0px 4px',\r\n  lineHeight: '15px',\r\n  flex: 1,\r\n  textAlign: 'center',\r\n  background: '#111',\r\n  display: 'flex',\r\n}))\r\n\r\nexport interface PartyCharacterProps {\r\n  character: ProcessedCharacterT\r\n  activeCharacter: ProcessedCharacterT\r\n  hoverable?: boolean\r\n  selected?: boolean\r\n  isHovering?: boolean\r\n  onClick?: () => void\r\n}\r\nconst Wrapper = styled('div', (props: any) => {\r\n  const { $selected, $active, $hoverable, $isHovering } = props\r\n  const hoverable = $hoverable && !$selected\r\n  return {\r\n    margin: 10,\r\n    position: 'relative',\r\n    boxShadow: $isHovering\r\n      ? '0px 0px 20px black'\r\n      : $selected\r\n      ? '0px 0px 10px black'\r\n      : $active\r\n      ? '0px 0px 20px white'\r\n      : 'none',\r\n    ':hover': {\r\n      boxShadow: hoverable ? '0px 0px 20px black' : undefined,\r\n    },\r\n    transition: 'all 0.1s',\r\n  }\r\n})\r\n\r\ninterface CharacterStatPropsT {\r\n  statKey: keyof StatsT\r\n  character: ProcessedCharacterT\r\n}\r\nconst CharacterStat = (props: CharacterStatPropsT) => {\r\n  const { statKey, character } = props\r\n  return (\r\n    <ResourceE $color={getStatColor(character, statKey)}>\r\n      <Icon\r\n        src={STATI_ICONS[statKey] || ''}\r\n        fill={getStatColor(character, statKey)}\r\n        size={14}\r\n        style={{ marginRight: 4 }}\r\n      />\r\n      {character.stats[statKey]}\r\n    </ResourceE>\r\n  )\r\n}\r\n\r\nconst getStatColor = (\r\n  character: ProcessedCharacterT,\r\n  key: keyof StatsT,\r\n): string => {\r\n  const a = character.stats[key]\r\n  const b = character.rawStats[key]\r\n  if (a > b) return 'lightgreen'\r\n  if (b > a) return 'lightcoral'\r\n  return 'rgba(255,255,255,0.6)'\r\n}\r\n\r\nexport const PartyCharacter = (props: PartyCharacterProps) => {\r\n  const {\r\n    character,\r\n    activeCharacter,\r\n    hoverable,\r\n    selected,\r\n    isHovering,\r\n    onClick,\r\n  } = props\r\n  const health = character.health - character.stats.healthOffset\r\n  return (\r\n    <Wrapper\r\n      $hoverable={hoverable && !character.dead}\r\n      $active={character.id === activeCharacter.id}\r\n      $selected={selected}\r\n      $isHovering={isHovering}\r\n      style={{\r\n        opacity: character.dead ? 0.5 : 1,\r\n      }}\r\n    >\r\n      <BoxContainer\r\n        onClick={() => (onClick && !character.dead ? onClick() : null)}\r\n        style={{\r\n          borderWidth: 2,\r\n          cursor: onClick ? 'pointer' : 'default',\r\n        }}\r\n        substyle={{ padding: 0, minWidth: 380 }}\r\n      >\r\n        <FlexContainer style={{ border: '2px solid black' }}>\r\n          <FlexContainer style={{ borderRight: '2px solid black' }}>\r\n            <img\r\n              alt='profile'\r\n              height='115'\r\n              width='115'\r\n              src={`https://picsum.photos/seed/${character.name}/115/115`}\r\n              style={{\r\n                height: 115,\r\n                width: 115,\r\n              }}\r\n            />\r\n          </FlexContainer>\r\n          <FlexContainer $full $direction='column'>\r\n            <FlexContainer\r\n              style={{\r\n                marginTop: -3,\r\n                marginRight: -3,\r\n                padding: '0 4px',\r\n                paddingLeft: 8,\r\n                background: '#555',\r\n                height: 24,\r\n                lineHeight: '28px',\r\n                borderBottom: '1px solid rgba(255,255,255,0.2)',\r\n                boxShadow: '0px 4px 5px black',\r\n              }}\r\n            >\r\n              <span\r\n                style={{\r\n                  fontWeight: 'bolder',\r\n                  textShadow: '0px 0px 2px black',\r\n                }}\r\n              >\r\n                {character.name}\r\n              </span>\r\n            </FlexContainer>\r\n            <FlexContainer>\r\n              <span\r\n                style={{\r\n                  fontWeight: 'bolder',\r\n                  padding: 4,\r\n                  fontSize: 42,\r\n                  height: 42,\r\n                  lineHeight: '42px',\r\n                  color: '#b55553',\r\n                }}\r\n              >\r\n                {health > 0 ? health : 0}\r\n              </span>\r\n              <FullContainer />\r\n              <FlexContainer $direction='column'>\r\n                <FlexContainer>\r\n                  <Icon\r\n                    src={Inventory}\r\n                    fill={'rgba(255,255,255,0.7)'}\r\n                    size={18}\r\n                    shadow\r\n                    style={{ padding: 6, cursor: 'pointer' }}\r\n                  />\r\n                  <Icon\r\n                    src={Details}\r\n                    fill={'rgba(255,255,255,0.7)'}\r\n                    size={18}\r\n                    shadow\r\n                    style={{ padding: 6, cursor: 'pointer' }}\r\n                  />\r\n                </FlexContainer>\r\n              </FlexContainer>\r\n            </FlexContainer>\r\n            <FullContainer />\r\n            <Gauge\r\n              name='Health'\r\n              color='#8f4e4d'\r\n              max={character.health}\r\n              value={noneg(health)}\r\n              height={12}\r\n            >\r\n              {noneg(health)}/{character.health}\r\n            </Gauge>\r\n            <Gauge\r\n              name='XP'\r\n              color='#5e8575'\r\n              max={3300}\r\n              value={1256}\r\n              height={12}\r\n            >\r\n              1256/3300\r\n            </Gauge>\r\n            <HoverBadge\r\n              badgeProps={{ $bottom: '18px', $left: '105px' }}\r\n              content={<BoxContainer>Character Level</BoxContainer>}\r\n            >\r\n              <span>{character.level}</span>\r\n            </HoverBadge>\r\n            <FlexContainer>\r\n              <CharacterStat statKey='strength' character={character} />\r\n              <CharacterStat statKey='vigor' character={character} />\r\n              <CharacterStat statKey='intelligence' character={character} />\r\n              <CharacterStat statKey='perception' character={character} />\r\n              <CharacterStat statKey='talent' character={character} />\r\n              <CharacterStat statKey='agility' character={character} />\r\n              <CharacterStat statKey='luck' character={character} />\r\n            </FlexContainer>\r\n          </FlexContainer>\r\n        </FlexContainer>\r\n      </BoxContainer>\r\n      <FlexContainer\r\n        style={{\r\n          position: 'absolute',\r\n          top: '-24px',\r\n          right: '4px',\r\n        }}\r\n      >\r\n        {character.tags.map((tag) => (\r\n          <TagPreview direction='up' tag={tag} />\r\n        ))}\r\n      </FlexContainer>\r\n      <HoverBadge\r\n        badgeProps={{ $bottom: '64px', $left: '-12px', $color: 'lightblue' }}\r\n        content={<BoxContainer>Armor</BoxContainer>}\r\n      >\r\n        <span>{character.stats.armor}</span>\r\n      </HoverBadge>\r\n      <HoverBadge\r\n        badgeProps={{ $bottom: '26px', $left: '-12px', $color: 'plum' }}\r\n        content={<BoxContainer>Magic Resistance</BoxContainer>}\r\n      >\r\n        <span>{character.stats.resistance}</span>\r\n      </HoverBadge>\r\n      <HoverBadge\r\n        badgeProps={{ $bottom: '-10px', $left: '-12px', $color: 'lightgreen' }}\r\n        content={<BoxContainer>Evasion</BoxContainer>}\r\n      >\r\n        <span>{character.stats.evasion}</span>\r\n      </HoverBadge>\r\n      <Badge\r\n        $bottom='-12px'\r\n        $left='40px'\r\n        $size='35px'\r\n        $color={\r\n          character.weapon.damage.type === 'physical'\r\n            ? 'rgba(255,255,255,0.8)'\r\n            : 'plum'\r\n        }\r\n        style={{ fontSize: 24 }}\r\n      >\r\n        {character.weapon.damage.damage}\r\n      </Badge>\r\n    </Wrapper>\r\n  )\r\n}\r\n","import { styled, withStyle } from 'styletron-react'\r\n\r\nexport interface ButtonPropsT {\r\n  $direction?: 'up' | 'down'\r\n}\r\nexport const Button = styled('button', (props: ButtonPropsT) => {\r\n  return {\r\n    cursor: 'pointer',\r\n    background: '#222',\r\n    boxShadow: 'inset 0px 0px 3px black',\r\n    textShadow: '0px 1px 3px black',\r\n    border: '1px solid rgba(255,255,255,0.2)',\r\n    color: 'rgba(255,255,255,1)',\r\n    ':hover': {\r\n      border: '1px solid rgba(255,255,255,0.4)',\r\n    },\r\n    ':active': {\r\n      outline: 'none',\r\n      border: '1px solid rgba(255,255,255,0.7)',\r\n    },\r\n    ':focus': {\r\n      outline: 'none',\r\n    },\r\n    padding: '10px 30px',\r\n  }\r\n})\r\n\r\nexport const ConfirmButton = withStyle(Button, (props: ButtonPropsT) => {\r\n  const { $direction } = props\r\n  return {\r\n    // background: 'linear-gradient(0deg, rgba(157,0,0,1) 0%, rgba(110,0,0,1) 100%)',\r\n    // fontWeight: 'bold',\r\n    borderTop: $direction === 'down' ? 'none' : undefined,\r\n    borderBottom: $direction === 'up' ? 'none' : undefined,\r\n    padding: '10px 30px',\r\n    boxShadow: 'inset 0px 2px 8px black',\r\n    ':hover': {\r\n      borderTop: $direction === 'down' ? 'none' : undefined,\r\n      borderBottom: $direction === 'up' ? 'none' : undefined,\r\n    },\r\n  }\r\n})\r\n","import React, { useState } from 'react'\r\nimport { ProcessedPartyT } from '../../types'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { PartyCharacter } from '../PartyCharacter'\r\nimport { useCombatContext } from '../../contexts/CombatContext'\r\nimport { ConfirmButton } from '../../elements/button'\r\n\r\nexport interface CombatPartyPlayerPropsT {\r\n  party: ProcessedPartyT\r\n}\r\nexport const CombatPlayerParty = (props: CombatPartyPlayerPropsT) => {\r\n  const { party } = props\r\n  const {\r\n    activeCharacter,\r\n    selectedSkill,\r\n    selectedTargets,\r\n    onTargetsSelect,\r\n    next,\r\n  } = useCombatContext()\r\n\r\n  const [isHovering, setIsHovering] = useState<boolean>(false)\r\n  return (\r\n    <FlexContainer $direction='column'>\r\n      <FlexContainer\r\n        style={{\r\n          justifyContent: 'space-around',\r\n          alignItems: 'flex-end',\r\n          cursor: selectedSkill?.targetType === 'party' ? 'pointer' : 'default',\r\n        }}\r\n        onMouseEnter={() => setIsHovering(true)}\r\n        onMouseLeave={() => setIsHovering(false)}\r\n        onClick={() => {\r\n          if (selectedSkill && selectedSkill.targetType === 'party') {\r\n            onTargetsSelect(party)\r\n          }\r\n        }}\r\n      >\r\n        {party.characters.map((c) => (\r\n          <div key={c.id}>\r\n            {selectedSkill &&\r\n              !c.dead &&\r\n              ((selectedSkill.targetType === 'self' &&\r\n                c.id === activeCharacter.id) ||\r\n                selectedSkill.targetType === 'ally') && (\r\n                <FlexContainer style={{ justifyContent: 'center' }}>\r\n                  <div style={{ boxShadow: '0px 2px 5px black' }}>\r\n                    <ConfirmButton onClick={() => next(c)} $direction='up'>\r\n                      Confirm Target\r\n                    </ConfirmButton>\r\n                  </div>\r\n                </FlexContainer>\r\n              )}\r\n            <PartyCharacter activeCharacter={activeCharacter} character={c} />\r\n          </div>\r\n        ))}\r\n      </FlexContainer>\r\n      {selectedSkill && selectedSkill.targetType === 'party' && (\r\n        <FlexContainer style={{ justifyContent: 'center' }}>\r\n          <div style={{ boxShadow: '0px 2px 5px black' }}>\r\n            <ConfirmButton\r\n              onClick={() => next(party)}\r\n              onMouseEnter={() => setIsHovering(true)}\r\n              onMouseLeave={() => setIsHovering(false)}\r\n            >\r\n              Confirm Group Target\r\n            </ConfirmButton>\r\n          </div>\r\n        </FlexContainer>\r\n      )}\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import { ModalStylesT } from '.'\r\n\r\nexport interface ModalContextStateT {\r\n  isOpen: boolean\r\n  contents: JSX.Element | null\r\n  callback: ((payload?: any) => void) | null\r\n  payload: any | null\r\n  blocking: boolean\r\n  styles: ModalStylesT\r\n}\r\nexport const initialState: ModalContextStateT = {\r\n  isOpen: false,\r\n  contents: null,\r\n  callback: null,\r\n  payload: null,\r\n  blocking: false,\r\n  styles: {},\r\n}\r\n\r\nexport const OPEN = 'modalContext/OPEN'\r\nexport const CLOSE = 'modalContext/CLOSE'\r\nexport const SET_CONTENTS = 'modalContext/SET_CONTENTS'\r\nexport const SET_CALLBACK = 'modalContext/SET_CALLBACK'\r\nexport const SET_PAYLOAD = 'modalContext/SET_PAYLOAD'\r\nexport const SET_BLOCKING = 'modalContext/SET_BLOCKING'\r\nexport const SET_STYLE = 'modalContext/SET_STYLE'\r\n\r\nexport const actions = {\r\n  open: (\r\n    contents?: JSX.Element,\r\n    styles?: ModalStylesT,\r\n    blocking?: boolean,\r\n    callback?: (payload?: any) => void,\r\n  ) => ({\r\n    type: OPEN,\r\n    contents,\r\n    styles,\r\n    blocking,\r\n    callback,\r\n  }),\r\n  close: () => ({ type: CLOSE }),\r\n  setPayload: (payload: any) => ({ type: SET_PAYLOAD, payload }),\r\n  setContents: (contents: JSX.Element | null) => ({\r\n    type: SET_CONTENTS,\r\n    contents,\r\n  }),\r\n  setCallback: (callback: (() => void) | null) => ({\r\n    type: SET_CALLBACK,\r\n    callback,\r\n  }),\r\n  setBlocking: (blocking: boolean) => ({ type: SET_BLOCKING, blocking }),\r\n  setStyles: (styles: ModalStylesT) => ({ type: SET_STYLE, styles }),\r\n}\r\n\r\nconst core: Record<\r\n  string,\r\n  (state: ModalContextStateT, action: any) => ModalContextStateT\r\n> = {\r\n  [OPEN]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    isOpen: true,\r\n    contents: action.contents ? action.contents : state.contents,\r\n    styles: action.styles ? action.styles : state.styles || {},\r\n    blocking: action.blocking || false,\r\n    callback: action.callback ? action.callback : state.callback,\r\n  }),\r\n  [CLOSE]: (state: ModalContextStateT) => ({\r\n    ...state,\r\n    isOpen: false,\r\n  }),\r\n  [SET_PAYLOAD]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    payload: action.payload,\r\n  }),\r\n  [SET_CONTENTS]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    callback: null,\r\n    payload: null,\r\n    contents: action.contents,\r\n    blocking: false,\r\n    style: {},\r\n  }),\r\n  [SET_CALLBACK]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    callback: action.callback,\r\n  }),\r\n  [SET_BLOCKING]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    blocking: action.blocking,\r\n  }),\r\n  [SET_STYLE]: (state: ModalContextStateT, action: any) => ({\r\n    ...state,\r\n    styles: action.styles,\r\n  }),\r\n}\r\n\r\nexport const reducer = (\r\n  state: ModalContextStateT = initialState,\r\n  action: any,\r\n) => {\r\n  const coreFunction = core[action.type]\r\n  return coreFunction ? coreFunction(state, action) : state\r\n}\r\n","import React, { useContext, useReducer, useMemo, CSSProperties } from 'react'\r\nimport Modal from 'react-modal'\r\nimport { actions, reducer, initialState, ModalContextStateT } from './reducer'\r\n\r\nexport interface ModalContextT {\r\n  open: (\r\n    contents?: JSX.Element,\r\n    styles?: ModalStylesT,\r\n    blocking?: boolean,\r\n    callback?: (payload?: any) => void,\r\n  ) => void\r\n  close: (payload?: any) => void\r\n  setPayload: (payload: any) => void\r\n  setBlocking: (blocking: boolean) => void\r\n  setContents: (contents: JSX.Element) => void\r\n  setCallback: (callback: (payload?: any) => void) => void\r\n  setStyles: (styles: ModalStylesT) => void\r\n}\r\nconst defaultContext: ModalContextT = {\r\n  open: () => null,\r\n  close: () => null,\r\n  setBlocking: () => null,\r\n  setPayload: () => null,\r\n  setContents: () => null,\r\n  setCallback: () => null,\r\n  setStyles: () => null,\r\n}\r\nexport const ModalContext = React.createContext<ModalContextT>(defaultContext)\r\nexport const useModalContext = () => useContext(ModalContext)\r\n\r\nexport interface ModalStylesT {\r\n  modal?: CSSProperties\r\n  overlay?: CSSProperties\r\n}\r\n\r\nconst getContextValue = (\r\n  state: ModalContextStateT,\r\n  dispatch: React.Dispatch<any>,\r\n) => ({\r\n  isOpen: state.isOpen,\r\n  open: (\r\n    contents?: JSX.Element,\r\n    styles?: ModalStylesT,\r\n    blocking?: boolean,\r\n    callback?: (payload?: any) => void,\r\n  ) => {\r\n    dispatch(actions.open(contents, styles, blocking, callback))\r\n  },\r\n  close: (payload?: any) => {\r\n    if (state.callback) state.callback(payload || state.payload)\r\n    dispatch(actions.close())\r\n  },\r\n  setPayload: (payload: any) => dispatch(actions.setPayload(payload)),\r\n  setContents: (contents: JSX.Element) =>\r\n    dispatch(actions.setContents(contents)),\r\n  setCallback: (callback: (payload?: any) => void) =>\r\n    dispatch(actions.setCallback(callback)),\r\n  setBlocking: (blocking: boolean) => dispatch(actions.setBlocking(blocking)),\r\n  setStyles: (styles: ModalStylesT) => dispatch(actions.setStyles(styles)),\r\n})\r\nModal.setAppElement('#root')\r\nexport interface ModalContextProviderPropsT {\r\n  children: JSX.Element\r\n}\r\nexport const ModalContextProvider = (props: ModalContextProviderPropsT) => {\r\n  const { children } = props\r\n  const reducerValue = useReducer(reducer, initialState)\r\n  const [state] = reducerValue\r\n  const context = useMemo(() => getContextValue(...reducerValue), [\r\n    reducerValue,\r\n  ])\r\n\r\n  return (\r\n    <ModalContext.Provider value={context}>\r\n      {children}\r\n      <Modal\r\n        isOpen={state.isOpen}\r\n        onRequestClose={() => {\r\n          if (!state.blocking) context.close()\r\n        }}\r\n        style={{\r\n          content: {\r\n            backgroundColor: '#111',\r\n            color: 'white',\r\n            width: 400,\r\n            margin: '0 auto',\r\n            bottom: 'unset',\r\n            borderColor: '#555',\r\n            ...state.styles.modal,\r\n          },\r\n          overlay: {\r\n            backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n            ...state.styles.overlay,\r\n          },\r\n        }}\r\n      >\r\n        {state.contents || <div />}\r\n      </Modal>\r\n    </ModalContext.Provider>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { SkillT, StatsT } from '../../types'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { STATI_ICONS } from '../../icons/maps'\r\nimport { Icon } from '../Icon'\r\nimport { Badge } from '../../elements/badge'\r\nimport { CheckKVT } from '../RoundResultRenderer'\r\nimport X from '../../icons/svg/lorc/split-cross.svg'\r\n\r\nexport interface SkillChecksPropsT {\r\n  skill: SkillT\r\n}\r\nexport const SkillChecks = (props: SkillChecksPropsT) => {\r\n  const { skill } = props\r\n  return (\r\n    <FlexContainer\r\n      style={{ justifyContent: 'center', padding: '0px 0 24px 0' }}\r\n    >\r\n      {skill.rolls.map((roll, i) => (\r\n        <SkillCheck\r\n          key={i}\r\n          check={{ label: roll.key || 'strength', result: undefined }}\r\n        />\r\n      ))}\r\n    </FlexContainer>\r\n  )\r\n}\r\n\r\nexport interface SkillCheckT {\r\n  check: CheckKVT\r\n}\r\nexport const SkillCheck = (props: SkillCheckT) => {\r\n  const { check } = props\r\n  return (\r\n    <div\r\n      style={{\r\n        padding: '0px 12px',\r\n        opacity: check.result === undefined ? 0.5 : 1,\r\n      }}\r\n    >\r\n      <Badge $absolute={false} $size={36}>\r\n        <Icon\r\n          src={STATI_ICONS[(check.label as keyof StatsT) || 'strength'] || ''}\r\n          fill={getColor(check.result)}\r\n          size={32}\r\n        />\r\n        {check.result === false && (\r\n          <Icon\r\n            src={X}\r\n            fill={'lightcoral'}\r\n            size={32}\r\n            style={{ position: 'absolute', top: 0 }}\r\n          />\r\n        )}\r\n      </Badge>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst getColor = (result: boolean | undefined) => {\r\n  if (result === true) return 'white'\r\n  if (result === false) return 'rgba(255,255,255,0.6)'\r\n  return 'rgba(255,255,255,0.6)'\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useCombatContext } from '../../contexts/CombatContext'\r\nimport { useModalContext } from '../../contexts/ModalContext'\r\nimport { NameSpanBuilder } from '../../contexts/CombatLogContext/util'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport Kefir from 'kefir'\r\nimport { SkillCheck } from '../SkillChecks'\r\n\r\nexport interface RoundResultRendererPropsT {\r\n  isModal?: boolean\r\n}\r\nexport const RoundResultRenderer = (props: RoundResultRendererPropsT) => {\r\n  const { isModal = true } = props\r\n  const { activeRound, commit } = useCombatContext()\r\n  const { open, close } = useModalContext()\r\n  const [isOpen, setIsOpen] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (activeRound && !isOpen) {\r\n      setIsOpen(true)\r\n      if (isModal) {\r\n        open(\r\n          <RoundResult\r\n            close={() => {\r\n              close(true)\r\n              setIsOpen(false)\r\n              commit()\r\n            }}\r\n          />,\r\n          {\r\n            overlay: {\r\n              background: 'transparent',\r\n            },\r\n          },\r\n          true,\r\n        )\r\n      }\r\n    }\r\n  }, [isModal, isOpen, activeRound, open, close, commit])\r\n\r\n  if (!isModal && activeRound && activeRound[0]) {\r\n    return (\r\n      <FlexContainer style={{ height: 315 }}>\r\n        <RoundResult\r\n          close={() => {\r\n            setIsOpen(false)\r\n            commit()\r\n          }}\r\n        />\r\n      </FlexContainer>\r\n    )\r\n  }\r\n  return null\r\n}\r\n\r\nexport interface RoundResultPropsT {\r\n  close: () => void\r\n}\r\nexport interface CheckKVT {\r\n  label: string\r\n  result: boolean | undefined\r\n}\r\nexport const RoundResult = (props: RoundResultPropsT) => {\r\n  const { close } = props\r\n  const { activeRound } = useCombatContext()\r\n  const [isDone, setIsDone] = useState(false)\r\n  const rounds = activeRound || []\r\n  const round = rounds[0]\r\n  const [roundResults, setRoundResults] = useState<CheckKVT[]>(\r\n    !round\r\n      ? []\r\n      : round.rollResults.map((result, i) => ({\r\n          label: round.skill.rolls[i].key || '<NULL>',\r\n          result: undefined,\r\n        })),\r\n  )\r\n\r\n  const updateRoundResult = (value: CheckKVT, index: number) =>\r\n    setRoundResults((r) => r.map((r, i) => (i === index ? value : r)))\r\n\r\n  useEffect(() => {\r\n    const stream = Kefir.sequentially(\r\n      200,\r\n      roundResults.map((r, i) => ({ ...r, index: i })),\r\n    )\r\n    stream.onValue((result) => {\r\n      updateRoundResult(\r\n        {\r\n          label: result.label,\r\n          result:\r\n            result.label === 'accuracy'\r\n              ? round.accuracySuccess\r\n              : round.rollResults[result.index].result,\r\n        },\r\n        result.index,\r\n      )\r\n    })\r\n    stream.onEnd(() => {\r\n      Kefir.later(500, undefined).onValue(() => {\r\n        setIsDone(true)\r\n      })\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (isDone) {\r\n      close()\r\n    }\r\n  }, [isDone, close])\r\n\r\n  if (!round) return null\r\n\r\n  const target = {\r\n    ...round.target,\r\n    name: rounds.length > 1 ? `${rounds.length} characters` : round.target.name,\r\n  }\r\n\r\n  return (\r\n    <FlexContainer $direction='column' style={{ textAlign: 'center' }}>\r\n      <FlexContainer style={{ justifyContent: 'space-evenly' }}>\r\n        {roundResults.map((result, i) => (\r\n          <SkillCheck key={i} check={result} />\r\n        ))}\r\n      </FlexContainer>\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\nimport { SkillT, ProcessedCharacterT } from '../../types'\r\nimport {\r\n  getChecksProbability,\r\n  getSkillDamageRange,\r\n  getSkillDamage,\r\n  getPerfectKeys,\r\n  getPerfectText,\r\n} from '../../functions'\r\n\r\nexport interface SkillPreviewPropsT {\r\n  skill: SkillT\r\n  source: ProcessedCharacterT\r\n  targets: ProcessedCharacterT[]\r\n}\r\nexport const SkillPreview = (props: SkillPreviewPropsT) => {\r\n  const { skill, source, targets } = props\r\n  const perfectChance = getChecksProbability(source, skill.rolls)\r\n  const damage = getSkillDamage(skill, source)\r\n  const damageString = getSkillDamageRange(\r\n    skill,\r\n    source,\r\n    targets.length === 0 ? undefined : targets,\r\n  )\r\n  const perfectKeys = getPerfectText(skill, source)\r\n  return (\r\n    <BoxContainer\r\n      style={{ marginTop: 30, position: 'relative' }}\r\n      substyle={{ background: '#111' }}\r\n    >\r\n      <FlexContainer $direction='column' style={{ alignItems: 'center' }}>\r\n        <FlexContainer style={{ marginTop: -27 }}>\r\n          <FullContainer />\r\n          <BoxContainer\r\n            substyle={{\r\n              padding: '4px 12px',\r\n              background: '#555',\r\n              fontWeight: 'bolder',\r\n            }}\r\n          >\r\n            {skill.name}\r\n          </BoxContainer>\r\n          <FullContainer />\r\n        </FlexContainer>\r\n        <span style={{ color: 'rgba(255,255,255,0.4)', marginTop: 8 }}>\r\n          Perect ({Math.floor(perfectChance * 100)}%){' '}\r\n          {perfectKeys.length > 0 && '='} {perfectKeys}\r\n        </span>\r\n        <FlexContainer $full style={{ width: '100%', marginBottom: 8 }}>\r\n          {damage.damage > 0 && (\r\n            <FlexContainer\r\n              $full\r\n              $direction='column'\r\n              style={{ alignItems: 'center', marginRight: 10 }}\r\n            >\r\n              <span\r\n                style={{\r\n                  color: damage.type === 'physical' ? 'lightblue' : 'plum',\r\n                  fontWeight: 'bolder',\r\n                  fontSize: 32,\r\n                }}\r\n              >\r\n                {damageString}\r\n              </span>\r\n              <span style={{ color: 'rgba(255,255,255,0.2)' }}>MAX DMG</span>\r\n            </FlexContainer>\r\n          )}\r\n          <FlexContainer\r\n            $full\r\n            $direction='column'\r\n            style={{ alignItems: 'center' }}\r\n          >\r\n            <span\r\n              style={{\r\n                fontWeight: 'bolder',\r\n                fontSize: 32,\r\n              }}\r\n            >\r\n              {source.stats[skill.rolls[0].key || 'strength'] +\r\n                (skill.rolls[0].offset || 0)}\r\n              %\r\n            </span>\r\n            <span style={{ color: 'rgba(255,255,255,0.2)' }}>\r\n              Per Check ACC\r\n            </span>\r\n          </FlexContainer>\r\n        </FlexContainer>\r\n        <FlexContainer style={{ marginBottom: -18 }}>\r\n          <FullContainer />\r\n          <BoxContainer\r\n            substyle={{ padding: '0px 12px', background: '#555', fontSize: 10 }}\r\n          >\r\n            {skill.targetType}\r\n          </BoxContainer>\r\n          <FullContainer />\r\n        </FlexContainer>\r\n      </FlexContainer>\r\n    </BoxContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { useCombatContext } from '../../contexts/CombatContext'\r\nimport { Button } from '../../elements/button'\r\nimport { SkillPreview } from '../SkillPreview'\r\nimport { SkillChecks } from '../SkillChecks'\r\nimport { PLAYER_PARTY_ID } from '../../objects/Party'\r\nimport { SKILL_ICONS } from '../../icons/maps'\r\nimport { Icon } from '../Icon'\r\nimport { Hover } from '../Hover'\r\n\r\nexport const CombatActions = () => {\r\n  const {\r\n    activeCharacter,\r\n    selectedSkill,\r\n    selectedTargets,\r\n    onSkillSelect,\r\n  } = useCombatContext()\r\n\r\n  if (!activeCharacter || activeCharacter.partyId !== PLAYER_PARTY_ID)\r\n    return null\r\n\r\n  return (\r\n    <FlexContainer $direction='column' style={{ minWidth: 340 }}>\r\n      {selectedSkill && <SkillChecks skill={selectedSkill} />}\r\n      <FlexContainer style={{ justifyContent: 'center' }}>\r\n        {activeCharacter.skills.map((skill) =>\r\n          SKILL_ICONS[skill.id] ? (\r\n            <Hover delay={0}>\r\n              {({ isHovering }) => (\r\n                <Icon\r\n                  src={SKILL_ICONS[skill.id]}\r\n                  size={42}\r\n                  shadow={true}\r\n                  style={{\r\n                    cursor: 'pointer',\r\n                    padding: '0 12px',\r\n                  }}\r\n                  onClick={() => onSkillSelect(skill)}\r\n                  fill={\r\n                    skill.id === selectedSkill?.id\r\n                      ? 'lightsalmon'\r\n                      : isHovering\r\n                      ? 'white'\r\n                      : 'rgba(255,255,255,0.8)'\r\n                  }\r\n                />\r\n              )}\r\n            </Hover>\r\n          ) : (\r\n            <Button\r\n              key={skill.id}\r\n              onClick={() => onSkillSelect(skill)}\r\n              style={{\r\n                background: '#111',\r\n                borderColor:\r\n                  selectedSkill && skill.id === selectedSkill.id\r\n                    ? 'white'\r\n                    : undefined,\r\n              }}\r\n            >\r\n              {skill.name}\r\n            </Button>\r\n          ),\r\n        )}\r\n      </FlexContainer>\r\n      {selectedSkill && (\r\n        <SkillPreview\r\n          skill={selectedSkill}\r\n          source={activeCharacter}\r\n          targets={selectedTargets}\r\n        />\r\n      )}\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ProcessedCharacterT } from '../../types'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\nimport { Gauge } from '../Gauge'\r\nimport { noneg } from '../../util'\r\nimport { styled } from 'styletron-react'\r\nimport { Badge } from '../../elements/badge'\r\nimport { Icon } from '../Icon'\r\nimport { TAG_ICONS } from '../../icons/maps'\r\nimport { Tooltip } from '../Tooltip'\r\nimport { BoxContainer } from '../../elements/box'\r\nimport { TagPreview } from '../TagPreview'\r\n\r\nexport interface EnemyCharacterPropsT {\r\n  character: ProcessedCharacterT\r\n  activeCharacter: ProcessedCharacterT\r\n  hoverable?: boolean\r\n  selected?: boolean\r\n  isHovering?: boolean\r\n  onClick?: () => void\r\n}\r\nconst Wrapper = styled('div', (props: any) => {\r\n  const { $selected, $active, $hoverable, $isHovering } = props\r\n  const hoverable = $hoverable && !$selected\r\n  return {\r\n    margin: 10,\r\n    boxShadow: $isHovering\r\n      ? '0px 0px 20px black'\r\n      : $selected\r\n      ? '0px 0px 10px black'\r\n      : $active\r\n      ? '0px 0px 20px white'\r\n      : 'none',\r\n    ':hover': {\r\n      boxShadow: hoverable ? '0px 0px 20px black' : undefined,\r\n    },\r\n    transition: 'all 0.1s',\r\n  }\r\n})\r\nexport const EnemyCharacter = (props: EnemyCharacterPropsT) => {\r\n  const {\r\n    character,\r\n    activeCharacter,\r\n    hoverable,\r\n    selected,\r\n    isHovering,\r\n    onClick,\r\n  } = props\r\n  const health = character.health - character.stats.healthOffset\r\n  return (\r\n    <div\r\n      onClick={() => (onClick && !character.dead ? onClick() : null)}\r\n      style={{\r\n        borderWidth: 2,\r\n        width: 380,\r\n        position: 'relative',\r\n        cursor: onClick ? 'pointer' : 'default',\r\n        color: 'rgba(255,255,255,0.8)',\r\n        opacity: character.dead ? 0.5 : 1,\r\n      }}\r\n    >\r\n      <FlexContainer style={{ alignItems: 'center' }}>\r\n        <FlexContainer style={{ border: '1px solid black' }}>\r\n          <Wrapper\r\n            $hoverable={hoverable && !character.dead}\r\n            $active={character.id === activeCharacter.id}\r\n            $selected={selected}\r\n            $isHovering={isHovering}\r\n            style={{\r\n              height: 64,\r\n              width: 64,\r\n            }}\r\n          >\r\n            <img\r\n              alt='profile'\r\n              height='64'\r\n              width='64'\r\n              src={`https://picsum.photos/seed/${character.name}/94/94`}\r\n              style={{\r\n                height: 64,\r\n                width: 64,\r\n              }}\r\n            />\r\n          </Wrapper>\r\n        </FlexContainer>\r\n        <FlexContainer $full $direction='column'>\r\n          <FlexContainer\r\n            style={{\r\n              justifyContent: 'flex-end',\r\n            }}\r\n          >\r\n            <span\r\n              style={{\r\n                padding: '2px 4px',\r\n                textAlign: 'right',\r\n                fontSize: 18,\r\n                lineHeight: '18px',\r\n                background: 'rgba(0,0,0,0.4)',\r\n                textShadow: '1px 1px 2px black',\r\n              }}\r\n            >\r\n              {character.name}\r\n            </span>\r\n          </FlexContainer>\r\n          <div style={{ boxShadow: '0px 5px 15px rgba(0,0,0,0.4)' }}>\r\n            <Gauge\r\n              name='Health'\r\n              color='#8f4e4d'\r\n              max={character.health}\r\n              value={noneg(health)}\r\n              height={20}\r\n            >\r\n              {noneg(health)}/{character.health}\r\n            </Gauge>\r\n          </div>\r\n          <Badge $left='-6px' $bottom='-6px' $size='20px' $color='lightcoral'>\r\n            {character.level}\r\n          </Badge>\r\n          <FlexContainer\r\n            style={{\r\n              position: 'absolute',\r\n              bottom: '-10px',\r\n              left: '70px',\r\n            }}\r\n          >\r\n            {character.tags.map((tag) => (\r\n              <TagPreview tag={tag} />\r\n            ))}\r\n          </FlexContainer>\r\n          <FlexContainer\r\n            style={{\r\n              position: 'absolute',\r\n              bottom: '-6px',\r\n              right: '3px',\r\n              width: 52,\r\n              alignItems: 'center',\r\n            }}\r\n          >\r\n            <FullContainer />\r\n            {character.stats.armor > 0 && (\r\n              <Badge\r\n                $absolute={false}\r\n                $right='4px'\r\n                $size='12px'\r\n                $color='lightblue'\r\n              >\r\n                {character.stats.armor}\r\n              </Badge>\r\n            )}\r\n            {character.stats.resistance > 0 && (\r\n              <Badge $absolute={false} $size='12px' $color='plum'>\r\n                {character.stats.resistance}\r\n              </Badge>\r\n            )}\r\n            <FullContainer />\r\n          </FlexContainer>\r\n        </FlexContainer>\r\n        <span\r\n          style={{\r\n            fontWeight: 'bolder',\r\n            fontSize: 52,\r\n            height: 52,\r\n            lineHeight: '45px',\r\n            textShadow: '1px 1px 10px black',\r\n            color: '#b55553',\r\n          }}\r\n        >\r\n          {health > 0 ? health : 0}\r\n        </span>\r\n      </FlexContainer>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { ProcessedPartyT } from '../../types'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { useCombatContext } from '../../contexts/CombatContext'\r\nimport { ConfirmButton } from '../../elements/button'\r\nimport { EnemyCharacter } from '../EnemyCharacter'\r\nimport { PLAYER_PARTY_ID } from '../../objects/Party'\r\n\r\nexport interface CombatPartyPropsT {\r\n  party: ProcessedPartyT\r\n}\r\nexport const CombatParty = (props: CombatPartyPropsT) => {\r\n  const { party } = props\r\n  const {\r\n    activeCharacter,\r\n    selectedSkill,\r\n    selectedTargets,\r\n    onTargetsSelect,\r\n    next,\r\n  } = useCombatContext()\r\n\r\n  const [isHovering, setIsHovering] = useState<boolean>(false)\r\n  return (\r\n    <FlexContainer $direction='column'>\r\n      <FlexContainer\r\n        style={{\r\n          justifyContent: 'space-around',\r\n          cursor: selectedSkill?.targetType === 'group' ? 'pointer' : 'default',\r\n        }}\r\n        onMouseEnter={() => setIsHovering(true)}\r\n        onMouseLeave={() => setIsHovering(false)}\r\n        onClick={() => {\r\n          if (selectedSkill && selectedSkill.targetType === 'group') {\r\n            onTargetsSelect(party)\r\n          }\r\n        }}\r\n      >\r\n        {party.characters.map((c) => (\r\n          <div key={c.id}>\r\n            <EnemyCharacter\r\n              /*\r\n              hoverable={false}\r\n              isHovering={isHovering && selectedSkill?.targetType === 'group'}\r\n              selected={\r\n                selectedTargets.find((t) => t.id === c.id) !== undefined\r\n              }\r\n              onClick={() => {\r\n                if (selectedSkill && selectedSkill.targetType === 'single') {\r\n                  onTargetsSelect(c)\r\n                }\r\n              }} */\r\n              activeCharacter={activeCharacter}\r\n              character={c}\r\n            />\r\n            {selectedSkill &&\r\n              selectedSkill.targetType === 'single' &&\r\n              !c.dead &&\r\n              activeCharacter.partyId === PLAYER_PARTY_ID && (\r\n                <FlexContainer\r\n                  style={{ justifyContent: 'center', marginTop: -13 }}\r\n                >\r\n                  <div style={{ boxShadow: '0px 2px 5px black' }}>\r\n                    <ConfirmButton onClick={() => next(c)} $direction='down'>\r\n                      Confirm Target\r\n                    </ConfirmButton>\r\n                  </div>\r\n                </FlexContainer>\r\n              )}\r\n          </div>\r\n        ))}\r\n      </FlexContainer>\r\n      {selectedSkill && selectedSkill.targetType === 'group' && (\r\n        <FlexContainer style={{ justifyContent: 'center' }}>\r\n          <div style={{ boxShadow: '0px 2px 5px black' }}>\r\n            <ConfirmButton\r\n              onClick={() => next(party)}\r\n              onMouseEnter={() => setIsHovering(true)}\r\n              onMouseLeave={() => setIsHovering(false)}\r\n            >\r\n              Confirm Group Target\r\n            </ConfirmButton>\r\n          </div>\r\n        </FlexContainer>\r\n      )}\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport {\r\n  CombatQueueT,\r\n  getFirst,\r\n  getSortedIds,\r\n  getMax,\r\n} from '../../types/CombatQueue'\r\nimport { ProcessedCharacterT } from '../../types'\r\nimport { FlexContainer, FullContainer } from '../../elements/flex'\r\n\r\nconst size = 40\r\nexport interface CombatQueuePropsT {\r\n  queue: CombatQueueT\r\n  characters: ProcessedCharacterT[]\r\n}\r\nexport const CombatQueue = (props: CombatQueuePropsT) => {\r\n  const { queue, characters } = props\r\n  const first = characters.find(\r\n    (c) => c.id === getFirst(queue),\r\n  ) as ProcessedCharacterT\r\n  const sortedIds = getSortedIds(queue)\r\n  const bigList = [\r\n    ...sortedIds,\r\n    ...sortedIds,\r\n    ...sortedIds,\r\n    ...sortedIds,\r\n    ...sortedIds,\r\n    ...sortedIds,\r\n  ]\r\n  const count = Math.floor((800 - 52) / size)\r\n  const [f, ...list] = Array(count)\r\n    .fill(null)\r\n    .map((_, i) => bigList[i])\r\n    .map((id) => characters.find((c) => c.id === id))\r\n    .filter((c) => c !== undefined)\r\n  const max = getMax(queue)\r\n  const min = 50\r\n  const widthCoef = max > min ? 100 / max : 100 / min\r\n  return (\r\n    <FlexContainer $direction='column'>\r\n      <FlexContainer\r\n        style={{\r\n          justifyContent: 'center',\r\n          background: '#111',\r\n          height: 52,\r\n          borderBottom: '2px solid rgba(255,255,255,0.3)',\r\n          boxShadow: '1px 1px 1px black',\r\n        }}\r\n      >\r\n        <FlexContainer style={{ width: 800 }}>\r\n          <FlexContainer>\r\n            <img\r\n              alt='profile'\r\n              height='64'\r\n              width='64'\r\n              src={`https://picsum.photos/seed/${first.name}/115/115`}\r\n              style={{\r\n                height: 64,\r\n                width: 64,\r\n                border: '1px solid rgba(255,255,255,0.5)',\r\n                boxShadow: '1px 1px 1px black',\r\n              }}\r\n            />\r\n          </FlexContainer>\r\n          <FlexContainer $full $direction='column'>\r\n            <FullContainer />\r\n            <FlexContainer $full style={{ position: 'relative' }}>\r\n              {characters\r\n                .filter((c) => c.id !== first.id && !c.dead)\r\n                .map((c, i) => (\r\n                  <div\r\n                    key={`${c?.id}-${i}`}\r\n                    style={{\r\n                      height: size - 10,\r\n                      width: size - 7,\r\n                      position: 'absolute',\r\n                      bottom: '0px',\r\n                      left: `${queue[c.id] * widthCoef}%`,\r\n                      transition: 'all 0.3s',\r\n                    }}\r\n                  >\r\n                    <img\r\n                      alt={`${queue[c?.id || '']}`}\r\n                      height={size}\r\n                      width={size}\r\n                      src={`https://picsum.photos/seed/${c?.name}/115/115`}\r\n                      style={{\r\n                        height: size - 10,\r\n                        width: size - 7,\r\n                        border: '1px solid rgba(255,255,255,0.5)',\r\n                        borderBottom: 'none',\r\n                      }}\r\n                    />\r\n                  </div>\r\n                ))}\r\n            </FlexContainer>\r\n          </FlexContainer>\r\n        </FlexContainer>\r\n      </FlexContainer>\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React, { useRef, useEffect } from 'react'\r\nimport { FlexContainer } from '../../elements/flex'\r\nimport { useCombatLogContext } from '../../contexts/CombatLogContext'\r\n\r\nexport const CombatLog = () => {\r\n  const { combatLog } = useCombatLogContext()\r\n  const scrollRef = useRef<HTMLDivElement>(null)\r\n  useEffect(() => {\r\n    if (scrollRef.current) {\r\n      scrollRef.current.scrollIntoView({ behavior: 'smooth' })\r\n    }\r\n  }, [combatLog])\r\n  return (\r\n    <FlexContainer\r\n      $direction='column'\r\n      style={{\r\n        padding: 8,\r\n        minWidth: 400,\r\n        height: 300,\r\n        overflow: 'auto',\r\n        background: 'rgba(0,0,0,0.7)',\r\n        color: 'rgba(255,255,255,0.8)',\r\n      }}\r\n    >\r\n      {combatLog.map((line, i) => (\r\n        <span key={i}>{line}</span>\r\n      ))}\r\n      <div ref={scrollRef} />\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useCombatContext } from '../contexts/CombatContext'\r\nimport { BoxContainer } from '../elements/box'\r\nimport { FlexContainer, FullContainer } from '../elements/flex'\r\nimport { useCombatLogContext } from '../contexts/CombatLogContext'\r\nimport { CombatPlayerParty } from '../components/CombatPlayerParty'\r\nimport { RoundResultRenderer } from '../components/RoundResultRenderer'\r\nimport { CombatActions } from '../components/CombatActions'\r\nimport { CombatParty } from '../components/CombatParty'\r\nimport { useModalContext } from '../contexts/ModalContext'\r\nimport { CombatQueue } from '../components/CombatQueue'\r\nimport ForestBg from '../assets/img/flat-forestred.jpg'\r\nimport { CombatLog } from '../components/CombatLog'\r\n\r\nexport const Combat = () => {\r\n  const {\r\n    party,\r\n    enemyParty,\r\n    activeCharacter,\r\n    characters,\r\n    queue,\r\n    isDone,\r\n    isRunning,\r\n    isRenderingResult,\r\n    start,\r\n  } = useCombatContext()\r\n  const { open, close } = useModalContext()\r\n  const { combatLog } = useCombatLogContext()\r\n  useEffect(() => {\r\n    if (!isRunning) {\r\n      open(\r\n        <div style={{ textAlign: 'center' }}>\r\n          <h1>Combat Start!</h1>\r\n        </div>,\r\n      )\r\n      setTimeout(() => {\r\n        close()\r\n        start()\r\n      }, 500)\r\n    }\r\n  }, [])\r\n  useEffect(() => {\r\n    if (isDone) {\r\n      open(\r\n        <div style={{ textAlign: 'center' }}>\r\n          <h4>Refresh to do combat again</h4>\r\n        </div>,\r\n      )\r\n    }\r\n  }, [isDone])\r\n  if (!isRunning) return null\r\n  if (!activeCharacter) return <span>refresh to do combat again</span>\r\n\r\n  return (\r\n    <FlexContainer\r\n      style={{\r\n        height: '100vh',\r\n        background: `url(${ForestBg}) center center fixed no-repeat`,\r\n        backgroundSize: 'cover',\r\n      }}\r\n    >\r\n      <FlexContainer $full $direction='column'>\r\n        <CombatQueue queue={queue} characters={characters} />\r\n        <FlexContainer\r\n          $direction='column'\r\n          $full\r\n          style={{ padding: '30px 10px' }}\r\n        >\r\n          <FlexContainer $direction='column' $full>\r\n            <CombatParty party={enemyParty} />\r\n          </FlexContainer>\r\n          <FlexContainer $full>\r\n            <FullContainer />\r\n            <FlexContainer $direction='column'>\r\n              {!isRenderingResult && <CombatActions />}\r\n              <RoundResultRenderer isModal={false} />\r\n            </FlexContainer>\r\n            <FlexContainer $full style={{ justifyContent: 'flex-end' }}>\r\n              <CombatLog />\r\n            </FlexContainer>\r\n          </FlexContainer>\r\n          <FlexContainer\r\n            $direction='column'\r\n            $full\r\n            style={{ justifyContent: 'flex-end' }}\r\n          >\r\n            <CombatPlayerParty party={party} />\r\n          </FlexContainer>\r\n        </FlexContainer>\r\n      </FlexContainer>\r\n    </FlexContainer>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\nimport { CombatContextProvider } from './contexts/CombatContext'\nimport { PartyT } from './types'\nimport { makeParty } from './functions'\nimport { Combat } from './domain/Combat'\nimport { CombatLogContextProvider } from './contexts/CombatLogContext'\nimport { ModalContextProvider } from './contexts/ModalContext'\n\nexport const App = () => {\n  const [rawEnemyParty, setRawEnemyParty] = useState<PartyT>(makeParty(3))\n  return (\n    <CombatContextProvider\n      enemyParty={rawEnemyParty}\n      setEnemyParty={setRawEnemyParty}\n      onRequestNewParty={() => setRawEnemyParty(makeParty(3))}\n    >\n      <CombatLogContextProvider>\n        <ModalContextProvider>\n          <Combat />\n        </ModalContextProvider>\n      </CombatLogContextProvider>\n    </CombatContextProvider>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\nimport './index.css'\n\nimport { Provider as StyletronProvider, DebugEngine } from 'styletron-react'\nimport { Client as Styletron } from 'styletron-engine-atomic'\nimport { Provider as ReduxProvider } from 'react-redux'\nimport { makeStore } from './state'\nimport { PartyContextProvider } from './contexts/PartyContext'\n\nconst debug = process.env.NODE_ENV === 'production' ? void 0 : new DebugEngine()\nconst engine: Styletron = new Styletron()\nconst store = makeStore()\n\nReactDOM.render(\n  <React.StrictMode>\n    <ReduxProvider store={store}>\n      <StyletronProvider value={engine} debug={debug} debugAfterHydration>\n        <PartyContextProvider>\n          <App />\n        </PartyContextProvider>\n      </StyletronProvider>\n    </ReduxProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createStore, combineReducers, compose, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport party from './party'\r\n\r\nexport const makeStore = () =>\r\n  createStore(combineReducers({ party }), compose(applyMiddleware(thunk)))\r\n"],"sourceRoot":""}